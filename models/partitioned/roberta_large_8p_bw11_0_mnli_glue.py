"""AutoGenerated with:
python partition_glue_models.py --model_type roberta --model_name_or_path roberta-large --n_partitions 8 --use_METIS --bw 11 --partitioning_batch_size 32 --analysis_batch_size 32 --n_iter 2 --generate_model_parallel -a --metis_contig --auto_infer_node_bwd_to_fwd_ratio --basic_blocks BertSelfAttention
"""
import torch.nn.functional
import math
import torch
import torch.functional
from torch import Tensor
import torch.nn as nn
from itertools import chain
from typing import Optional, Tuple, Iterator, Iterable, OrderedDict, Dict
import collections
import os
from torch.nn.modules.sparse import Embedding
from torch.nn.modules.linear import Linear
from models.normal.NLP_models.modeling_bert import BertSelfAttention
from torch.nn.modules.dropout import Dropout
from torch.nn.modules.normalization import LayerNorm
from torch.nn.modules.activation import Tanh
# this is an auto generated file do not edit unless you know what you are doing


# partition adjacency
# model inputs {0}
# partition 0 {'inputs': {'input0', 'input1'}, 'outputs': {1}}
# partition 1 {'inputs': {0}, 'outputs': {2}}
# partition 2 {'inputs': {1}, 'outputs': {3}}
# partition 3 {'inputs': {2}, 'outputs': {4}}
# partition 4 {'inputs': {3}, 'outputs': {5}}
# partition 5 {'inputs': {4}, 'outputs': {6}}
# partition 6 {'inputs': {5}, 'outputs': {7}}
# partition 7 {'inputs': {6}, 'outputs': {'output'}}
# model outputs {7}


def create_pipeline_configuration(DEBUG=False):
    basic_blocks = (Embedding,Linear,BertSelfAttention,Dropout,LayerNorm,Tanh)
    module_path = os.path.relpath(__file__).replace("/",".")[:-3]
    
    config = {
        'batch_dim': 0,
        'depth': 10000,
        'basic_blocks': ['torch.nn.modules.sparse.Embedding', 'torch.nn.modules.linear.Linear', 'models.normal.NLP_models.modeling_bert.BertSelfAttention', 'torch.nn.modules.dropout.Dropout', 'torch.nn.modules.normalization.LayerNorm', 'torch.nn.modules.activation.Tanh'],
        'model_inputs': {
            'input0': {
                'shape': torch.Size([32, 128]),
                'dtype': torch.int64,
                'is_batched': True},
            'input1': {
                'shape': torch.Size([32, 128]),
                'dtype': torch.int64,
                'is_batched': True}},
        'model_outputs': {
            'RobertaForSequenceClassification/RobertaClassificationHead[classifier]/Linear[out_proj]': {
                'shape': torch.Size([32, 3]),
                'dtype': torch.float32,
                'is_batched': True}},
        'stages': {
            0: {
                'inputs': {
                    'input0': {
                        'shape': torch.Size([32, 128]),
                        'dtype': torch.int64,
                        'req_grad': False,
                        'is_batched': True},
                    'input1': {
                        'shape': torch.Size([32, 128]),
                        'dtype': torch.int64,
                        'req_grad': False,
                        'is_batched': True}},
                'outputs': {
                    'RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[1]/prim::TupleConstruct_61': {
                        'shape': (torch.Size([32, 128, 1024]), torch.Size([32, 1, 1, 128])),
                        'dtype': (torch.float32, torch.float32),
                        'is_batched': (True, True)}}},
            1: {
                'inputs': {
                    'RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[1]/prim::TupleConstruct_61': {
                        'shape': (torch.Size([32, 128, 1024]), torch.Size([32, 1, 1, 128])),
                        'dtype': (torch.float32, torch.float32),
                        'req_grad': (True, False),
                        'is_batched': (True, True)}},
                'outputs': {
                    'RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/tuple::__getitem___99': {
                        'shape': torch.Size([32, 1, 1, 128]),
                        'dtype': torch.float32,
                        'is_batched': True},
                    'RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[4]/BertOutput[output]/LayerNorm[LayerNorm]': {
                        'shape': torch.Size([32, 128, 1024]),
                        'dtype': torch.float32,
                        'is_batched': True}}},
            2: {
                'inputs': {
                    'RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/tuple::__getitem___99': {
                        'shape': torch.Size([32, 1, 1, 128]),
                        'dtype': torch.float32,
                        'req_grad': False,
                        'is_batched': True},
                    'RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[4]/BertOutput[output]/LayerNorm[LayerNorm]': {
                        'shape': torch.Size([32, 128, 1024]),
                        'dtype': torch.float32,
                        'req_grad': True,
                        'is_batched': True}},
                'outputs': {
                    'RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/tuple::__getitem___150': {
                        'shape': torch.Size([32, 1, 1, 128]),
                        'dtype': torch.float32,
                        'is_batched': True},
                    'RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[7]/BertOutput[output]/Tensor::__add___161': {
                        'shape': torch.Size([32, 128, 1024]),
                        'dtype': torch.float32,
                        'is_batched': True}}},
            3: {
                'inputs': {
                    'RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/tuple::__getitem___150': {
                        'shape': torch.Size([32, 1, 1, 128]),
                        'dtype': torch.float32,
                        'req_grad': False,
                        'is_batched': True},
                    'RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[7]/BertOutput[output]/Tensor::__add___161': {
                        'shape': torch.Size([32, 128, 1024]),
                        'dtype': torch.float32,
                        'req_grad': True,
                        'is_batched': True}},
                'outputs': {
                    'RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/tuple::__getitem___201': {
                        'shape': torch.Size([32, 1, 1, 128]),
                        'dtype': torch.float32,
                        'is_batched': True},
                    'RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[10]/BertOutput[output]/Tensor::__add___212': {
                        'shape': torch.Size([32, 128, 1024]),
                        'dtype': torch.float32,
                        'is_batched': True}}},
            4: {
                'inputs': {
                    'RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/tuple::__getitem___201': {
                        'shape': torch.Size([32, 1, 1, 128]),
                        'dtype': torch.float32,
                        'req_grad': False,
                        'is_batched': True},
                    'RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[10]/BertOutput[output]/Tensor::__add___212': {
                        'shape': torch.Size([32, 128, 1024]),
                        'dtype': torch.float32,
                        'req_grad': True,
                        'is_batched': True}},
                'outputs': {
                    'RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/tuple::__getitem___252': {
                        'shape': torch.Size([32, 1, 1, 128]),
                        'dtype': torch.float32,
                        'is_batched': True},
                    'RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[13]/BertOutput[output]/LayerNorm[LayerNorm]': {
                        'shape': torch.Size([32, 128, 1024]),
                        'dtype': torch.float32,
                        'is_batched': True}}},
            5: {
                'inputs': {
                    'RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/tuple::__getitem___252': {
                        'shape': torch.Size([32, 1, 1, 128]),
                        'dtype': torch.float32,
                        'req_grad': False,
                        'is_batched': True},
                    'RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[13]/BertOutput[output]/LayerNorm[LayerNorm]': {
                        'shape': torch.Size([32, 128, 1024]),
                        'dtype': torch.float32,
                        'req_grad': True,
                        'is_batched': True}},
                'outputs': {
                    'RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/tuple::__getitem___303': {
                        'shape': torch.Size([32, 1, 1, 128]),
                        'dtype': torch.float32,
                        'is_batched': True},
                    'RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[16]/BertOutput[output]/LayerNorm[LayerNorm]': {
                        'shape': torch.Size([32, 128, 1024]),
                        'dtype': torch.float32,
                        'is_batched': True}}},
            6: {
                'inputs': {
                    'RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/tuple::__getitem___303': {
                        'shape': torch.Size([32, 1, 1, 128]),
                        'dtype': torch.float32,
                        'req_grad': False,
                        'is_batched': True},
                    'RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[16]/BertOutput[output]/LayerNorm[LayerNorm]': {
                        'shape': torch.Size([32, 128, 1024]),
                        'dtype': torch.float32,
                        'req_grad': True,
                        'is_batched': True}},
                'outputs': {
                    'RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/tuple::__getitem___369': {
                        'shape': torch.Size([32, 128, 1024]),
                        'dtype': torch.float32,
                        'is_batched': True},
                    'RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/tuple::__getitem___371': {
                        'shape': torch.Size([32, 1, 1, 128]),
                        'dtype': torch.float32,
                        'is_batched': True}}},
            7: {
                'inputs': {
                    'RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/tuple::__getitem___369': {
                        'shape': torch.Size([32, 128, 1024]),
                        'dtype': torch.float32,
                        'req_grad': True,
                        'is_batched': True},
                    'RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/tuple::__getitem___371': {
                        'shape': torch.Size([32, 1, 1, 128]),
                        'dtype': torch.float32,
                        'req_grad': False,
                        'is_batched': True}},
                'outputs': {
                    'RobertaForSequenceClassification/RobertaClassificationHead[classifier]/Linear[out_proj]': {
                        'shape': torch.Size([32, 3]),
                        'dtype': torch.float32,
                        'is_batched': True}}}}}
    
    config['stages'][0]['stage_cls'] = module_path+'.Partition0'
    config['stages'][1]['stage_cls'] = module_path+'.Partition1'
    config['stages'][2]['stage_cls'] = module_path+'.Partition2'
    config['stages'][3]['stage_cls'] = module_path+'.Partition3'
    config['stages'][4]['stage_cls'] = module_path+'.Partition4'
    config['stages'][5]['stage_cls'] = module_path+'.Partition5'
    config['stages'][6]['stage_cls'] = module_path+'.Partition6'
    config['stages'][7]['stage_cls'] = module_path+'.Partition7'
    
    config['stages'][0]['devices'] = ['cpu' if DEBUG else 'cuda:0']
    config['stages'][1]['devices'] = ['cpu' if DEBUG else 'cuda:1']
    config['stages'][2]['devices'] = ['cpu' if DEBUG else 'cuda:2']
    config['stages'][3]['devices'] = ['cpu' if DEBUG else 'cuda:3']
    config['stages'][4]['devices'] = ['cpu' if DEBUG else 'cuda:4']
    config['stages'][5]['devices'] = ['cpu' if DEBUG else 'cuda:5']
    config['stages'][6]['devices'] = ['cpu' if DEBUG else 'cuda:6']
    config['stages'][7]['devices'] = ['cpu' if DEBUG else 'cuda:7']
    
    return config


class ModelParallel(nn.Module):
    def __init__(self,layers,tensors,CPU=False,num_chunks=8):
        super(ModelParallel,self).__init__()
        self.batch_dim = 0
        self.num_chunks = num_chunks
        assert self.num_chunks >= 8
        self.cpu = CPU
        if not CPU:
            # partitions X chunks streams
            self.streams = [[torch.cuda.Stream(f'cuda:{idx}') for _ in range(self.num_chunks)] for idx in range(8)]
        self.stage0 = Partition0(layers,tensors).to('cpu' if CPU else 'cuda:0')
        self.stage1 = Partition1(layers,tensors).to('cpu' if CPU else 'cuda:1')
        self.stage2 = Partition2(layers,tensors).to('cpu' if CPU else 'cuda:2')
        self.stage3 = Partition3(layers,tensors).to('cpu' if CPU else 'cuda:3')
        self.stage4 = Partition4(layers,tensors).to('cpu' if CPU else 'cuda:4')
        self.stage5 = Partition5(layers,tensors).to('cpu' if CPU else 'cuda:5')
        self.stage6 = Partition6(layers,tensors).to('cpu' if CPU else 'cuda:6')
        self.stage7 = Partition7(layers,tensors).to('cpu' if CPU else 'cuda:7')

    def stream(self,device_idx,mb_idx):
        # return the stream for the current device and micro batch
        return torch.cuda.stream(self.streams[device_idx][mb_idx])

    def wait_stream(self,device_idx,mb_idx):
        stream = self.streams[device_idx][mb_idx]
        # wait until the mb was cleared by previous partition
        stream.wait_stream(self.streams[device_idx-1][mb_idx])
        # wait until previous mb was cleared by this partition
        stream.wait_stream(self.streams[device_idx][mb_idx-1])

    def forward(self,input0, input1):
        t_0 = self.stage0(input0, input1)[0]
        t_1, t_2 = self.stage1(t_0)
        t_3, t_4 = self.stage2(t_1, t_2)
        t_5, t_6 = self.stage3(t_3, t_4)
        t_7, t_8 = self.stage4(t_5, t_6)
        t_9, t_10 = self.stage5(t_7, t_8)
        t_11, t_12 = self.stage6(t_9, t_10)
        t_13 = self.stage7(t_11, t_12)[0]
        return t_13

    def pipelined_forward(self,input0, input1):
        # chunk inputs
        assert input0.size(self.batch_dim) >= self.num_chunks
        input0_chunks = iter(input0.split(input0.size(self.batch_dim) // self.num_chunks, dim=self.batch_dim))
        assert input1.size(self.batch_dim) >= self.num_chunks
        input1_chunks = iter(input1.split(input1.size(self.batch_dim) // self.num_chunks, dim=self.batch_dim))
        
        # create output chunk placeholders
        t_13_chunks = []
        
        # fill the pipeline
        input0 = next(input0_chunks)
        input1 = next(input1_chunks)
        t_0 = self.stage0(input0, input1)[0]
        
        input0 = next(input0_chunks)
        input1 = next(input1_chunks)
        t_1, t_2 = self.stage1(t_0)
        t_0 = self.stage0(input0, input1)[0]
        
        input0 = next(input0_chunks)
        input1 = next(input1_chunks)
        t_3, t_4 = self.stage2(t_1, t_2)
        t_1, t_2 = self.stage1(t_0)
        t_0 = self.stage0(input0, input1)[0]
        
        input0 = next(input0_chunks)
        input1 = next(input1_chunks)
        t_5, t_6 = self.stage3(t_3, t_4)
        t_3, t_4 = self.stage2(t_1, t_2)
        t_1, t_2 = self.stage1(t_0)
        t_0 = self.stage0(input0, input1)[0]
        
        input0 = next(input0_chunks)
        input1 = next(input1_chunks)
        t_7, t_8 = self.stage4(t_5, t_6)
        t_5, t_6 = self.stage3(t_3, t_4)
        t_3, t_4 = self.stage2(t_1, t_2)
        t_1, t_2 = self.stage1(t_0)
        t_0 = self.stage0(input0, input1)[0]
        
        input0 = next(input0_chunks)
        input1 = next(input1_chunks)
        t_9, t_10 = self.stage5(t_7, t_8)
        t_7, t_8 = self.stage4(t_5, t_6)
        t_5, t_6 = self.stage3(t_3, t_4)
        t_3, t_4 = self.stage2(t_1, t_2)
        t_1, t_2 = self.stage1(t_0)
        t_0 = self.stage0(input0, input1)[0]
        
        input0 = next(input0_chunks)
        input1 = next(input1_chunks)
        t_11, t_12 = self.stage6(t_9, t_10)
        t_9, t_10 = self.stage5(t_7, t_8)
        t_7, t_8 = self.stage4(t_5, t_6)
        t_5, t_6 = self.stage3(t_3, t_4)
        t_3, t_4 = self.stage2(t_1, t_2)
        t_1, t_2 = self.stage1(t_0)
        t_0 = self.stage0(input0, input1)[0]
        
        input0 = next(input0_chunks)
        input1 = next(input1_chunks)
        t_13 = self.stage7(t_11, t_12)[0]
        t_11, t_12 = self.stage6(t_9, t_10)
        t_9, t_10 = self.stage5(t_7, t_8)
        t_7, t_8 = self.stage4(t_5, t_6)
        t_5, t_6 = self.stage3(t_3, t_4)
        t_3, t_4 = self.stage2(t_1, t_2)
        t_1, t_2 = self.stage1(t_0)
        t_0 = self.stage0(input0, input1)[0]
        t_13_chunks.append(t_13)
        
        # steady phase
        for idx in range(self.num_chunks - 8):
            input0 = next(input0_chunks)
            input1 = next(input1_chunks)
            t_13 = self.stage7(t_11, t_12)[0]
            t_11, t_12 = self.stage6(t_9, t_10)
            t_9, t_10 = self.stage5(t_7, t_8)
            t_7, t_8 = self.stage4(t_5, t_6)
            t_5, t_6 = self.stage3(t_3, t_4)
            t_3, t_4 = self.stage2(t_1, t_2)
            t_1, t_2 = self.stage1(t_0)
            t_0 = self.stage0(input0, input1)[0]
            t_13_chunks.append(t_13)
        
        # empty the pipeline
        t_13 = self.stage7(t_11, t_12)[0]
        t_11, t_12 = self.stage6(t_9, t_10)
        t_9, t_10 = self.stage5(t_7, t_8)
        t_7, t_8 = self.stage4(t_5, t_6)
        t_5, t_6 = self.stage3(t_3, t_4)
        t_3, t_4 = self.stage2(t_1, t_2)
        t_1, t_2 = self.stage1(t_0)
        t_13_chunks.append(t_13)
        
        t_13 = self.stage7(t_11, t_12)[0]
        t_11, t_12 = self.stage6(t_9, t_10)
        t_9, t_10 = self.stage5(t_7, t_8)
        t_7, t_8 = self.stage4(t_5, t_6)
        t_5, t_6 = self.stage3(t_3, t_4)
        t_3, t_4 = self.stage2(t_1, t_2)
        t_13_chunks.append(t_13)
        
        t_13 = self.stage7(t_11, t_12)[0]
        t_11, t_12 = self.stage6(t_9, t_10)
        t_9, t_10 = self.stage5(t_7, t_8)
        t_7, t_8 = self.stage4(t_5, t_6)
        t_5, t_6 = self.stage3(t_3, t_4)
        t_13_chunks.append(t_13)
        
        t_13 = self.stage7(t_11, t_12)[0]
        t_11, t_12 = self.stage6(t_9, t_10)
        t_9, t_10 = self.stage5(t_7, t_8)
        t_7, t_8 = self.stage4(t_5, t_6)
        t_13_chunks.append(t_13)
        
        t_13 = self.stage7(t_11, t_12)[0]
        t_11, t_12 = self.stage6(t_9, t_10)
        t_9, t_10 = self.stage5(t_7, t_8)
        t_13_chunks.append(t_13)
        
        t_13 = self.stage7(t_11, t_12)[0]
        t_11, t_12 = self.stage6(t_9, t_10)
        t_13_chunks.append(t_13)
        
        t_13 = self.stage7(t_11, t_12)[0]
        t_13_chunks.append(t_13)
        
        # merge output chunks
        t_13 = torch.cat(t_13_chunks,dim=self.batch_dim)
        
        return t_13

    def pipelined_forward_with_streams(self,input0, input1):
        assert not self.cpu
        # chunk inputs
        assert input0.size(self.batch_dim) >= self.num_chunks
        input0_chunks = iter(input0.split(input0.size(self.batch_dim) // self.num_chunks, dim=self.batch_dim))
        assert input1.size(self.batch_dim) >= self.num_chunks
        input1_chunks = iter(input1.split(input1.size(self.batch_dim) // self.num_chunks, dim=self.batch_dim))
        
        # create output chunk placeholders
        t_13_chunks = []
        
        # fill the pipeline
        input0 = next(input0_chunks)
        input1 = next(input1_chunks)
        with self.stream(0,0):
            self.wait_stream(0,0)
            t_0 = self.stage0(input0, input1)[0]
        
        input0 = next(input0_chunks)
        input1 = next(input1_chunks)
        with self.stream(1,0):
            self.wait_stream(1,0)
            t_1, t_2 = self.stage1(t_0)
        with self.stream(0,1):
            self.wait_stream(0,1)
            t_0 = self.stage0(input0, input1)[0]
        
        input0 = next(input0_chunks)
        input1 = next(input1_chunks)
        with self.stream(2,0):
            self.wait_stream(2,0)
            t_3, t_4 = self.stage2(t_1, t_2)
        with self.stream(1,1):
            self.wait_stream(1,1)
            t_1, t_2 = self.stage1(t_0)
        with self.stream(0,2):
            self.wait_stream(0,2)
            t_0 = self.stage0(input0, input1)[0]
        
        input0 = next(input0_chunks)
        input1 = next(input1_chunks)
        with self.stream(3,0):
            self.wait_stream(3,0)
            t_5, t_6 = self.stage3(t_3, t_4)
        with self.stream(2,1):
            self.wait_stream(2,1)
            t_3, t_4 = self.stage2(t_1, t_2)
        with self.stream(1,2):
            self.wait_stream(1,2)
            t_1, t_2 = self.stage1(t_0)
        with self.stream(0,3):
            self.wait_stream(0,3)
            t_0 = self.stage0(input0, input1)[0]
        
        input0 = next(input0_chunks)
        input1 = next(input1_chunks)
        with self.stream(4,0):
            self.wait_stream(4,0)
            t_7, t_8 = self.stage4(t_5, t_6)
        with self.stream(3,1):
            self.wait_stream(3,1)
            t_5, t_6 = self.stage3(t_3, t_4)
        with self.stream(2,2):
            self.wait_stream(2,2)
            t_3, t_4 = self.stage2(t_1, t_2)
        with self.stream(1,3):
            self.wait_stream(1,3)
            t_1, t_2 = self.stage1(t_0)
        with self.stream(0,4):
            self.wait_stream(0,4)
            t_0 = self.stage0(input0, input1)[0]
        
        input0 = next(input0_chunks)
        input1 = next(input1_chunks)
        with self.stream(5,0):
            self.wait_stream(5,0)
            t_9, t_10 = self.stage5(t_7, t_8)
        with self.stream(4,1):
            self.wait_stream(4,1)
            t_7, t_8 = self.stage4(t_5, t_6)
        with self.stream(3,2):
            self.wait_stream(3,2)
            t_5, t_6 = self.stage3(t_3, t_4)
        with self.stream(2,3):
            self.wait_stream(2,3)
            t_3, t_4 = self.stage2(t_1, t_2)
        with self.stream(1,4):
            self.wait_stream(1,4)
            t_1, t_2 = self.stage1(t_0)
        with self.stream(0,5):
            self.wait_stream(0,5)
            t_0 = self.stage0(input0, input1)[0]
        
        input0 = next(input0_chunks)
        input1 = next(input1_chunks)
        with self.stream(6,0):
            self.wait_stream(6,0)
            t_11, t_12 = self.stage6(t_9, t_10)
        with self.stream(5,1):
            self.wait_stream(5,1)
            t_9, t_10 = self.stage5(t_7, t_8)
        with self.stream(4,2):
            self.wait_stream(4,2)
            t_7, t_8 = self.stage4(t_5, t_6)
        with self.stream(3,3):
            self.wait_stream(3,3)
            t_5, t_6 = self.stage3(t_3, t_4)
        with self.stream(2,4):
            self.wait_stream(2,4)
            t_3, t_4 = self.stage2(t_1, t_2)
        with self.stream(1,5):
            self.wait_stream(1,5)
            t_1, t_2 = self.stage1(t_0)
        with self.stream(0,6):
            self.wait_stream(0,6)
            t_0 = self.stage0(input0, input1)[0]
        
        input0 = next(input0_chunks)
        input1 = next(input1_chunks)
        with self.stream(7,0):
            self.wait_stream(7,0)
            t_13 = self.stage7(t_11, t_12)[0]
        with self.stream(6,1):
            self.wait_stream(6,1)
            t_11, t_12 = self.stage6(t_9, t_10)
        with self.stream(5,2):
            self.wait_stream(5,2)
            t_9, t_10 = self.stage5(t_7, t_8)
        with self.stream(4,3):
            self.wait_stream(4,3)
            t_7, t_8 = self.stage4(t_5, t_6)
        with self.stream(3,4):
            self.wait_stream(3,4)
            t_5, t_6 = self.stage3(t_3, t_4)
        with self.stream(2,5):
            self.wait_stream(2,5)
            t_3, t_4 = self.stage2(t_1, t_2)
        with self.stream(1,6):
            self.wait_stream(1,6)
            t_1, t_2 = self.stage1(t_0)
        with self.stream(0,7):
            self.wait_stream(0,7)
            t_0 = self.stage0(input0, input1)[0]
        t_13_chunks.append(t_13)
        
        # steady phase
        for idx in range(self.num_chunks - 8):
            input0 = next(input0_chunks)
            input1 = next(input1_chunks)
            with self.stream(7,idx+1):
                self.wait_stream(7,idx+1)
                t_13 = self.stage7(t_11, t_12)[0]
            with self.stream(6,idx+2):
                self.wait_stream(6,idx+2)
                t_11, t_12 = self.stage6(t_9, t_10)
            with self.stream(5,idx+3):
                self.wait_stream(5,idx+3)
                t_9, t_10 = self.stage5(t_7, t_8)
            with self.stream(4,idx+4):
                self.wait_stream(4,idx+4)
                t_7, t_8 = self.stage4(t_5, t_6)
            with self.stream(3,idx+5):
                self.wait_stream(3,idx+5)
                t_5, t_6 = self.stage3(t_3, t_4)
            with self.stream(2,idx+6):
                self.wait_stream(2,idx+6)
                t_3, t_4 = self.stage2(t_1, t_2)
            with self.stream(1,idx+7):
                self.wait_stream(1,idx+7)
                t_1, t_2 = self.stage1(t_0)
            with self.stream(0,idx+8):
                self.wait_stream(0,idx+8)
                t_0 = self.stage0(input0, input1)[0]
            t_13_chunks.append(t_13)
        
        # empty the pipeline
        with self.stream(7,-7):
            self.wait_stream(7,-7)
            t_13 = self.stage7(t_11, t_12)[0]
        with self.stream(6,-6):
            self.wait_stream(6,-6)
            t_11, t_12 = self.stage6(t_9, t_10)
        with self.stream(5,-5):
            self.wait_stream(5,-5)
            t_9, t_10 = self.stage5(t_7, t_8)
        with self.stream(4,-4):
            self.wait_stream(4,-4)
            t_7, t_8 = self.stage4(t_5, t_6)
        with self.stream(3,-3):
            self.wait_stream(3,-3)
            t_5, t_6 = self.stage3(t_3, t_4)
        with self.stream(2,-2):
            self.wait_stream(2,-2)
            t_3, t_4 = self.stage2(t_1, t_2)
        with self.stream(1,-1):
            self.wait_stream(1,-1)
            t_1, t_2 = self.stage1(t_0)
        t_13_chunks.append(t_13)
        
        with self.stream(7,-6):
            self.wait_stream(7,-6)
            t_13 = self.stage7(t_11, t_12)[0]
        with self.stream(6,-5):
            self.wait_stream(6,-5)
            t_11, t_12 = self.stage6(t_9, t_10)
        with self.stream(5,-4):
            self.wait_stream(5,-4)
            t_9, t_10 = self.stage5(t_7, t_8)
        with self.stream(4,-3):
            self.wait_stream(4,-3)
            t_7, t_8 = self.stage4(t_5, t_6)
        with self.stream(3,-2):
            self.wait_stream(3,-2)
            t_5, t_6 = self.stage3(t_3, t_4)
        with self.stream(2,-1):
            self.wait_stream(2,-1)
            t_3, t_4 = self.stage2(t_1, t_2)
        t_13_chunks.append(t_13)
        
        with self.stream(7,-5):
            self.wait_stream(7,-5)
            t_13 = self.stage7(t_11, t_12)[0]
        with self.stream(6,-4):
            self.wait_stream(6,-4)
            t_11, t_12 = self.stage6(t_9, t_10)
        with self.stream(5,-3):
            self.wait_stream(5,-3)
            t_9, t_10 = self.stage5(t_7, t_8)
        with self.stream(4,-2):
            self.wait_stream(4,-2)
            t_7, t_8 = self.stage4(t_5, t_6)
        with self.stream(3,-1):
            self.wait_stream(3,-1)
            t_5, t_6 = self.stage3(t_3, t_4)
        t_13_chunks.append(t_13)
        
        with self.stream(7,-4):
            self.wait_stream(7,-4)
            t_13 = self.stage7(t_11, t_12)[0]
        with self.stream(6,-3):
            self.wait_stream(6,-3)
            t_11, t_12 = self.stage6(t_9, t_10)
        with self.stream(5,-2):
            self.wait_stream(5,-2)
            t_9, t_10 = self.stage5(t_7, t_8)
        with self.stream(4,-1):
            self.wait_stream(4,-1)
            t_7, t_8 = self.stage4(t_5, t_6)
        t_13_chunks.append(t_13)
        
        with self.stream(7,-3):
            self.wait_stream(7,-3)
            t_13 = self.stage7(t_11, t_12)[0]
        with self.stream(6,-2):
            self.wait_stream(6,-2)
            t_11, t_12 = self.stage6(t_9, t_10)
        with self.stream(5,-1):
            self.wait_stream(5,-1)
            t_9, t_10 = self.stage5(t_7, t_8)
        t_13_chunks.append(t_13)
        
        with self.stream(7,-2):
            self.wait_stream(7,-2)
            t_13 = self.stage7(t_11, t_12)[0]
        with self.stream(6,-1):
            self.wait_stream(6,-1)
            t_11, t_12 = self.stage6(t_9, t_10)
        t_13_chunks.append(t_13)
        
        with self.stream(7,-1):
            self.wait_stream(7,-1)
            t_13 = self.stage7(t_11, t_12)[0]
        t_13_chunks.append(t_13)
        
        # merge output chunks
        t_13 = torch.cat(t_13_chunks,dim=self.batch_dim)
        
        return t_13

    def state_dict(self):
        return {**self.stage0.state_dict(),
                **self.stage1.state_dict(),
                **self.stage2.state_dict(),
                **self.stage3.state_dict(),
                **self.stage4.state_dict(),
                **self.stage5.state_dict(),
                **self.stage6.state_dict(),
                **self.stage7.state_dict()}

    def load_state_dict(self,state):
        self.stage0.load_state(state)
        self.stage1.load_state(state)
        self.stage2.load_state(state)
        self.stage3.load_state(state)
        self.stage4.load_state(state)
        self.stage5.load_state(state)
        self.stage6.load_state(state)
        self.stage7.load_state(state)

    def named_buffers(self):
        return chain(self.stage0.named_buffers(),
                     self.stage1.named_buffers(),
                     self.stage2.named_buffers(),
                     self.stage3.named_buffers(),
                     self.stage4.named_buffers(),
                     self.stage5.named_buffers(),
                     self.stage6.named_buffers(),
                     self.stage7.named_buffers())

    def named_parameters(self):
        return chain(self.stage0.named_parameters(),
                     self.stage1.named_parameters(),
                     self.stage2.named_parameters(),
                     self.stage3.named_parameters(),
                     self.stage4.named_parameters(),
                     self.stage5.named_parameters(),
                     self.stage6.named_parameters(),
                     self.stage7.named_parameters())

    def buffers(self):
        return [b for _,b in self.named_buffers()]

    def parameters(self):
        return [p for _,p in self.named_parameters()]


class Partition0(nn.Module):
    BASIC_BLOCKS=(
            Embedding,
            Linear,
            BertSelfAttention,
            LayerNorm,
            Dropout,
        )
    LAYER_SCOPES=[
            'RobertaForSequenceClassification/RobertaModel[roberta]/RobertaEmbeddings[embeddings]/Embedding[word_embeddings]',
            'RobertaForSequenceClassification/RobertaModel[roberta]/RobertaEmbeddings[embeddings]/Embedding[position_embeddings]',
            'RobertaForSequenceClassification/RobertaModel[roberta]/RobertaEmbeddings[embeddings]/Embedding[token_type_embeddings]',
            'RobertaForSequenceClassification/RobertaModel[roberta]/RobertaEmbeddings[embeddings]/LayerNorm[LayerNorm]',
            'RobertaForSequenceClassification/RobertaModel[roberta]/RobertaEmbeddings[embeddings]/Dropout[dropout]',
            'RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[0]/BertAttention[attention]/BertSelfAttention[self]',
            'RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[0]/BertAttention[attention]/BertSelfOutput[output]/Linear[dense]',
            'RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[0]/BertAttention[attention]/BertSelfOutput[output]/Dropout[dropout]',
            'RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[0]/BertAttention[attention]/BertSelfOutput[output]/LayerNorm[LayerNorm]',
            'RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[0]/BertIntermediate[intermediate]/Linear[dense]',
            'RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[0]/BertOutput[output]/Linear[dense]',
            'RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[0]/BertOutput[output]/Dropout[dropout]',
            'RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[0]/BertOutput[output]/LayerNorm[LayerNorm]',
            'RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[1]/BertAttention[attention]/BertSelfAttention[self]',
            'RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[1]/BertAttention[attention]/BertSelfOutput[output]/Linear[dense]',
            'RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[1]/BertAttention[attention]/BertSelfOutput[output]/Dropout[dropout]',
            'RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[1]/BertAttention[attention]/BertSelfOutput[output]/LayerNorm[LayerNorm]',
            'RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[1]/BertIntermediate[intermediate]/Linear[dense]',
            'RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[1]/BertOutput[output]/Linear[dense]',
            'RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[1]/BertOutput[output]/Dropout[dropout]',
            'RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[1]/BertOutput[output]/LayerNorm[LayerNorm]',
        ]
    TENSORS=[
        ]
    def __init__(self, layers, tensors):
        super(Partition0, self).__init__()

        #initialize partition layers
        for idx,layer_scope in enumerate(self.LAYER_SCOPES):
            self.add_module(f'l_{idx}',layers[layer_scope])

        #initialize partition tensors
        b=p=0
        for tensor_scope in self.TENSORS:
            tensor=tensors[tensor_scope]
            if isinstance(tensor,nn.Parameter):
                self.register_parameter(f'p_{p}',tensor)
                p+=1
            else:
                self.register_buffer(f'b_{b}',tensor)
                b+=1

        self.device = torch.device('cuda:0')
        self.lookup = { 'l_0': 'roberta.embeddings.word_embeddings',
                        'l_1': 'roberta.embeddings.position_embeddings',
                        'l_2': 'roberta.embeddings.token_type_embeddings',
                        'l_3': 'roberta.embeddings.LayerNorm',
                        'l_4': 'roberta.embeddings.dropout',
                        'l_5': 'roberta.encoder.0.attention.self',
                        'l_6': 'roberta.encoder.0.attention.output.dense',
                        'l_7': 'roberta.encoder.0.attention.output.dropout',
                        'l_8': 'roberta.encoder.0.attention.output.LayerNorm',
                        'l_9': 'roberta.encoder.0.intermediate.dense',
                        'l_10': 'roberta.encoder.0.output.dense',
                        'l_11': 'roberta.encoder.0.output.dropout',
                        'l_12': 'roberta.encoder.0.output.LayerNorm',
                        'l_13': 'roberta.encoder.1.attention.self',
                        'l_14': 'roberta.encoder.1.attention.output.dense',
                        'l_15': 'roberta.encoder.1.attention.output.dropout',
                        'l_16': 'roberta.encoder.1.attention.output.LayerNorm',
                        'l_17': 'roberta.encoder.1.intermediate.dense',
                        'l_18': 'roberta.encoder.1.output.dense',
                        'l_19': 'roberta.encoder.1.output.dropout',
                        'l_20': 'roberta.encoder.1.output.LayerNorm'}

    def forward(self, x0, x1):
        # RobertaForSequenceClassification/RobertaModel[roberta]/RobertaEmbeddings[embeddings]/Embedding[word_embeddings] <=> self.l_0
        # RobertaForSequenceClassification/RobertaModel[roberta]/RobertaEmbeddings[embeddings]/Embedding[position_embeddings] <=> self.l_1
        # RobertaForSequenceClassification/RobertaModel[roberta]/RobertaEmbeddings[embeddings]/Embedding[token_type_embeddings] <=> self.l_2
        # RobertaForSequenceClassification/RobertaModel[roberta]/RobertaEmbeddings[embeddings]/LayerNorm[LayerNorm] <=> self.l_3
        # RobertaForSequenceClassification/RobertaModel[roberta]/RobertaEmbeddings[embeddings]/Dropout[dropout] <=> self.l_4
        # RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[0]/BertAttention[attention]/BertSelfAttention[self] <=> self.l_5
        # RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[0]/BertAttention[attention]/BertSelfOutput[output]/Linear[dense] <=> self.l_6
        # RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[0]/BertAttention[attention]/BertSelfOutput[output]/Dropout[dropout] <=> self.l_7
        # RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[0]/BertAttention[attention]/BertSelfOutput[output]/LayerNorm[LayerNorm] <=> self.l_8
        # RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[0]/BertIntermediate[intermediate]/Linear[dense] <=> self.l_9
        # RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[0]/BertOutput[output]/Linear[dense] <=> self.l_10
        # RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[0]/BertOutput[output]/Dropout[dropout] <=> self.l_11
        # RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[0]/BertOutput[output]/LayerNorm[LayerNorm] <=> self.l_12
        # RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[1]/BertAttention[attention]/BertSelfAttention[self] <=> self.l_13
        # RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[1]/BertAttention[attention]/BertSelfOutput[output]/Linear[dense] <=> self.l_14
        # RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[1]/BertAttention[attention]/BertSelfOutput[output]/Dropout[dropout] <=> self.l_15
        # RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[1]/BertAttention[attention]/BertSelfOutput[output]/LayerNorm[LayerNorm] <=> self.l_16
        # RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[1]/BertIntermediate[intermediate]/Linear[dense] <=> self.l_17
        # RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[1]/BertOutput[output]/Linear[dense] <=> self.l_18
        # RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[1]/BertOutput[output]/Dropout[dropout] <=> self.l_19
        # RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[1]/BertOutput[output]/LayerNorm[LayerNorm] <=> self.l_20
        # input0 <=> x0
        # input1 <=> x1

        # moving inputs to current device no op if already on the correct device
        x0, x1 = move_tensors((x0, x1), self.device)
        t_0 = torch.zeros_like(x0)
        t_1 = x1.unsqueeze(1)
        t_1 = t_1.unsqueeze(2)
        t_1 = t_1.to(dtype=torch.float32)
        t_1 = 1.0 - t_1
        t_1 = t_1 * -10000.0
        t_2 = x0.ne(1)
        t_2 = t_2.int()
        t_3 = torch.cumsum(t_2, dim=1)
        t_3 = t_3.type_as(t_2)
        t_2 = t_3 * t_2
        t_2 = t_2.long()
        t_2 = t_2 + 1
        t_2 = t_2.to(self.device)
        t_3 = self.l_0(x0)
        t_2 = self.l_1(t_2)
        t_0 = self.l_2(t_0)
        t_2 = t_3 + t_2
        t_0 = t_2 + t_0
        t_0 = self.l_3(t_0)
        t_0 = self.l_4(t_0)
        t_2 = self.l_5(t_0, attention_mask=t_1, head_mask=None)
        t_2 = self.l_6(t_2)
        t_2 = self.l_7(t_2)
        t_0 = t_2 + t_0
        t_0 = self.l_8(t_0)
        t_2 = self.l_9(t_0)
        t_2 = torch.nn.functional.gelu(t_2)
        t_2 = self.l_10(t_2)
        t_2 = self.l_11(t_2)
        t_0 = t_2 + t_0
        t_0 = self.l_12(t_0)
        t_1 = (t_0, t_1)
        t_0 = t_1[0]
        t_1 = t_1[1]
        t_2 = self.l_13(t_0, attention_mask=t_1, head_mask=None)
        t_2 = self.l_14(t_2)
        t_2 = self.l_15(t_2)
        t_0 = t_2 + t_0
        t_0 = self.l_16(t_0)
        t_2 = self.l_17(t_0)
        t_2 = torch.nn.functional.gelu(t_2)
        t_2 = self.l_18(t_2)
        t_2 = self.l_19(t_2)
        t_0 = t_2 + t_0
        t_0 = self.l_20(t_0)
        t_1 = (t_0, t_1)
        # returning:
        # RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[1]/prim::TupleConstruct_61
        return t_1

    def state_dict(self,device=None):
        # we return the state dict of this part as it should be in the original model
        return state_dict(self,device=device)

    def load_state_dict(self, state):
        return load_state_dict(self,state)

    def named_parameters(self,recurse=True):
        # we return the named parameters of this part as it should be in the original model
        return named_parameters(self,recurse=recurse)

    def named_buffers(self,recurse=True):
        # we return the named buffers of this part as it should be in the original model
        return named_buffers(self,recurse=recurse)

    def cpu(self):
        return cpu(self)

    def cuda(self,device=None):
        return cuda(self,device=device)

    def to(self, *args, **kwargs):
        return to(self,*args,**kwargs)


class Partition1(nn.Module):
    BASIC_BLOCKS=(
            Linear,
            BertSelfAttention,
            LayerNorm,
            Dropout,
        )
    LAYER_SCOPES=[
            'RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[2]/BertAttention[attention]/BertSelfAttention[self]',
            'RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[2]/BertAttention[attention]/BertSelfOutput[output]/Linear[dense]',
            'RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[2]/BertAttention[attention]/BertSelfOutput[output]/Dropout[dropout]',
            'RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[2]/BertAttention[attention]/BertSelfOutput[output]/LayerNorm[LayerNorm]',
            'RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[2]/BertIntermediate[intermediate]/Linear[dense]',
            'RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[2]/BertOutput[output]/Linear[dense]',
            'RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[2]/BertOutput[output]/Dropout[dropout]',
            'RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[2]/BertOutput[output]/LayerNorm[LayerNorm]',
            'RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[3]/BertAttention[attention]/BertSelfAttention[self]',
            'RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[3]/BertAttention[attention]/BertSelfOutput[output]/Linear[dense]',
            'RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[3]/BertAttention[attention]/BertSelfOutput[output]/Dropout[dropout]',
            'RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[3]/BertAttention[attention]/BertSelfOutput[output]/LayerNorm[LayerNorm]',
            'RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[3]/BertIntermediate[intermediate]/Linear[dense]',
            'RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[3]/BertOutput[output]/Linear[dense]',
            'RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[3]/BertOutput[output]/Dropout[dropout]',
            'RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[3]/BertOutput[output]/LayerNorm[LayerNorm]',
            'RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[4]/BertAttention[attention]/BertSelfAttention[self]',
            'RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[4]/BertAttention[attention]/BertSelfOutput[output]/Linear[dense]',
            'RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[4]/BertAttention[attention]/BertSelfOutput[output]/Dropout[dropout]',
            'RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[4]/BertAttention[attention]/BertSelfOutput[output]/LayerNorm[LayerNorm]',
            'RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[4]/BertIntermediate[intermediate]/Linear[dense]',
            'RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[4]/BertOutput[output]/Linear[dense]',
            'RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[4]/BertOutput[output]/Dropout[dropout]',
            'RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[4]/BertOutput[output]/LayerNorm[LayerNorm]',
        ]
    TENSORS=[
        ]
    def __init__(self, layers, tensors):
        super(Partition1, self).__init__()

        #initialize partition layers
        for idx,layer_scope in enumerate(self.LAYER_SCOPES):
            self.add_module(f'l_{idx}',layers[layer_scope])

        #initialize partition tensors
        b=p=0
        for tensor_scope in self.TENSORS:
            tensor=tensors[tensor_scope]
            if isinstance(tensor,nn.Parameter):
                self.register_parameter(f'p_{p}',tensor)
                p+=1
            else:
                self.register_buffer(f'b_{b}',tensor)
                b+=1

        self.device = torch.device('cuda:1')
        self.lookup = { 'l_0': 'roberta.encoder.2.attention.self',
                        'l_1': 'roberta.encoder.2.attention.output.dense',
                        'l_2': 'roberta.encoder.2.attention.output.dropout',
                        'l_3': 'roberta.encoder.2.attention.output.LayerNorm',
                        'l_4': 'roberta.encoder.2.intermediate.dense',
                        'l_5': 'roberta.encoder.2.output.dense',
                        'l_6': 'roberta.encoder.2.output.dropout',
                        'l_7': 'roberta.encoder.2.output.LayerNorm',
                        'l_8': 'roberta.encoder.3.attention.self',
                        'l_9': 'roberta.encoder.3.attention.output.dense',
                        'l_10': 'roberta.encoder.3.attention.output.dropout',
                        'l_11': 'roberta.encoder.3.attention.output.LayerNorm',
                        'l_12': 'roberta.encoder.3.intermediate.dense',
                        'l_13': 'roberta.encoder.3.output.dense',
                        'l_14': 'roberta.encoder.3.output.dropout',
                        'l_15': 'roberta.encoder.3.output.LayerNorm',
                        'l_16': 'roberta.encoder.4.attention.self',
                        'l_17': 'roberta.encoder.4.attention.output.dense',
                        'l_18': 'roberta.encoder.4.attention.output.dropout',
                        'l_19': 'roberta.encoder.4.attention.output.LayerNorm',
                        'l_20': 'roberta.encoder.4.intermediate.dense',
                        'l_21': 'roberta.encoder.4.output.dense',
                        'l_22': 'roberta.encoder.4.output.dropout',
                        'l_23': 'roberta.encoder.4.output.LayerNorm'}

    def forward(self, x0):
        # RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[2]/BertAttention[attention]/BertSelfAttention[self] <=> self.l_0
        # RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[2]/BertAttention[attention]/BertSelfOutput[output]/Linear[dense] <=> self.l_1
        # RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[2]/BertAttention[attention]/BertSelfOutput[output]/Dropout[dropout] <=> self.l_2
        # RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[2]/BertAttention[attention]/BertSelfOutput[output]/LayerNorm[LayerNorm] <=> self.l_3
        # RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[2]/BertIntermediate[intermediate]/Linear[dense] <=> self.l_4
        # RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[2]/BertOutput[output]/Linear[dense] <=> self.l_5
        # RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[2]/BertOutput[output]/Dropout[dropout] <=> self.l_6
        # RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[2]/BertOutput[output]/LayerNorm[LayerNorm] <=> self.l_7
        # RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[3]/BertAttention[attention]/BertSelfAttention[self] <=> self.l_8
        # RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[3]/BertAttention[attention]/BertSelfOutput[output]/Linear[dense] <=> self.l_9
        # RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[3]/BertAttention[attention]/BertSelfOutput[output]/Dropout[dropout] <=> self.l_10
        # RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[3]/BertAttention[attention]/BertSelfOutput[output]/LayerNorm[LayerNorm] <=> self.l_11
        # RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[3]/BertIntermediate[intermediate]/Linear[dense] <=> self.l_12
        # RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[3]/BertOutput[output]/Linear[dense] <=> self.l_13
        # RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[3]/BertOutput[output]/Dropout[dropout] <=> self.l_14
        # RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[3]/BertOutput[output]/LayerNorm[LayerNorm] <=> self.l_15
        # RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[4]/BertAttention[attention]/BertSelfAttention[self] <=> self.l_16
        # RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[4]/BertAttention[attention]/BertSelfOutput[output]/Linear[dense] <=> self.l_17
        # RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[4]/BertAttention[attention]/BertSelfOutput[output]/Dropout[dropout] <=> self.l_18
        # RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[4]/BertAttention[attention]/BertSelfOutput[output]/LayerNorm[LayerNorm] <=> self.l_19
        # RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[4]/BertIntermediate[intermediate]/Linear[dense] <=> self.l_20
        # RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[4]/BertOutput[output]/Linear[dense] <=> self.l_21
        # RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[4]/BertOutput[output]/Dropout[dropout] <=> self.l_22
        # RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[4]/BertOutput[output]/LayerNorm[LayerNorm] <=> self.l_23
        # RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[1]/prim::TupleConstruct_61 <=> x0

        # moving inputs to current device no op if already on the correct device
        x0 = move_tensors((x0), self.device)
        t_0 = x0[0]
        t_1 = x0[1]
        t_2 = self.l_0(t_0, attention_mask=t_1, head_mask=None)
        t_2 = self.l_1(t_2)
        t_2 = self.l_2(t_2)
        t_0 = t_2 + t_0
        t_0 = self.l_3(t_0)
        t_2 = self.l_4(t_0)
        t_2 = torch.nn.functional.gelu(t_2)
        t_2 = self.l_5(t_2)
        t_2 = self.l_6(t_2)
        t_0 = t_2 + t_0
        t_0 = self.l_7(t_0)
        t_1 = (t_0, t_1)
        t_0 = t_1[0]
        t_1 = t_1[1]
        t_2 = self.l_8(t_0, attention_mask=t_1, head_mask=None)
        t_2 = self.l_9(t_2)
        t_2 = self.l_10(t_2)
        t_0 = t_2 + t_0
        t_0 = self.l_11(t_0)
        t_2 = self.l_12(t_0)
        t_2 = torch.nn.functional.gelu(t_2)
        t_2 = self.l_13(t_2)
        t_2 = self.l_14(t_2)
        t_0 = t_2 + t_0
        t_0 = self.l_15(t_0)
        t_1 = (t_0, t_1)
        t_0 = t_1[0]
        t_1 = t_1[1]
        t_2 = self.l_16(t_0, attention_mask=t_1, head_mask=None)
        t_2 = self.l_17(t_2)
        t_2 = self.l_18(t_2)
        t_0 = t_2 + t_0
        t_0 = self.l_19(t_0)
        t_2 = self.l_20(t_0)
        t_2 = torch.nn.functional.gelu(t_2)
        t_2 = self.l_21(t_2)
        t_2 = self.l_22(t_2)
        t_0 = t_2 + t_0
        t_0 = self.l_23(t_0)
        # returning:
        # RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/tuple::__getitem___99
        # RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[4]/BertOutput[output]/LayerNorm[LayerNorm]
        return (t_1, t_0)

    def state_dict(self,device=None):
        # we return the state dict of this part as it should be in the original model
        return state_dict(self,device=device)

    def load_state_dict(self, state):
        return load_state_dict(self,state)

    def named_parameters(self,recurse=True):
        # we return the named parameters of this part as it should be in the original model
        return named_parameters(self,recurse=recurse)

    def named_buffers(self,recurse=True):
        # we return the named buffers of this part as it should be in the original model
        return named_buffers(self,recurse=recurse)

    def cpu(self):
        return cpu(self)

    def cuda(self,device=None):
        return cuda(self,device=device)

    def to(self, *args, **kwargs):
        return to(self,*args,**kwargs)


class Partition2(nn.Module):
    BASIC_BLOCKS=(
            Linear,
            BertSelfAttention,
            LayerNorm,
            Dropout,
        )
    LAYER_SCOPES=[
            'RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[5]/BertAttention[attention]/BertSelfAttention[self]',
            'RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[5]/BertAttention[attention]/BertSelfOutput[output]/Linear[dense]',
            'RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[5]/BertAttention[attention]/BertSelfOutput[output]/Dropout[dropout]',
            'RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[5]/BertAttention[attention]/BertSelfOutput[output]/LayerNorm[LayerNorm]',
            'RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[5]/BertIntermediate[intermediate]/Linear[dense]',
            'RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[5]/BertOutput[output]/Linear[dense]',
            'RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[5]/BertOutput[output]/Dropout[dropout]',
            'RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[5]/BertOutput[output]/LayerNorm[LayerNorm]',
            'RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[6]/BertAttention[attention]/BertSelfAttention[self]',
            'RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[6]/BertAttention[attention]/BertSelfOutput[output]/Linear[dense]',
            'RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[6]/BertAttention[attention]/BertSelfOutput[output]/Dropout[dropout]',
            'RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[6]/BertAttention[attention]/BertSelfOutput[output]/LayerNorm[LayerNorm]',
            'RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[6]/BertIntermediate[intermediate]/Linear[dense]',
            'RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[6]/BertOutput[output]/Linear[dense]',
            'RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[6]/BertOutput[output]/Dropout[dropout]',
            'RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[6]/BertOutput[output]/LayerNorm[LayerNorm]',
            'RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[7]/BertAttention[attention]/BertSelfAttention[self]',
            'RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[7]/BertAttention[attention]/BertSelfOutput[output]/Linear[dense]',
            'RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[7]/BertAttention[attention]/BertSelfOutput[output]/Dropout[dropout]',
            'RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[7]/BertAttention[attention]/BertSelfOutput[output]/LayerNorm[LayerNorm]',
            'RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[7]/BertIntermediate[intermediate]/Linear[dense]',
            'RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[7]/BertOutput[output]/Linear[dense]',
            'RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[7]/BertOutput[output]/Dropout[dropout]',
        ]
    TENSORS=[
        ]
    def __init__(self, layers, tensors):
        super(Partition2, self).__init__()

        #initialize partition layers
        for idx,layer_scope in enumerate(self.LAYER_SCOPES):
            self.add_module(f'l_{idx}',layers[layer_scope])

        #initialize partition tensors
        b=p=0
        for tensor_scope in self.TENSORS:
            tensor=tensors[tensor_scope]
            if isinstance(tensor,nn.Parameter):
                self.register_parameter(f'p_{p}',tensor)
                p+=1
            else:
                self.register_buffer(f'b_{b}',tensor)
                b+=1

        self.device = torch.device('cuda:2')
        self.lookup = { 'l_0': 'roberta.encoder.5.attention.self',
                        'l_1': 'roberta.encoder.5.attention.output.dense',
                        'l_2': 'roberta.encoder.5.attention.output.dropout',
                        'l_3': 'roberta.encoder.5.attention.output.LayerNorm',
                        'l_4': 'roberta.encoder.5.intermediate.dense',
                        'l_5': 'roberta.encoder.5.output.dense',
                        'l_6': 'roberta.encoder.5.output.dropout',
                        'l_7': 'roberta.encoder.5.output.LayerNorm',
                        'l_8': 'roberta.encoder.6.attention.self',
                        'l_9': 'roberta.encoder.6.attention.output.dense',
                        'l_10': 'roberta.encoder.6.attention.output.dropout',
                        'l_11': 'roberta.encoder.6.attention.output.LayerNorm',
                        'l_12': 'roberta.encoder.6.intermediate.dense',
                        'l_13': 'roberta.encoder.6.output.dense',
                        'l_14': 'roberta.encoder.6.output.dropout',
                        'l_15': 'roberta.encoder.6.output.LayerNorm',
                        'l_16': 'roberta.encoder.7.attention.self',
                        'l_17': 'roberta.encoder.7.attention.output.dense',
                        'l_18': 'roberta.encoder.7.attention.output.dropout',
                        'l_19': 'roberta.encoder.7.attention.output.LayerNorm',
                        'l_20': 'roberta.encoder.7.intermediate.dense',
                        'l_21': 'roberta.encoder.7.output.dense',
                        'l_22': 'roberta.encoder.7.output.dropout'}

    def forward(self, x0, x1):
        # RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[5]/BertAttention[attention]/BertSelfAttention[self] <=> self.l_0
        # RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[5]/BertAttention[attention]/BertSelfOutput[output]/Linear[dense] <=> self.l_1
        # RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[5]/BertAttention[attention]/BertSelfOutput[output]/Dropout[dropout] <=> self.l_2
        # RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[5]/BertAttention[attention]/BertSelfOutput[output]/LayerNorm[LayerNorm] <=> self.l_3
        # RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[5]/BertIntermediate[intermediate]/Linear[dense] <=> self.l_4
        # RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[5]/BertOutput[output]/Linear[dense] <=> self.l_5
        # RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[5]/BertOutput[output]/Dropout[dropout] <=> self.l_6
        # RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[5]/BertOutput[output]/LayerNorm[LayerNorm] <=> self.l_7
        # RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[6]/BertAttention[attention]/BertSelfAttention[self] <=> self.l_8
        # RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[6]/BertAttention[attention]/BertSelfOutput[output]/Linear[dense] <=> self.l_9
        # RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[6]/BertAttention[attention]/BertSelfOutput[output]/Dropout[dropout] <=> self.l_10
        # RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[6]/BertAttention[attention]/BertSelfOutput[output]/LayerNorm[LayerNorm] <=> self.l_11
        # RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[6]/BertIntermediate[intermediate]/Linear[dense] <=> self.l_12
        # RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[6]/BertOutput[output]/Linear[dense] <=> self.l_13
        # RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[6]/BertOutput[output]/Dropout[dropout] <=> self.l_14
        # RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[6]/BertOutput[output]/LayerNorm[LayerNorm] <=> self.l_15
        # RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[7]/BertAttention[attention]/BertSelfAttention[self] <=> self.l_16
        # RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[7]/BertAttention[attention]/BertSelfOutput[output]/Linear[dense] <=> self.l_17
        # RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[7]/BertAttention[attention]/BertSelfOutput[output]/Dropout[dropout] <=> self.l_18
        # RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[7]/BertAttention[attention]/BertSelfOutput[output]/LayerNorm[LayerNorm] <=> self.l_19
        # RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[7]/BertIntermediate[intermediate]/Linear[dense] <=> self.l_20
        # RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[7]/BertOutput[output]/Linear[dense] <=> self.l_21
        # RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[7]/BertOutput[output]/Dropout[dropout] <=> self.l_22
        # RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/tuple::__getitem___99 <=> x0
        # RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[4]/BertOutput[output]/LayerNorm[LayerNorm] <=> x1

        # moving inputs to current device no op if already on the correct device
        x0, x1 = move_tensors((x0, x1), self.device)
        t_0 = (x1, x0)
        t_1 = t_0[0]
        t_0 = t_0[1]
        t_2 = self.l_0(t_1, attention_mask=t_0, head_mask=None)
        t_2 = self.l_1(t_2)
        t_2 = self.l_2(t_2)
        t_1 = t_2 + t_1
        t_1 = self.l_3(t_1)
        t_2 = self.l_4(t_1)
        t_2 = torch.nn.functional.gelu(t_2)
        t_2 = self.l_5(t_2)
        t_2 = self.l_6(t_2)
        t_1 = t_2 + t_1
        t_1 = self.l_7(t_1)
        t_0 = (t_1, t_0)
        t_1 = t_0[0]
        t_0 = t_0[1]
        t_2 = self.l_8(t_1, attention_mask=t_0, head_mask=None)
        t_2 = self.l_9(t_2)
        t_2 = self.l_10(t_2)
        t_1 = t_2 + t_1
        t_1 = self.l_11(t_1)
        t_2 = self.l_12(t_1)
        t_2 = torch.nn.functional.gelu(t_2)
        t_2 = self.l_13(t_2)
        t_2 = self.l_14(t_2)
        t_1 = t_2 + t_1
        t_1 = self.l_15(t_1)
        t_0 = (t_1, t_0)
        t_1 = t_0[0]
        t_0 = t_0[1]
        t_2 = self.l_16(t_1, attention_mask=t_0, head_mask=None)
        t_2 = self.l_17(t_2)
        t_2 = self.l_18(t_2)
        t_1 = t_2 + t_1
        t_1 = self.l_19(t_1)
        t_2 = self.l_20(t_1)
        t_2 = torch.nn.functional.gelu(t_2)
        t_2 = self.l_21(t_2)
        t_2 = self.l_22(t_2)
        t_1 = t_2 + t_1
        # returning:
        # RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/tuple::__getitem___150
        # RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[7]/BertOutput[output]/Tensor::__add___161
        return (t_0, t_1)

    def state_dict(self,device=None):
        # we return the state dict of this part as it should be in the original model
        return state_dict(self,device=device)

    def load_state_dict(self, state):
        return load_state_dict(self,state)

    def named_parameters(self,recurse=True):
        # we return the named parameters of this part as it should be in the original model
        return named_parameters(self,recurse=recurse)

    def named_buffers(self,recurse=True):
        # we return the named buffers of this part as it should be in the original model
        return named_buffers(self,recurse=recurse)

    def cpu(self):
        return cpu(self)

    def cuda(self,device=None):
        return cuda(self,device=device)

    def to(self, *args, **kwargs):
        return to(self,*args,**kwargs)


class Partition3(nn.Module):
    BASIC_BLOCKS=(
            Linear,
            BertSelfAttention,
            LayerNorm,
            Dropout,
        )
    LAYER_SCOPES=[
            'RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[7]/BertOutput[output]/LayerNorm[LayerNorm]',
            'RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[8]/BertAttention[attention]/BertSelfAttention[self]',
            'RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[8]/BertAttention[attention]/BertSelfOutput[output]/Linear[dense]',
            'RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[8]/BertAttention[attention]/BertSelfOutput[output]/Dropout[dropout]',
            'RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[8]/BertAttention[attention]/BertSelfOutput[output]/LayerNorm[LayerNorm]',
            'RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[8]/BertIntermediate[intermediate]/Linear[dense]',
            'RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[8]/BertOutput[output]/Linear[dense]',
            'RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[8]/BertOutput[output]/Dropout[dropout]',
            'RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[8]/BertOutput[output]/LayerNorm[LayerNorm]',
            'RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[9]/BertAttention[attention]/BertSelfAttention[self]',
            'RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[9]/BertAttention[attention]/BertSelfOutput[output]/Linear[dense]',
            'RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[9]/BertAttention[attention]/BertSelfOutput[output]/Dropout[dropout]',
            'RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[9]/BertAttention[attention]/BertSelfOutput[output]/LayerNorm[LayerNorm]',
            'RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[9]/BertIntermediate[intermediate]/Linear[dense]',
            'RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[9]/BertOutput[output]/Linear[dense]',
            'RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[9]/BertOutput[output]/Dropout[dropout]',
            'RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[9]/BertOutput[output]/LayerNorm[LayerNorm]',
            'RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[10]/BertAttention[attention]/BertSelfAttention[self]',
            'RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[10]/BertAttention[attention]/BertSelfOutput[output]/Linear[dense]',
            'RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[10]/BertAttention[attention]/BertSelfOutput[output]/Dropout[dropout]',
            'RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[10]/BertAttention[attention]/BertSelfOutput[output]/LayerNorm[LayerNorm]',
            'RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[10]/BertIntermediate[intermediate]/Linear[dense]',
            'RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[10]/BertOutput[output]/Linear[dense]',
            'RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[10]/BertOutput[output]/Dropout[dropout]',
        ]
    TENSORS=[
        ]
    def __init__(self, layers, tensors):
        super(Partition3, self).__init__()

        #initialize partition layers
        for idx,layer_scope in enumerate(self.LAYER_SCOPES):
            self.add_module(f'l_{idx}',layers[layer_scope])

        #initialize partition tensors
        b=p=0
        for tensor_scope in self.TENSORS:
            tensor=tensors[tensor_scope]
            if isinstance(tensor,nn.Parameter):
                self.register_parameter(f'p_{p}',tensor)
                p+=1
            else:
                self.register_buffer(f'b_{b}',tensor)
                b+=1

        self.device = torch.device('cuda:3')
        self.lookup = { 'l_0': 'roberta.encoder.7.output.LayerNorm',
                        'l_1': 'roberta.encoder.8.attention.self',
                        'l_2': 'roberta.encoder.8.attention.output.dense',
                        'l_3': 'roberta.encoder.8.attention.output.dropout',
                        'l_4': 'roberta.encoder.8.attention.output.LayerNorm',
                        'l_5': 'roberta.encoder.8.intermediate.dense',
                        'l_6': 'roberta.encoder.8.output.dense',
                        'l_7': 'roberta.encoder.8.output.dropout',
                        'l_8': 'roberta.encoder.8.output.LayerNorm',
                        'l_9': 'roberta.encoder.9.attention.self',
                        'l_10': 'roberta.encoder.9.attention.output.dense',
                        'l_11': 'roberta.encoder.9.attention.output.dropout',
                        'l_12': 'roberta.encoder.9.attention.output.LayerNorm',
                        'l_13': 'roberta.encoder.9.intermediate.dense',
                        'l_14': 'roberta.encoder.9.output.dense',
                        'l_15': 'roberta.encoder.9.output.dropout',
                        'l_16': 'roberta.encoder.9.output.LayerNorm',
                        'l_17': 'roberta.encoder.10.attention.self',
                        'l_18': 'roberta.encoder.10.attention.output.dense',
                        'l_19': 'roberta.encoder.10.attention.output.dropout',
                        'l_20': 'roberta.encoder.10.attention.output.LayerNorm',
                        'l_21': 'roberta.encoder.10.intermediate.dense',
                        'l_22': 'roberta.encoder.10.output.dense',
                        'l_23': 'roberta.encoder.10.output.dropout'}

    def forward(self, x0, x1):
        # RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[7]/BertOutput[output]/LayerNorm[LayerNorm] <=> self.l_0
        # RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[8]/BertAttention[attention]/BertSelfAttention[self] <=> self.l_1
        # RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[8]/BertAttention[attention]/BertSelfOutput[output]/Linear[dense] <=> self.l_2
        # RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[8]/BertAttention[attention]/BertSelfOutput[output]/Dropout[dropout] <=> self.l_3
        # RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[8]/BertAttention[attention]/BertSelfOutput[output]/LayerNorm[LayerNorm] <=> self.l_4
        # RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[8]/BertIntermediate[intermediate]/Linear[dense] <=> self.l_5
        # RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[8]/BertOutput[output]/Linear[dense] <=> self.l_6
        # RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[8]/BertOutput[output]/Dropout[dropout] <=> self.l_7
        # RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[8]/BertOutput[output]/LayerNorm[LayerNorm] <=> self.l_8
        # RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[9]/BertAttention[attention]/BertSelfAttention[self] <=> self.l_9
        # RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[9]/BertAttention[attention]/BertSelfOutput[output]/Linear[dense] <=> self.l_10
        # RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[9]/BertAttention[attention]/BertSelfOutput[output]/Dropout[dropout] <=> self.l_11
        # RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[9]/BertAttention[attention]/BertSelfOutput[output]/LayerNorm[LayerNorm] <=> self.l_12
        # RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[9]/BertIntermediate[intermediate]/Linear[dense] <=> self.l_13
        # RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[9]/BertOutput[output]/Linear[dense] <=> self.l_14
        # RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[9]/BertOutput[output]/Dropout[dropout] <=> self.l_15
        # RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[9]/BertOutput[output]/LayerNorm[LayerNorm] <=> self.l_16
        # RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[10]/BertAttention[attention]/BertSelfAttention[self] <=> self.l_17
        # RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[10]/BertAttention[attention]/BertSelfOutput[output]/Linear[dense] <=> self.l_18
        # RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[10]/BertAttention[attention]/BertSelfOutput[output]/Dropout[dropout] <=> self.l_19
        # RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[10]/BertAttention[attention]/BertSelfOutput[output]/LayerNorm[LayerNorm] <=> self.l_20
        # RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[10]/BertIntermediate[intermediate]/Linear[dense] <=> self.l_21
        # RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[10]/BertOutput[output]/Linear[dense] <=> self.l_22
        # RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[10]/BertOutput[output]/Dropout[dropout] <=> self.l_23
        # RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/tuple::__getitem___150 <=> x0
        # RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[7]/BertOutput[output]/Tensor::__add___161 <=> x1

        # moving inputs to current device no op if already on the correct device
        x0, x1 = move_tensors((x0, x1), self.device)
        t_0 = self.l_0(x1)
        t_0 = (t_0, x0)
        t_1 = t_0[0]
        t_0 = t_0[1]
        t_2 = self.l_1(t_1, attention_mask=t_0, head_mask=None)
        t_2 = self.l_2(t_2)
        t_2 = self.l_3(t_2)
        t_1 = t_2 + t_1
        t_1 = self.l_4(t_1)
        t_2 = self.l_5(t_1)
        t_2 = torch.nn.functional.gelu(t_2)
        t_2 = self.l_6(t_2)
        t_2 = self.l_7(t_2)
        t_1 = t_2 + t_1
        t_1 = self.l_8(t_1)
        t_0 = (t_1, t_0)
        t_1 = t_0[0]
        t_0 = t_0[1]
        t_2 = self.l_9(t_1, attention_mask=t_0, head_mask=None)
        t_2 = self.l_10(t_2)
        t_2 = self.l_11(t_2)
        t_1 = t_2 + t_1
        t_1 = self.l_12(t_1)
        t_2 = self.l_13(t_1)
        t_2 = torch.nn.functional.gelu(t_2)
        t_2 = self.l_14(t_2)
        t_2 = self.l_15(t_2)
        t_1 = t_2 + t_1
        t_1 = self.l_16(t_1)
        t_0 = (t_1, t_0)
        t_1 = t_0[0]
        t_0 = t_0[1]
        t_2 = self.l_17(t_1, attention_mask=t_0, head_mask=None)
        t_2 = self.l_18(t_2)
        t_2 = self.l_19(t_2)
        t_1 = t_2 + t_1
        t_1 = self.l_20(t_1)
        t_2 = self.l_21(t_1)
        t_2 = torch.nn.functional.gelu(t_2)
        t_2 = self.l_22(t_2)
        t_2 = self.l_23(t_2)
        t_1 = t_2 + t_1
        # returning:
        # RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/tuple::__getitem___201
        # RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[10]/BertOutput[output]/Tensor::__add___212
        return (t_0, t_1)

    def state_dict(self,device=None):
        # we return the state dict of this part as it should be in the original model
        return state_dict(self,device=device)

    def load_state_dict(self, state):
        return load_state_dict(self,state)

    def named_parameters(self,recurse=True):
        # we return the named parameters of this part as it should be in the original model
        return named_parameters(self,recurse=recurse)

    def named_buffers(self,recurse=True):
        # we return the named buffers of this part as it should be in the original model
        return named_buffers(self,recurse=recurse)

    def cpu(self):
        return cpu(self)

    def cuda(self,device=None):
        return cuda(self,device=device)

    def to(self, *args, **kwargs):
        return to(self,*args,**kwargs)


class Partition4(nn.Module):
    BASIC_BLOCKS=(
            Linear,
            BertSelfAttention,
            LayerNorm,
            Dropout,
        )
    LAYER_SCOPES=[
            'RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[10]/BertOutput[output]/LayerNorm[LayerNorm]',
            'RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[11]/BertAttention[attention]/BertSelfAttention[self]',
            'RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[11]/BertAttention[attention]/BertSelfOutput[output]/Linear[dense]',
            'RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[11]/BertAttention[attention]/BertSelfOutput[output]/Dropout[dropout]',
            'RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[11]/BertAttention[attention]/BertSelfOutput[output]/LayerNorm[LayerNorm]',
            'RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[11]/BertIntermediate[intermediate]/Linear[dense]',
            'RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[11]/BertOutput[output]/Linear[dense]',
            'RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[11]/BertOutput[output]/Dropout[dropout]',
            'RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[11]/BertOutput[output]/LayerNorm[LayerNorm]',
            'RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[12]/BertAttention[attention]/BertSelfAttention[self]',
            'RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[12]/BertAttention[attention]/BertSelfOutput[output]/Linear[dense]',
            'RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[12]/BertAttention[attention]/BertSelfOutput[output]/Dropout[dropout]',
            'RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[12]/BertAttention[attention]/BertSelfOutput[output]/LayerNorm[LayerNorm]',
            'RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[12]/BertIntermediate[intermediate]/Linear[dense]',
            'RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[12]/BertOutput[output]/Linear[dense]',
            'RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[12]/BertOutput[output]/Dropout[dropout]',
            'RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[12]/BertOutput[output]/LayerNorm[LayerNorm]',
            'RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[13]/BertAttention[attention]/BertSelfAttention[self]',
            'RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[13]/BertAttention[attention]/BertSelfOutput[output]/Linear[dense]',
            'RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[13]/BertAttention[attention]/BertSelfOutput[output]/Dropout[dropout]',
            'RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[13]/BertAttention[attention]/BertSelfOutput[output]/LayerNorm[LayerNorm]',
            'RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[13]/BertIntermediate[intermediate]/Linear[dense]',
            'RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[13]/BertOutput[output]/Linear[dense]',
            'RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[13]/BertOutput[output]/Dropout[dropout]',
            'RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[13]/BertOutput[output]/LayerNorm[LayerNorm]',
        ]
    TENSORS=[
        ]
    def __init__(self, layers, tensors):
        super(Partition4, self).__init__()

        #initialize partition layers
        for idx,layer_scope in enumerate(self.LAYER_SCOPES):
            self.add_module(f'l_{idx}',layers[layer_scope])

        #initialize partition tensors
        b=p=0
        for tensor_scope in self.TENSORS:
            tensor=tensors[tensor_scope]
            if isinstance(tensor,nn.Parameter):
                self.register_parameter(f'p_{p}',tensor)
                p+=1
            else:
                self.register_buffer(f'b_{b}',tensor)
                b+=1

        self.device = torch.device('cuda:4')
        self.lookup = { 'l_0': 'roberta.encoder.10.output.LayerNorm',
                        'l_1': 'roberta.encoder.11.attention.self',
                        'l_2': 'roberta.encoder.11.attention.output.dense',
                        'l_3': 'roberta.encoder.11.attention.output.dropout',
                        'l_4': 'roberta.encoder.11.attention.output.LayerNorm',
                        'l_5': 'roberta.encoder.11.intermediate.dense',
                        'l_6': 'roberta.encoder.11.output.dense',
                        'l_7': 'roberta.encoder.11.output.dropout',
                        'l_8': 'roberta.encoder.11.output.LayerNorm',
                        'l_9': 'roberta.encoder.12.attention.self',
                        'l_10': 'roberta.encoder.12.attention.output.dense',
                        'l_11': 'roberta.encoder.12.attention.output.dropout',
                        'l_12': 'roberta.encoder.12.attention.output.LayerNorm',
                        'l_13': 'roberta.encoder.12.intermediate.dense',
                        'l_14': 'roberta.encoder.12.output.dense',
                        'l_15': 'roberta.encoder.12.output.dropout',
                        'l_16': 'roberta.encoder.12.output.LayerNorm',
                        'l_17': 'roberta.encoder.13.attention.self',
                        'l_18': 'roberta.encoder.13.attention.output.dense',
                        'l_19': 'roberta.encoder.13.attention.output.dropout',
                        'l_20': 'roberta.encoder.13.attention.output.LayerNorm',
                        'l_21': 'roberta.encoder.13.intermediate.dense',
                        'l_22': 'roberta.encoder.13.output.dense',
                        'l_23': 'roberta.encoder.13.output.dropout',
                        'l_24': 'roberta.encoder.13.output.LayerNorm'}

    def forward(self, x0, x1):
        # RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[10]/BertOutput[output]/LayerNorm[LayerNorm] <=> self.l_0
        # RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[11]/BertAttention[attention]/BertSelfAttention[self] <=> self.l_1
        # RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[11]/BertAttention[attention]/BertSelfOutput[output]/Linear[dense] <=> self.l_2
        # RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[11]/BertAttention[attention]/BertSelfOutput[output]/Dropout[dropout] <=> self.l_3
        # RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[11]/BertAttention[attention]/BertSelfOutput[output]/LayerNorm[LayerNorm] <=> self.l_4
        # RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[11]/BertIntermediate[intermediate]/Linear[dense] <=> self.l_5
        # RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[11]/BertOutput[output]/Linear[dense] <=> self.l_6
        # RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[11]/BertOutput[output]/Dropout[dropout] <=> self.l_7
        # RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[11]/BertOutput[output]/LayerNorm[LayerNorm] <=> self.l_8
        # RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[12]/BertAttention[attention]/BertSelfAttention[self] <=> self.l_9
        # RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[12]/BertAttention[attention]/BertSelfOutput[output]/Linear[dense] <=> self.l_10
        # RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[12]/BertAttention[attention]/BertSelfOutput[output]/Dropout[dropout] <=> self.l_11
        # RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[12]/BertAttention[attention]/BertSelfOutput[output]/LayerNorm[LayerNorm] <=> self.l_12
        # RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[12]/BertIntermediate[intermediate]/Linear[dense] <=> self.l_13
        # RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[12]/BertOutput[output]/Linear[dense] <=> self.l_14
        # RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[12]/BertOutput[output]/Dropout[dropout] <=> self.l_15
        # RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[12]/BertOutput[output]/LayerNorm[LayerNorm] <=> self.l_16
        # RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[13]/BertAttention[attention]/BertSelfAttention[self] <=> self.l_17
        # RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[13]/BertAttention[attention]/BertSelfOutput[output]/Linear[dense] <=> self.l_18
        # RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[13]/BertAttention[attention]/BertSelfOutput[output]/Dropout[dropout] <=> self.l_19
        # RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[13]/BertAttention[attention]/BertSelfOutput[output]/LayerNorm[LayerNorm] <=> self.l_20
        # RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[13]/BertIntermediate[intermediate]/Linear[dense] <=> self.l_21
        # RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[13]/BertOutput[output]/Linear[dense] <=> self.l_22
        # RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[13]/BertOutput[output]/Dropout[dropout] <=> self.l_23
        # RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[13]/BertOutput[output]/LayerNorm[LayerNorm] <=> self.l_24
        # RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/tuple::__getitem___201 <=> x0
        # RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[10]/BertOutput[output]/Tensor::__add___212 <=> x1

        # moving inputs to current device no op if already on the correct device
        x0, x1 = move_tensors((x0, x1), self.device)
        t_0 = self.l_0(x1)
        t_0 = (t_0, x0)
        t_1 = t_0[0]
        t_0 = t_0[1]
        t_2 = self.l_1(t_1, attention_mask=t_0, head_mask=None)
        t_2 = self.l_2(t_2)
        t_2 = self.l_3(t_2)
        t_1 = t_2 + t_1
        t_1 = self.l_4(t_1)
        t_2 = self.l_5(t_1)
        t_2 = torch.nn.functional.gelu(t_2)
        t_2 = self.l_6(t_2)
        t_2 = self.l_7(t_2)
        t_1 = t_2 + t_1
        t_1 = self.l_8(t_1)
        t_0 = (t_1, t_0)
        t_1 = t_0[0]
        t_0 = t_0[1]
        t_2 = self.l_9(t_1, attention_mask=t_0, head_mask=None)
        t_2 = self.l_10(t_2)
        t_2 = self.l_11(t_2)
        t_1 = t_2 + t_1
        t_1 = self.l_12(t_1)
        t_2 = self.l_13(t_1)
        t_2 = torch.nn.functional.gelu(t_2)
        t_2 = self.l_14(t_2)
        t_2 = self.l_15(t_2)
        t_1 = t_2 + t_1
        t_1 = self.l_16(t_1)
        t_0 = (t_1, t_0)
        t_1 = t_0[0]
        t_0 = t_0[1]
        t_2 = self.l_17(t_1, attention_mask=t_0, head_mask=None)
        t_2 = self.l_18(t_2)
        t_2 = self.l_19(t_2)
        t_1 = t_2 + t_1
        t_1 = self.l_20(t_1)
        t_2 = self.l_21(t_1)
        t_2 = torch.nn.functional.gelu(t_2)
        t_2 = self.l_22(t_2)
        t_2 = self.l_23(t_2)
        t_1 = t_2 + t_1
        t_1 = self.l_24(t_1)
        # returning:
        # RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/tuple::__getitem___252
        # RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[13]/BertOutput[output]/LayerNorm[LayerNorm]
        return (t_0, t_1)

    def state_dict(self,device=None):
        # we return the state dict of this part as it should be in the original model
        return state_dict(self,device=device)

    def load_state_dict(self, state):
        return load_state_dict(self,state)

    def named_parameters(self,recurse=True):
        # we return the named parameters of this part as it should be in the original model
        return named_parameters(self,recurse=recurse)

    def named_buffers(self,recurse=True):
        # we return the named buffers of this part as it should be in the original model
        return named_buffers(self,recurse=recurse)

    def cpu(self):
        return cpu(self)

    def cuda(self,device=None):
        return cuda(self,device=device)

    def to(self, *args, **kwargs):
        return to(self,*args,**kwargs)


class Partition5(nn.Module):
    BASIC_BLOCKS=(
            Linear,
            BertSelfAttention,
            LayerNorm,
            Dropout,
        )
    LAYER_SCOPES=[
            'RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[14]/BertAttention[attention]/BertSelfAttention[self]',
            'RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[14]/BertAttention[attention]/BertSelfOutput[output]/Linear[dense]',
            'RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[14]/BertAttention[attention]/BertSelfOutput[output]/Dropout[dropout]',
            'RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[14]/BertAttention[attention]/BertSelfOutput[output]/LayerNorm[LayerNorm]',
            'RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[14]/BertIntermediate[intermediate]/Linear[dense]',
            'RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[14]/BertOutput[output]/Linear[dense]',
            'RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[14]/BertOutput[output]/Dropout[dropout]',
            'RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[14]/BertOutput[output]/LayerNorm[LayerNorm]',
            'RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[15]/BertAttention[attention]/BertSelfAttention[self]',
            'RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[15]/BertAttention[attention]/BertSelfOutput[output]/Linear[dense]',
            'RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[15]/BertAttention[attention]/BertSelfOutput[output]/Dropout[dropout]',
            'RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[15]/BertAttention[attention]/BertSelfOutput[output]/LayerNorm[LayerNorm]',
            'RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[15]/BertIntermediate[intermediate]/Linear[dense]',
            'RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[15]/BertOutput[output]/Linear[dense]',
            'RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[15]/BertOutput[output]/Dropout[dropout]',
            'RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[15]/BertOutput[output]/LayerNorm[LayerNorm]',
            'RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[16]/BertAttention[attention]/BertSelfAttention[self]',
            'RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[16]/BertAttention[attention]/BertSelfOutput[output]/Linear[dense]',
            'RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[16]/BertAttention[attention]/BertSelfOutput[output]/Dropout[dropout]',
            'RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[16]/BertAttention[attention]/BertSelfOutput[output]/LayerNorm[LayerNorm]',
            'RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[16]/BertIntermediate[intermediate]/Linear[dense]',
            'RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[16]/BertOutput[output]/Linear[dense]',
            'RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[16]/BertOutput[output]/Dropout[dropout]',
            'RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[16]/BertOutput[output]/LayerNorm[LayerNorm]',
        ]
    TENSORS=[
        ]
    def __init__(self, layers, tensors):
        super(Partition5, self).__init__()

        #initialize partition layers
        for idx,layer_scope in enumerate(self.LAYER_SCOPES):
            self.add_module(f'l_{idx}',layers[layer_scope])

        #initialize partition tensors
        b=p=0
        for tensor_scope in self.TENSORS:
            tensor=tensors[tensor_scope]
            if isinstance(tensor,nn.Parameter):
                self.register_parameter(f'p_{p}',tensor)
                p+=1
            else:
                self.register_buffer(f'b_{b}',tensor)
                b+=1

        self.device = torch.device('cuda:5')
        self.lookup = { 'l_0': 'roberta.encoder.14.attention.self',
                        'l_1': 'roberta.encoder.14.attention.output.dense',
                        'l_2': 'roberta.encoder.14.attention.output.dropout',
                        'l_3': 'roberta.encoder.14.attention.output.LayerNorm',
                        'l_4': 'roberta.encoder.14.intermediate.dense',
                        'l_5': 'roberta.encoder.14.output.dense',
                        'l_6': 'roberta.encoder.14.output.dropout',
                        'l_7': 'roberta.encoder.14.output.LayerNorm',
                        'l_8': 'roberta.encoder.15.attention.self',
                        'l_9': 'roberta.encoder.15.attention.output.dense',
                        'l_10': 'roberta.encoder.15.attention.output.dropout',
                        'l_11': 'roberta.encoder.15.attention.output.LayerNorm',
                        'l_12': 'roberta.encoder.15.intermediate.dense',
                        'l_13': 'roberta.encoder.15.output.dense',
                        'l_14': 'roberta.encoder.15.output.dropout',
                        'l_15': 'roberta.encoder.15.output.LayerNorm',
                        'l_16': 'roberta.encoder.16.attention.self',
                        'l_17': 'roberta.encoder.16.attention.output.dense',
                        'l_18': 'roberta.encoder.16.attention.output.dropout',
                        'l_19': 'roberta.encoder.16.attention.output.LayerNorm',
                        'l_20': 'roberta.encoder.16.intermediate.dense',
                        'l_21': 'roberta.encoder.16.output.dense',
                        'l_22': 'roberta.encoder.16.output.dropout',
                        'l_23': 'roberta.encoder.16.output.LayerNorm'}

    def forward(self, x0, x1):
        # RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[14]/BertAttention[attention]/BertSelfAttention[self] <=> self.l_0
        # RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[14]/BertAttention[attention]/BertSelfOutput[output]/Linear[dense] <=> self.l_1
        # RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[14]/BertAttention[attention]/BertSelfOutput[output]/Dropout[dropout] <=> self.l_2
        # RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[14]/BertAttention[attention]/BertSelfOutput[output]/LayerNorm[LayerNorm] <=> self.l_3
        # RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[14]/BertIntermediate[intermediate]/Linear[dense] <=> self.l_4
        # RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[14]/BertOutput[output]/Linear[dense] <=> self.l_5
        # RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[14]/BertOutput[output]/Dropout[dropout] <=> self.l_6
        # RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[14]/BertOutput[output]/LayerNorm[LayerNorm] <=> self.l_7
        # RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[15]/BertAttention[attention]/BertSelfAttention[self] <=> self.l_8
        # RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[15]/BertAttention[attention]/BertSelfOutput[output]/Linear[dense] <=> self.l_9
        # RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[15]/BertAttention[attention]/BertSelfOutput[output]/Dropout[dropout] <=> self.l_10
        # RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[15]/BertAttention[attention]/BertSelfOutput[output]/LayerNorm[LayerNorm] <=> self.l_11
        # RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[15]/BertIntermediate[intermediate]/Linear[dense] <=> self.l_12
        # RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[15]/BertOutput[output]/Linear[dense] <=> self.l_13
        # RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[15]/BertOutput[output]/Dropout[dropout] <=> self.l_14
        # RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[15]/BertOutput[output]/LayerNorm[LayerNorm] <=> self.l_15
        # RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[16]/BertAttention[attention]/BertSelfAttention[self] <=> self.l_16
        # RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[16]/BertAttention[attention]/BertSelfOutput[output]/Linear[dense] <=> self.l_17
        # RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[16]/BertAttention[attention]/BertSelfOutput[output]/Dropout[dropout] <=> self.l_18
        # RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[16]/BertAttention[attention]/BertSelfOutput[output]/LayerNorm[LayerNorm] <=> self.l_19
        # RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[16]/BertIntermediate[intermediate]/Linear[dense] <=> self.l_20
        # RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[16]/BertOutput[output]/Linear[dense] <=> self.l_21
        # RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[16]/BertOutput[output]/Dropout[dropout] <=> self.l_22
        # RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[16]/BertOutput[output]/LayerNorm[LayerNorm] <=> self.l_23
        # RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/tuple::__getitem___252 <=> x0
        # RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[13]/BertOutput[output]/LayerNorm[LayerNorm] <=> x1

        # moving inputs to current device no op if already on the correct device
        x0, x1 = move_tensors((x0, x1), self.device)
        t_0 = (x1, x0)
        t_1 = t_0[0]
        t_0 = t_0[1]
        t_2 = self.l_0(t_1, attention_mask=t_0, head_mask=None)
        t_2 = self.l_1(t_2)
        t_2 = self.l_2(t_2)
        t_1 = t_2 + t_1
        t_1 = self.l_3(t_1)
        t_2 = self.l_4(t_1)
        t_2 = torch.nn.functional.gelu(t_2)
        t_2 = self.l_5(t_2)
        t_2 = self.l_6(t_2)
        t_1 = t_2 + t_1
        t_1 = self.l_7(t_1)
        t_0 = (t_1, t_0)
        t_1 = t_0[0]
        t_0 = t_0[1]
        t_2 = self.l_8(t_1, attention_mask=t_0, head_mask=None)
        t_2 = self.l_9(t_2)
        t_2 = self.l_10(t_2)
        t_1 = t_2 + t_1
        t_1 = self.l_11(t_1)
        t_2 = self.l_12(t_1)
        t_2 = torch.nn.functional.gelu(t_2)
        t_2 = self.l_13(t_2)
        t_2 = self.l_14(t_2)
        t_1 = t_2 + t_1
        t_1 = self.l_15(t_1)
        t_0 = (t_1, t_0)
        t_1 = t_0[0]
        t_0 = t_0[1]
        t_2 = self.l_16(t_1, attention_mask=t_0, head_mask=None)
        t_2 = self.l_17(t_2)
        t_2 = self.l_18(t_2)
        t_1 = t_2 + t_1
        t_1 = self.l_19(t_1)
        t_2 = self.l_20(t_1)
        t_2 = torch.nn.functional.gelu(t_2)
        t_2 = self.l_21(t_2)
        t_2 = self.l_22(t_2)
        t_1 = t_2 + t_1
        t_1 = self.l_23(t_1)
        # returning:
        # RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/tuple::__getitem___303
        # RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[16]/BertOutput[output]/LayerNorm[LayerNorm]
        return (t_0, t_1)

    def state_dict(self,device=None):
        # we return the state dict of this part as it should be in the original model
        return state_dict(self,device=device)

    def load_state_dict(self, state):
        return load_state_dict(self,state)

    def named_parameters(self,recurse=True):
        # we return the named parameters of this part as it should be in the original model
        return named_parameters(self,recurse=recurse)

    def named_buffers(self,recurse=True):
        # we return the named buffers of this part as it should be in the original model
        return named_buffers(self,recurse=recurse)

    def cpu(self):
        return cpu(self)

    def cuda(self,device=None):
        return cuda(self,device=device)

    def to(self, *args, **kwargs):
        return to(self,*args,**kwargs)


class Partition6(nn.Module):
    BASIC_BLOCKS=(
            Linear,
            BertSelfAttention,
            LayerNorm,
            Dropout,
        )
    LAYER_SCOPES=[
            'RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[17]/BertAttention[attention]/BertSelfAttention[self]',
            'RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[17]/BertAttention[attention]/BertSelfOutput[output]/Linear[dense]',
            'RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[17]/BertAttention[attention]/BertSelfOutput[output]/Dropout[dropout]',
            'RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[17]/BertAttention[attention]/BertSelfOutput[output]/LayerNorm[LayerNorm]',
            'RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[17]/BertIntermediate[intermediate]/Linear[dense]',
            'RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[17]/BertOutput[output]/Linear[dense]',
            'RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[17]/BertOutput[output]/Dropout[dropout]',
            'RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[17]/BertOutput[output]/LayerNorm[LayerNorm]',
            'RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[18]/BertAttention[attention]/BertSelfAttention[self]',
            'RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[18]/BertAttention[attention]/BertSelfOutput[output]/Linear[dense]',
            'RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[18]/BertAttention[attention]/BertSelfOutput[output]/Dropout[dropout]',
            'RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[18]/BertAttention[attention]/BertSelfOutput[output]/LayerNorm[LayerNorm]',
            'RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[18]/BertIntermediate[intermediate]/Linear[dense]',
            'RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[18]/BertOutput[output]/Linear[dense]',
            'RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[18]/BertOutput[output]/Dropout[dropout]',
            'RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[18]/BertOutput[output]/LayerNorm[LayerNorm]',
            'RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[19]/BertAttention[attention]/BertSelfAttention[self]',
            'RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[19]/BertAttention[attention]/BertSelfOutput[output]/Linear[dense]',
            'RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[19]/BertAttention[attention]/BertSelfOutput[output]/Dropout[dropout]',
            'RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[19]/BertAttention[attention]/BertSelfOutput[output]/LayerNorm[LayerNorm]',
            'RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[19]/BertIntermediate[intermediate]/Linear[dense]',
            'RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[19]/BertOutput[output]/Linear[dense]',
            'RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[19]/BertOutput[output]/Dropout[dropout]',
            'RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[19]/BertOutput[output]/LayerNorm[LayerNorm]',
        ]
    TENSORS=[
        ]
    def __init__(self, layers, tensors):
        super(Partition6, self).__init__()

        #initialize partition layers
        for idx,layer_scope in enumerate(self.LAYER_SCOPES):
            self.add_module(f'l_{idx}',layers[layer_scope])

        #initialize partition tensors
        b=p=0
        for tensor_scope in self.TENSORS:
            tensor=tensors[tensor_scope]
            if isinstance(tensor,nn.Parameter):
                self.register_parameter(f'p_{p}',tensor)
                p+=1
            else:
                self.register_buffer(f'b_{b}',tensor)
                b+=1

        self.device = torch.device('cuda:6')
        self.lookup = { 'l_0': 'roberta.encoder.17.attention.self',
                        'l_1': 'roberta.encoder.17.attention.output.dense',
                        'l_2': 'roberta.encoder.17.attention.output.dropout',
                        'l_3': 'roberta.encoder.17.attention.output.LayerNorm',
                        'l_4': 'roberta.encoder.17.intermediate.dense',
                        'l_5': 'roberta.encoder.17.output.dense',
                        'l_6': 'roberta.encoder.17.output.dropout',
                        'l_7': 'roberta.encoder.17.output.LayerNorm',
                        'l_8': 'roberta.encoder.18.attention.self',
                        'l_9': 'roberta.encoder.18.attention.output.dense',
                        'l_10': 'roberta.encoder.18.attention.output.dropout',
                        'l_11': 'roberta.encoder.18.attention.output.LayerNorm',
                        'l_12': 'roberta.encoder.18.intermediate.dense',
                        'l_13': 'roberta.encoder.18.output.dense',
                        'l_14': 'roberta.encoder.18.output.dropout',
                        'l_15': 'roberta.encoder.18.output.LayerNorm',
                        'l_16': 'roberta.encoder.19.attention.self',
                        'l_17': 'roberta.encoder.19.attention.output.dense',
                        'l_18': 'roberta.encoder.19.attention.output.dropout',
                        'l_19': 'roberta.encoder.19.attention.output.LayerNorm',
                        'l_20': 'roberta.encoder.19.intermediate.dense',
                        'l_21': 'roberta.encoder.19.output.dense',
                        'l_22': 'roberta.encoder.19.output.dropout',
                        'l_23': 'roberta.encoder.19.output.LayerNorm'}

    def forward(self, x0, x1):
        # RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[17]/BertAttention[attention]/BertSelfAttention[self] <=> self.l_0
        # RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[17]/BertAttention[attention]/BertSelfOutput[output]/Linear[dense] <=> self.l_1
        # RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[17]/BertAttention[attention]/BertSelfOutput[output]/Dropout[dropout] <=> self.l_2
        # RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[17]/BertAttention[attention]/BertSelfOutput[output]/LayerNorm[LayerNorm] <=> self.l_3
        # RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[17]/BertIntermediate[intermediate]/Linear[dense] <=> self.l_4
        # RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[17]/BertOutput[output]/Linear[dense] <=> self.l_5
        # RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[17]/BertOutput[output]/Dropout[dropout] <=> self.l_6
        # RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[17]/BertOutput[output]/LayerNorm[LayerNorm] <=> self.l_7
        # RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[18]/BertAttention[attention]/BertSelfAttention[self] <=> self.l_8
        # RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[18]/BertAttention[attention]/BertSelfOutput[output]/Linear[dense] <=> self.l_9
        # RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[18]/BertAttention[attention]/BertSelfOutput[output]/Dropout[dropout] <=> self.l_10
        # RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[18]/BertAttention[attention]/BertSelfOutput[output]/LayerNorm[LayerNorm] <=> self.l_11
        # RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[18]/BertIntermediate[intermediate]/Linear[dense] <=> self.l_12
        # RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[18]/BertOutput[output]/Linear[dense] <=> self.l_13
        # RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[18]/BertOutput[output]/Dropout[dropout] <=> self.l_14
        # RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[18]/BertOutput[output]/LayerNorm[LayerNorm] <=> self.l_15
        # RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[19]/BertAttention[attention]/BertSelfAttention[self] <=> self.l_16
        # RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[19]/BertAttention[attention]/BertSelfOutput[output]/Linear[dense] <=> self.l_17
        # RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[19]/BertAttention[attention]/BertSelfOutput[output]/Dropout[dropout] <=> self.l_18
        # RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[19]/BertAttention[attention]/BertSelfOutput[output]/LayerNorm[LayerNorm] <=> self.l_19
        # RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[19]/BertIntermediate[intermediate]/Linear[dense] <=> self.l_20
        # RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[19]/BertOutput[output]/Linear[dense] <=> self.l_21
        # RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[19]/BertOutput[output]/Dropout[dropout] <=> self.l_22
        # RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[19]/BertOutput[output]/LayerNorm[LayerNorm] <=> self.l_23
        # RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/tuple::__getitem___303 <=> x0
        # RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[16]/BertOutput[output]/LayerNorm[LayerNorm] <=> x1

        # moving inputs to current device no op if already on the correct device
        x0, x1 = move_tensors((x0, x1), self.device)
        t_0 = (x1, x0)
        t_1 = t_0[0]
        t_0 = t_0[1]
        t_2 = self.l_0(t_1, attention_mask=t_0, head_mask=None)
        t_2 = self.l_1(t_2)
        t_2 = self.l_2(t_2)
        t_1 = t_2 + t_1
        t_1 = self.l_3(t_1)
        t_2 = self.l_4(t_1)
        t_2 = torch.nn.functional.gelu(t_2)
        t_2 = self.l_5(t_2)
        t_2 = self.l_6(t_2)
        t_1 = t_2 + t_1
        t_1 = self.l_7(t_1)
        t_0 = (t_1, t_0)
        t_1 = t_0[0]
        t_0 = t_0[1]
        t_2 = self.l_8(t_1, attention_mask=t_0, head_mask=None)
        t_2 = self.l_9(t_2)
        t_2 = self.l_10(t_2)
        t_1 = t_2 + t_1
        t_1 = self.l_11(t_1)
        t_2 = self.l_12(t_1)
        t_2 = torch.nn.functional.gelu(t_2)
        t_2 = self.l_13(t_2)
        t_2 = self.l_14(t_2)
        t_1 = t_2 + t_1
        t_1 = self.l_15(t_1)
        t_0 = (t_1, t_0)
        t_1 = t_0[0]
        t_0 = t_0[1]
        t_2 = self.l_16(t_1, attention_mask=t_0, head_mask=None)
        t_2 = self.l_17(t_2)
        t_2 = self.l_18(t_2)
        t_1 = t_2 + t_1
        t_1 = self.l_19(t_1)
        t_2 = self.l_20(t_1)
        t_2 = torch.nn.functional.gelu(t_2)
        t_2 = self.l_21(t_2)
        t_2 = self.l_22(t_2)
        t_1 = t_2 + t_1
        t_1 = self.l_23(t_1)
        t_0 = (t_1, t_0)
        t_1 = t_0[0]
        t_0 = t_0[1]
        # returning:
        # RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/tuple::__getitem___369
        # RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/tuple::__getitem___371
        return (t_1, t_0)

    def state_dict(self,device=None):
        # we return the state dict of this part as it should be in the original model
        return state_dict(self,device=device)

    def load_state_dict(self, state):
        return load_state_dict(self,state)

    def named_parameters(self,recurse=True):
        # we return the named parameters of this part as it should be in the original model
        return named_parameters(self,recurse=recurse)

    def named_buffers(self,recurse=True):
        # we return the named buffers of this part as it should be in the original model
        return named_buffers(self,recurse=recurse)

    def cpu(self):
        return cpu(self)

    def cuda(self,device=None):
        return cuda(self,device=device)

    def to(self, *args, **kwargs):
        return to(self,*args,**kwargs)


class Partition7(nn.Module):
    BASIC_BLOCKS=(
            Linear,
            BertSelfAttention,
            LayerNorm,
            Tanh,
            Dropout,
        )
    LAYER_SCOPES=[
            'RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[20]/BertAttention[attention]/BertSelfAttention[self]',
            'RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[20]/BertAttention[attention]/BertSelfOutput[output]/Linear[dense]',
            'RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[20]/BertAttention[attention]/BertSelfOutput[output]/Dropout[dropout]',
            'RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[20]/BertAttention[attention]/BertSelfOutput[output]/LayerNorm[LayerNorm]',
            'RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[20]/BertIntermediate[intermediate]/Linear[dense]',
            'RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[20]/BertOutput[output]/Linear[dense]',
            'RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[20]/BertOutput[output]/Dropout[dropout]',
            'RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[20]/BertOutput[output]/LayerNorm[LayerNorm]',
            'RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[21]/BertAttention[attention]/BertSelfAttention[self]',
            'RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[21]/BertAttention[attention]/BertSelfOutput[output]/Linear[dense]',
            'RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[21]/BertAttention[attention]/BertSelfOutput[output]/Dropout[dropout]',
            'RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[21]/BertAttention[attention]/BertSelfOutput[output]/LayerNorm[LayerNorm]',
            'RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[21]/BertIntermediate[intermediate]/Linear[dense]',
            'RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[21]/BertOutput[output]/Linear[dense]',
            'RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[21]/BertOutput[output]/Dropout[dropout]',
            'RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[21]/BertOutput[output]/LayerNorm[LayerNorm]',
            'RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[22]/BertAttention[attention]/BertSelfAttention[self]',
            'RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[22]/BertAttention[attention]/BertSelfOutput[output]/Linear[dense]',
            'RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[22]/BertAttention[attention]/BertSelfOutput[output]/Dropout[dropout]',
            'RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[22]/BertAttention[attention]/BertSelfOutput[output]/LayerNorm[LayerNorm]',
            'RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[22]/BertIntermediate[intermediate]/Linear[dense]',
            'RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[22]/BertOutput[output]/Linear[dense]',
            'RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[22]/BertOutput[output]/Dropout[dropout]',
            'RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[22]/BertOutput[output]/LayerNorm[LayerNorm]',
            'RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[23]/BertAttention[attention]/BertSelfAttention[self]',
            'RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[23]/BertAttention[attention]/BertSelfOutput[output]/Linear[dense]',
            'RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[23]/BertAttention[attention]/BertSelfOutput[output]/Dropout[dropout]',
            'RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[23]/BertAttention[attention]/BertSelfOutput[output]/LayerNorm[LayerNorm]',
            'RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[23]/BertIntermediate[intermediate]/Linear[dense]',
            'RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[23]/BertOutput[output]/Linear[dense]',
            'RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[23]/BertOutput[output]/Dropout[dropout]',
            'RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[23]/BertOutput[output]/LayerNorm[LayerNorm]',
            'RobertaForSequenceClassification/RobertaModel[roberta]/BertPooler[pooler]/Linear[dense]',
            'RobertaForSequenceClassification/RobertaModel[roberta]/BertPooler[pooler]/Tanh[activation]',
            'RobertaForSequenceClassification/RobertaClassificationHead[classifier]/Dropout[dropout]',
            'RobertaForSequenceClassification/RobertaClassificationHead[classifier]/Linear[dense]',
            'RobertaForSequenceClassification/RobertaClassificationHead[classifier]/Dropout[dropout]',
            'RobertaForSequenceClassification/RobertaClassificationHead[classifier]/Linear[out_proj]',
        ]
    TENSORS=[
        ]
    def __init__(self, layers, tensors):
        super(Partition7, self).__init__()

        #initialize partition layers
        for idx,layer_scope in enumerate(self.LAYER_SCOPES):
            self.add_module(f'l_{idx}',layers[layer_scope])

        #initialize partition tensors
        b=p=0
        for tensor_scope in self.TENSORS:
            tensor=tensors[tensor_scope]
            if isinstance(tensor,nn.Parameter):
                self.register_parameter(f'p_{p}',tensor)
                p+=1
            else:
                self.register_buffer(f'b_{b}',tensor)
                b+=1

        self.device = torch.device('cuda:7')
        self.lookup = { 'l_0': 'roberta.encoder.20.attention.self',
                        'l_1': 'roberta.encoder.20.attention.output.dense',
                        'l_2': 'roberta.encoder.20.attention.output.dropout',
                        'l_3': 'roberta.encoder.20.attention.output.LayerNorm',
                        'l_4': 'roberta.encoder.20.intermediate.dense',
                        'l_5': 'roberta.encoder.20.output.dense',
                        'l_6': 'roberta.encoder.20.output.dropout',
                        'l_7': 'roberta.encoder.20.output.LayerNorm',
                        'l_8': 'roberta.encoder.21.attention.self',
                        'l_9': 'roberta.encoder.21.attention.output.dense',
                        'l_10': 'roberta.encoder.21.attention.output.dropout',
                        'l_11': 'roberta.encoder.21.attention.output.LayerNorm',
                        'l_12': 'roberta.encoder.21.intermediate.dense',
                        'l_13': 'roberta.encoder.21.output.dense',
                        'l_14': 'roberta.encoder.21.output.dropout',
                        'l_15': 'roberta.encoder.21.output.LayerNorm',
                        'l_16': 'roberta.encoder.22.attention.self',
                        'l_17': 'roberta.encoder.22.attention.output.dense',
                        'l_18': 'roberta.encoder.22.attention.output.dropout',
                        'l_19': 'roberta.encoder.22.attention.output.LayerNorm',
                        'l_20': 'roberta.encoder.22.intermediate.dense',
                        'l_21': 'roberta.encoder.22.output.dense',
                        'l_22': 'roberta.encoder.22.output.dropout',
                        'l_23': 'roberta.encoder.22.output.LayerNorm',
                        'l_24': 'roberta.encoder.23.attention.self',
                        'l_25': 'roberta.encoder.23.attention.output.dense',
                        'l_26': 'roberta.encoder.23.attention.output.dropout',
                        'l_27': 'roberta.encoder.23.attention.output.LayerNorm',
                        'l_28': 'roberta.encoder.23.intermediate.dense',
                        'l_29': 'roberta.encoder.23.output.dense',
                        'l_30': 'roberta.encoder.23.output.dropout',
                        'l_31': 'roberta.encoder.23.output.LayerNorm',
                        'l_32': 'roberta.pooler.dense',
                        'l_33': 'roberta.pooler.activation',
                        'l_34': 'classifier.dropout',
                        'l_35': 'classifier.dense',
                        'l_36': 'classifier.dropout',
                        'l_37': 'classifier.out_proj'}

    def forward(self, x0, x1):
        # RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[20]/BertAttention[attention]/BertSelfAttention[self] <=> self.l_0
        # RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[20]/BertAttention[attention]/BertSelfOutput[output]/Linear[dense] <=> self.l_1
        # RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[20]/BertAttention[attention]/BertSelfOutput[output]/Dropout[dropout] <=> self.l_2
        # RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[20]/BertAttention[attention]/BertSelfOutput[output]/LayerNorm[LayerNorm] <=> self.l_3
        # RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[20]/BertIntermediate[intermediate]/Linear[dense] <=> self.l_4
        # RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[20]/BertOutput[output]/Linear[dense] <=> self.l_5
        # RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[20]/BertOutput[output]/Dropout[dropout] <=> self.l_6
        # RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[20]/BertOutput[output]/LayerNorm[LayerNorm] <=> self.l_7
        # RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[21]/BertAttention[attention]/BertSelfAttention[self] <=> self.l_8
        # RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[21]/BertAttention[attention]/BertSelfOutput[output]/Linear[dense] <=> self.l_9
        # RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[21]/BertAttention[attention]/BertSelfOutput[output]/Dropout[dropout] <=> self.l_10
        # RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[21]/BertAttention[attention]/BertSelfOutput[output]/LayerNorm[LayerNorm] <=> self.l_11
        # RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[21]/BertIntermediate[intermediate]/Linear[dense] <=> self.l_12
        # RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[21]/BertOutput[output]/Linear[dense] <=> self.l_13
        # RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[21]/BertOutput[output]/Dropout[dropout] <=> self.l_14
        # RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[21]/BertOutput[output]/LayerNorm[LayerNorm] <=> self.l_15
        # RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[22]/BertAttention[attention]/BertSelfAttention[self] <=> self.l_16
        # RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[22]/BertAttention[attention]/BertSelfOutput[output]/Linear[dense] <=> self.l_17
        # RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[22]/BertAttention[attention]/BertSelfOutput[output]/Dropout[dropout] <=> self.l_18
        # RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[22]/BertAttention[attention]/BertSelfOutput[output]/LayerNorm[LayerNorm] <=> self.l_19
        # RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[22]/BertIntermediate[intermediate]/Linear[dense] <=> self.l_20
        # RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[22]/BertOutput[output]/Linear[dense] <=> self.l_21
        # RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[22]/BertOutput[output]/Dropout[dropout] <=> self.l_22
        # RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[22]/BertOutput[output]/LayerNorm[LayerNorm] <=> self.l_23
        # RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[23]/BertAttention[attention]/BertSelfAttention[self] <=> self.l_24
        # RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[23]/BertAttention[attention]/BertSelfOutput[output]/Linear[dense] <=> self.l_25
        # RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[23]/BertAttention[attention]/BertSelfOutput[output]/Dropout[dropout] <=> self.l_26
        # RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[23]/BertAttention[attention]/BertSelfOutput[output]/LayerNorm[LayerNorm] <=> self.l_27
        # RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[23]/BertIntermediate[intermediate]/Linear[dense] <=> self.l_28
        # RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[23]/BertOutput[output]/Linear[dense] <=> self.l_29
        # RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[23]/BertOutput[output]/Dropout[dropout] <=> self.l_30
        # RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[23]/BertOutput[output]/LayerNorm[LayerNorm] <=> self.l_31
        # RobertaForSequenceClassification/RobertaModel[roberta]/BertPooler[pooler]/Linear[dense] <=> self.l_32
        # RobertaForSequenceClassification/RobertaModel[roberta]/BertPooler[pooler]/Tanh[activation] <=> self.l_33
        # RobertaForSequenceClassification/RobertaClassificationHead[classifier]/Dropout[dropout] <=> self.l_34
        # RobertaForSequenceClassification/RobertaClassificationHead[classifier]/Linear[dense] <=> self.l_35
        # RobertaForSequenceClassification/RobertaClassificationHead[classifier]/Dropout[dropout] <=> self.l_36
        # RobertaForSequenceClassification/RobertaClassificationHead[classifier]/Linear[out_proj] <=> self.l_37
        # RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/tuple::__getitem___369 <=> x0
        # RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/tuple::__getitem___371 <=> x1

        # moving inputs to current device no op if already on the correct device
        x0, x1 = move_tensors((x0, x1), self.device)
        t_0 = self.l_0(x0, attention_mask=x1, head_mask=None)
        t_0 = self.l_1(t_0)
        t_0 = self.l_2(t_0)
        t_0 = t_0 + x0
        t_0 = self.l_3(t_0)
        t_1 = self.l_4(t_0)
        t_1 = torch.nn.functional.gelu(t_1)
        t_1 = self.l_5(t_1)
        t_1 = self.l_6(t_1)
        t_0 = t_1 + t_0
        t_0 = self.l_7(t_0)
        t_0 = (t_0, x1)
        t_1 = t_0[0]
        t_0 = t_0[1]
        t_2 = self.l_8(t_1, attention_mask=t_0, head_mask=None)
        t_2 = self.l_9(t_2)
        t_2 = self.l_10(t_2)
        t_1 = t_2 + t_1
        t_1 = self.l_11(t_1)
        t_2 = self.l_12(t_1)
        t_2 = torch.nn.functional.gelu(t_2)
        t_2 = self.l_13(t_2)
        t_2 = self.l_14(t_2)
        t_1 = t_2 + t_1
        t_1 = self.l_15(t_1)
        t_0 = (t_1, t_0)
        t_1 = t_0[0]
        t_0 = t_0[1]
        t_2 = self.l_16(t_1, attention_mask=t_0, head_mask=None)
        t_2 = self.l_17(t_2)
        t_2 = self.l_18(t_2)
        t_1 = t_2 + t_1
        t_1 = self.l_19(t_1)
        t_2 = self.l_20(t_1)
        t_2 = torch.nn.functional.gelu(t_2)
        t_2 = self.l_21(t_2)
        t_2 = self.l_22(t_2)
        t_1 = t_2 + t_1
        t_1 = self.l_23(t_1)
        t_0 = (t_1, t_0)
        t_1 = t_0[0]
        t_0 = t_0[1]
        t_2 = self.l_24(t_1, attention_mask=t_0, head_mask=None)
        t_2 = self.l_25(t_2)
        t_2 = self.l_26(t_2)
        t_1 = t_2 + t_1
        t_1 = self.l_27(t_1)
        t_2 = self.l_28(t_1)
        t_2 = torch.nn.functional.gelu(t_2)
        t_2 = self.l_29(t_2)
        t_2 = self.l_30(t_2)
        t_1 = t_2 + t_1
        t_1 = self.l_31(t_1)
        t_0 = (t_1, t_0)
        t_1 = t_0[0]
        t_0 = t_0[1]
        t_2 = slice(None, None, None)
        t_2 = (t_2, 0)
        t_2 = t_1[t_2]
        t_2 = self.l_32(t_2)
        t_2 = self.l_33(t_2)
        t_2 = (t_1, t_2)
        t_2 = t_2[0]
        t_1 = slice(None, None, None)
        t_3 = slice(None, None, None)
        t_3 = (t_1, 0, t_3)
        t_3 = t_2[t_3]
        t_3 = self.l_34(t_3)
        t_3 = self.l_35(t_3)
        t_3 = torch.tanh(t_3)
        t_3 = self.l_36(t_3)
        t_3 = self.l_37(t_3)
        # returning:
        # RobertaForSequenceClassification/RobertaClassificationHead[classifier]/Linear[out_proj]
        return (t_3,)

    def state_dict(self,device=None):
        # we return the state dict of this part as it should be in the original model
        return state_dict(self,device=device)

    def load_state_dict(self, state):
        return load_state_dict(self,state)

    def named_parameters(self,recurse=True):
        # we return the named parameters of this part as it should be in the original model
        return named_parameters(self,recurse=recurse)

    def named_buffers(self,recurse=True):
        # we return the named buffers of this part as it should be in the original model
        return named_buffers(self,recurse=recurse)

    def cpu(self):
        return cpu(self)

    def cuda(self,device=None):
        return cuda(self,device=device)

    def to(self, *args, **kwargs):
        return to(self,*args,**kwargs)


def traverse_model(module: nn.Module, depth: int, prefix: Optional[str] = None,
                   basic_blocks: Tuple[nn.Module] = (), full: bool = False) -> Iterator[Tuple[nn.Module, str, nn.Module]]:
    '''
    iterate over model layers yielding the layer,layer_scope,encasing_module
    Parameters:
    -----------
    model:
        the model to iterate over
    depth:
        how far down in the model tree to go
    basic_blocks:
        a list of modules that if encountered will not be broken down
    full:
        whether to yield only layers specified by the depth and basick_block options or to yield all layers
    '''
    if prefix is None:
        prefix = type(module).__name__

    for name, sub_module in module.named_children():
        scope = prefix + "/" + type(sub_module).__name__ + f"[{name}]"
        if len(list(sub_module.children())) == 0 or isinstance(sub_module, tuple(basic_blocks)) or depth == 0:
            if full:
                yield sub_module, scope, module, True
            else:
                yield sub_module, scope, module
        else:
            if full:
                yield sub_module, scope, module, False
            yield from traverse_model(sub_module, depth - 1, scope, basic_blocks, full)


def layerDict(model: nn.Module, depth=1000, basic_blocks=()) -> Dict[str, nn.Module]:
    return {s: l for l, s, _ in traverse_model(model, depth, basic_blocks=basic_blocks)}


def traverse_params_buffs(module: nn.Module, prefix: Optional[str] = None) -> Iterator[Tuple[torch.tensor, str]]:
    '''
    iterate over model's buffers and parameters yielding obj,obj_scope

    Parameters:
    -----------
    model:
        the model to iterate over
    '''
    if prefix is None:
        prefix = type(module).__name__

    # params
    for param_name, param in module.named_parameters(recurse=False):
        param_scope = f"{prefix}/{type(param).__name__}[{param_name}]"
        yield param, param_scope

    # buffs
    for buffer_name, buffer in module.named_buffers(recurse=False):
        buffer_scope = f"{prefix}/{type(buffer).__name__}[{buffer_name}]"
        yield buffer, buffer_scope

    # recurse
    for name, sub_module in module.named_children():
        yield from traverse_params_buffs(sub_module, prefix + "/" + type(sub_module).__name__ + f"[{name}]")


def tensorDict(model: nn.Module) -> OrderedDict[str, Tensor]:
    return collections.OrderedDict((s, t)for t, s in traverse_params_buffs(model))


def move_tensors(ts, device):
    def move(t):
        if isinstance(t, (nn.Module, Tensor)):
            return t.to(device)
        return t

    return nested_map(move, ts)


def nested_map(func, ts,full=False):
    if isinstance(ts, torch.Size):
        # size is inheriting from tuple which is stupid
        return func(ts)
    elif isinstance(ts, (list, tuple, set)):
        return type(ts)(nested_map(func, t,full=full) for t in ts)
    elif isinstance(ts, dict):
        return {k: nested_map(func, v,full=full) for k, v in ts.items()}
    elif isinstance(ts, slice) and full:
        start = nested_map(func, ts.start,full=full)
        stop = nested_map(func, ts.stop,full=full)
        step = nested_map(func, ts.step,full=full)
        return slice(start, stop, step)
    return func(ts)


def state_dict(partition, device=None):
    # we return the state dict of this part as it should be in the original model
    state = nn.Module.state_dict(partition)
    lookup = partition.lookup
    result = dict()
    for k, v in state.items():
        if k in lookup:
            result[lookup[k]] = v if device is None else v.to(device)
        else:
            assert '.' in k
            split_idx = k.find('.')
            new_k = lookup[k[:split_idx]] + k[split_idx:]
            result[new_k] = v if device is None else v.to(device)
    return result


def load_state_dict(partition, state):
    reverse_lookup = {v: k for k, v in partition.lookup.items()}
    device = partition.device
    keys = list(partition.state_dict(None).keys())
    new_state = dict()
    for k in keys:
        if k in reverse_lookup:
            new_state[reverse_lookup[k]] = state[k].to(device)
            continue
        idx = k.rfind(".")
        to_replace = k[:idx]
        if to_replace in reverse_lookup:
            key = reverse_lookup[to_replace] + k[idx:]
            new_state[key] = state[k].to(device)
    nn.Module.load_state_dict(partition, new_state, strict=True)


def named_buffers(partition, recurse=True):
    # we return the named buffers of this part as it should be in the original model
    params = nn.Module.named_buffers(partition, recurse=recurse)
    lookup = partition.lookup
    for k, v in params:
        if k in lookup:
            yield (lookup[k], v)
        else:
            assert '.' in k
            split_idx = k.find('.')
            new_k = lookup[k[:split_idx]] + k[split_idx:]
            yield (new_k, v)


def named_parameters(partition, recurse=True):
    # we return the named parameters of this part as it should be in the original model
    params = nn.Module.named_parameters(partition, recurse=recurse)
    lookup = partition.lookup
    for k, v in params:
        if k in lookup:
            yield (lookup[k], v)
        else:
            assert '.' in k
            split_idx = k.find('.')
            new_k = lookup[k[:split_idx]] + k[split_idx:]
            yield (new_k, v)


def cpu(partition):
    partition.device = torch.device('cpu')
    return nn.Module.cpu(partition)


def cuda(partition, device=None):
    if device is None:
        device = torch.cuda.current_device()
    partition.device = torch.device(device)
    return nn.Module.cuda(partition, partition.device)


def to(partition, *args, **kwargs):
    device = None
    if 'device' in kwargs:
        device = kwargs['device']
    elif 'tensor' in kwargs:
        device = kwargs['tensor'].device
    if args:
        if isinstance(args[0], (torch.device, int, str)):
            device = args[0]
        if torch.is_tensor(args[0]):
            device = args[0].device
    if not (device is None):
        partition.device = torch.device(device)
    return nn.Module.to(partition, *args, **kwargs)

"""analysis summary
-I- Printing Report
Number of stages: 8
cutting edges are edges between partitions
number of cutting edges: 16

backward times include recomputation
Analysis for async_pipeline=True: last partition will not do recomputation.

real times are based on real measurements of execution time of generated partitions ms
forward {0: 23.8, 1: 33.1, 2: 33.06, 3: 33.11, 4: 33.23, 5: 33.14, 6: 33.11, 7: 41.13}
backward {0: 61.45, 1: 91.34, 2: 90.35, 3: 90.9, 4: 91.18, 5: 91.33, 6: 90.74, 7: 77.96}

balance is ratio of computation time between fastest and slowest parts. (between 0 and 1 higher is better)

real balance:
forward 0.579
backward 0.673

Assuming bandwidth of 11.0 GBps between GPUs

communication volumes size of activations of each partition
0: input size:'0.07 MB', recieve_time:'0.01 ms', out:'16.79 MB', send time:'1.53 ms'
1: input size:'16.79 MB', recieve_time:'1.53 ms', out:'16.79 MB', send time:'1.53 ms'
2: input size:'16.79 MB', recieve_time:'1.53 ms', out:'16.79 MB', send time:'1.53 ms'
3: input size:'16.79 MB', recieve_time:'1.53 ms', out:'16.79 MB', send time:'1.53 ms'
4: input size:'16.79 MB', recieve_time:'1.53 ms', out:'16.79 MB', send time:'1.53 ms'
5: input size:'16.79 MB', recieve_time:'1.53 ms', out:'16.79 MB', send time:'1.53 ms'
6: input size:'16.79 MB', recieve_time:'1.53 ms', out:'16.79 MB', send time:'1.53 ms'
7: input size:'16.79 MB', recieve_time:'1.53 ms', out:'0.00 MB', send time:'0.00 ms'

Compuatation Communication ratio (comp/(comp+comm)):
forward {0: 0.94, 1: 0.95, 2: 0.95, 3: 0.95, 4: 0.95, 5: 0.95, 6: 0.95, 7: 1.0} 
backward {0: 1.0, 1: 0.98, 2: 0.98, 3: 0.98, 4: 0.98, 5: 0.98, 6: 0.98, 7: 0.98}

Pipeline Slowdown: (compared to sequential executation with no communication, and same recompute policy)
forward 1.301
backward 1.083

Expected utilization by partition
forward {0: 0.54, 1: 0.76, 2: 0.76, 3: 0.76, 4: 0.77, 5: 0.77, 6: 0.77, 7: 1.0}
backward {0: 0.67, 1: 0.98, 2: 0.97, 3: 0.98, 4: 0.98, 5: 0.98, 6: 0.97, 7: 0.83}

worstcase: bwd: 91.336 fwd: 41.129
expected_speedup_compared_to_seq_no_recomp_no_comm: 5.454
Expected speedup for 8 partitions is: 6.952
"""