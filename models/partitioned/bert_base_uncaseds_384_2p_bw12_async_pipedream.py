"""AutoGenerated with:
python /home/saareliad/workspace/FTPipe/autopipe/partition.py bert_squad --n_partitions 2 --partitioning_batch_size 4 --analysis_batch_size 4 --n_iter 10 --model_name_or_path bert-base-uncased --do_lower_case --train_file /home_local/saareliad/data/squad1/train-v1.1.json --max_seq_length 384 --doc_stride 128 --partitioning_method pipedream --preset ftpipe
"""
import torch.functional
import math
import torch
import torch.nn.functional
from torch import Tensor
import torch.nn as nn
from itertools import chain
from typing import Optional, Tuple, Iterator, Iterable, OrderedDict, Dict
import collections

from typing import Type
from torch.nn.modules.activation import Softmax
from torch.nn.modules.linear import Linear
from torch.nn.modules.activation import Tanh
from models.normal.NLP_models.modeling_bert_old import Gelu
from torch.nn.modules.sparse import Embedding
from torch.nn.modules.normalization import LayerNorm
from torch.nn.modules.dropout import Dropout
# this is an auto generated file do not edit unless you know what you are doing


# partition adjacency
# model inputs {0}
# partition 0 {'inputs': {'token_type_ids', 'input_ids', 'attention_mask'}, 'outputs': {1}}
# partition 1 {'inputs': {0}, 'outputs': {'output'}}
# model outputs {1}


def create_pipeline_configuration(DEBUG=False, batch_size=4):
    config = {
        'batch_dim': 0,
        'depth': 10000,
        'basic_blocks': (Softmax,Linear,Tanh,Gelu,Embedding,LayerNorm,Dropout),
        'model_inputs': {
            'attention_mask': {
                'shape': torch.Size([4, 384]),
                'dtype': torch.int64,
                'is_batched': True,
                'used_by': [0]},
            'input_ids': {
                'shape': torch.Size([4, 384]),
                'dtype': torch.int64,
                'is_batched': True,
                'used_by': [0]},
            'token_type_ids': {
                'shape': torch.Size([4, 384]),
                'dtype': torch.int64,
                'is_batched': True,
                'used_by': [0]}},
        'model_outputs': {
            'BertForQuestionAnswering/Linear[qa_outputs]': {
                'shape': torch.Size([4, 384, 2]),
                'dtype': torch.float32,
                'is_batched': True,
                'created_by': 1}},
        'stages': {
            0: {
                'stage_cls': Partition0,
                'inputs': {
                    'attention_mask': {
                        'shape': torch.Size([4, 384]),
                        'dtype': torch.int64,
                        'req_grad': False,
                        'is_batched': True,
                        'created_by': -1},
                    'input_ids': {
                        'shape': torch.Size([4, 384]),
                        'dtype': torch.int64,
                        'req_grad': False,
                        'is_batched': True,
                        'created_by': -1},
                    'token_type_ids': {
                        'shape': torch.Size([4, 384]),
                        'dtype': torch.int64,
                        'req_grad': False,
                        'is_batched': True,
                        'created_by': -1}},
                'outputs': {
                    'BertForQuestionAnswering/BertModel[bert]/Tensor::__mul___12': {
                        'shape': torch.Size([4, 1, 1, 384]),
                        'dtype': torch.float32,
                        'req_grad': False,
                        'is_batched': True,
                        'used_by': [1]},
                    'BertForQuestionAnswering/BertModel[bert]/BertEncoder[encoder]/BertLayer[4]/BertOutput[output]/LayerNorm[LayerNorm]': {
                        'shape': torch.Size([4, 384, 768]),
                        'dtype': torch.float32,
                        'req_grad': True,
                        'is_batched': True,
                        'used_by': [1]},
                    'BertForQuestionAnswering/BertModel[bert]/BertEncoder[encoder]/BertLayer[5]/BertAttention[attention]/BertSelfAttention[self]/Tensor::permute_582': {
                        'shape': torch.Size([4, 12, 384, 64]),
                        'dtype': torch.float32,
                        'req_grad': True,
                        'is_batched': True,
                        'used_by': [1]},
                    'BertForQuestionAnswering/BertModel[bert]/BertEncoder[encoder]/BertLayer[5]/BertAttention[attention]/BertSelfAttention[self]/Softmax[softmax]': {
                        'shape': torch.Size([4, 12, 384, 384]),
                        'dtype': torch.float32,
                        'req_grad': True,
                        'is_batched': True,
                        'used_by': [1]}},
                'devices': ['cpu' if DEBUG else 'cuda:0'],
                'stage_depth': 1},
            1: {
                'stage_cls': Partition1,
                'inputs': {
                    'BertForQuestionAnswering/BertModel[bert]/Tensor::__mul___12': {
                        'shape': torch.Size([4, 1, 1, 384]),
                        'dtype': torch.float32,
                        'req_grad': False,
                        'is_batched': True,
                        'created_by': 0},
                    'BertForQuestionAnswering/BertModel[bert]/BertEncoder[encoder]/BertLayer[4]/BertOutput[output]/LayerNorm[LayerNorm]': {
                        'shape': torch.Size([4, 384, 768]),
                        'dtype': torch.float32,
                        'req_grad': True,
                        'is_batched': True,
                        'created_by': 0},
                    'BertForQuestionAnswering/BertModel[bert]/BertEncoder[encoder]/BertLayer[5]/BertAttention[attention]/BertSelfAttention[self]/Tensor::permute_582': {
                        'shape': torch.Size([4, 12, 384, 64]),
                        'dtype': torch.float32,
                        'req_grad': True,
                        'is_batched': True,
                        'created_by': 0},
                    'BertForQuestionAnswering/BertModel[bert]/BertEncoder[encoder]/BertLayer[5]/BertAttention[attention]/BertSelfAttention[self]/Softmax[softmax]': {
                        'shape': torch.Size([4, 12, 384, 384]),
                        'dtype': torch.float32,
                        'req_grad': True,
                        'is_batched': True,
                        'created_by': 0}},
                'outputs': {
                    'BertForQuestionAnswering/Linear[qa_outputs]': {
                        'shape': torch.Size([4, 384, 2]),
                        'dtype': torch.float32,
                        'req_grad': True,
                        'is_batched': True,
                        'used_by': [-1]}},
                'devices': ['cpu' if DEBUG else 'cuda:1'],
                'stage_depth': 0}}}
    
    
    # switching batch size
    batch_dim = config['batch_dim']
    for d in chain(config['model_inputs'].values(),config['model_outputs'].values()):
        if d['is_batched']:
            shape = d['shape']
            d['shape'] = torch.Size(shape[:batch_dim] + (batch_size,) + shape[batch_dim+1:])
    
    for s in config['stages'].values():
        for d in chain(s['inputs'].values(),s['outputs'].values()):
            if d['is_batched']:
                shape = d['shape']
                d['shape'] = torch.Size(shape[:batch_dim] + (batch_size,) + shape[batch_dim+1:])
    
    return config

class Partition0(nn.Module):
    LAYER_SCOPES = [
            'BertForQuestionAnswering/BertModel[bert]/BertEmbeddings[embeddings]/Embedding[word_embeddings]',
            'BertForQuestionAnswering/BertModel[bert]/BertEmbeddings[embeddings]/Embedding[position_embeddings]',
            'BertForQuestionAnswering/BertModel[bert]/BertEmbeddings[embeddings]/Embedding[token_type_embeddings]',
            'BertForQuestionAnswering/BertModel[bert]/BertEmbeddings[embeddings]/LayerNorm[LayerNorm]',
            'BertForQuestionAnswering/BertModel[bert]/BertEmbeddings[embeddings]/Dropout[dropout]',
            'BertForQuestionAnswering/BertModel[bert]/BertEncoder[encoder]/BertLayer[0]/BertAttention[attention]/BertSelfAttention[self]/Linear[query]',
            'BertForQuestionAnswering/BertModel[bert]/BertEncoder[encoder]/BertLayer[0]/BertAttention[attention]/BertSelfAttention[self]/Linear[key]',
            'BertForQuestionAnswering/BertModel[bert]/BertEncoder[encoder]/BertLayer[0]/BertAttention[attention]/BertSelfAttention[self]/Linear[value]',
            'BertForQuestionAnswering/BertModel[bert]/BertEncoder[encoder]/BertLayer[0]/BertAttention[attention]/BertSelfAttention[self]/Softmax[softmax]',
            'BertForQuestionAnswering/BertModel[bert]/BertEncoder[encoder]/BertLayer[0]/BertAttention[attention]/BertSelfAttention[self]/Dropout[dropout]',
            'BertForQuestionAnswering/BertModel[bert]/BertEncoder[encoder]/BertLayer[0]/BertAttention[attention]/BertSelfOutput[output]/Linear[dense]',
            'BertForQuestionAnswering/BertModel[bert]/BertEncoder[encoder]/BertLayer[0]/BertAttention[attention]/BertSelfOutput[output]/Dropout[dropout]',
            'BertForQuestionAnswering/BertModel[bert]/BertEncoder[encoder]/BertLayer[0]/BertAttention[attention]/BertSelfOutput[output]/LayerNorm[LayerNorm]',
            'BertForQuestionAnswering/BertModel[bert]/BertEncoder[encoder]/BertLayer[0]/BertIntermediate[intermediate]/Linear[dense]',
            'BertForQuestionAnswering/BertModel[bert]/BertEncoder[encoder]/BertLayer[0]/BertIntermediate[intermediate]/Gelu[intermediate_act_fn]',
            'BertForQuestionAnswering/BertModel[bert]/BertEncoder[encoder]/BertLayer[0]/BertOutput[output]/Linear[dense]',
            'BertForQuestionAnswering/BertModel[bert]/BertEncoder[encoder]/BertLayer[0]/BertOutput[output]/Dropout[dropout]',
            'BertForQuestionAnswering/BertModel[bert]/BertEncoder[encoder]/BertLayer[0]/BertOutput[output]/LayerNorm[LayerNorm]',
            'BertForQuestionAnswering/BertModel[bert]/BertEncoder[encoder]/BertLayer[1]/BertAttention[attention]/BertSelfAttention[self]/Linear[query]',
            'BertForQuestionAnswering/BertModel[bert]/BertEncoder[encoder]/BertLayer[1]/BertAttention[attention]/BertSelfAttention[self]/Linear[key]',
            'BertForQuestionAnswering/BertModel[bert]/BertEncoder[encoder]/BertLayer[1]/BertAttention[attention]/BertSelfAttention[self]/Linear[value]',
            'BertForQuestionAnswering/BertModel[bert]/BertEncoder[encoder]/BertLayer[1]/BertAttention[attention]/BertSelfAttention[self]/Softmax[softmax]',
            'BertForQuestionAnswering/BertModel[bert]/BertEncoder[encoder]/BertLayer[1]/BertAttention[attention]/BertSelfAttention[self]/Dropout[dropout]',
            'BertForQuestionAnswering/BertModel[bert]/BertEncoder[encoder]/BertLayer[1]/BertAttention[attention]/BertSelfOutput[output]/Linear[dense]',
            'BertForQuestionAnswering/BertModel[bert]/BertEncoder[encoder]/BertLayer[1]/BertAttention[attention]/BertSelfOutput[output]/Dropout[dropout]',
            'BertForQuestionAnswering/BertModel[bert]/BertEncoder[encoder]/BertLayer[1]/BertAttention[attention]/BertSelfOutput[output]/LayerNorm[LayerNorm]',
            'BertForQuestionAnswering/BertModel[bert]/BertEncoder[encoder]/BertLayer[1]/BertIntermediate[intermediate]/Linear[dense]',
            'BertForQuestionAnswering/BertModel[bert]/BertEncoder[encoder]/BertLayer[1]/BertIntermediate[intermediate]/Gelu[intermediate_act_fn]',
            'BertForQuestionAnswering/BertModel[bert]/BertEncoder[encoder]/BertLayer[1]/BertOutput[output]/Linear[dense]',
            'BertForQuestionAnswering/BertModel[bert]/BertEncoder[encoder]/BertLayer[1]/BertOutput[output]/Dropout[dropout]',
            'BertForQuestionAnswering/BertModel[bert]/BertEncoder[encoder]/BertLayer[1]/BertOutput[output]/LayerNorm[LayerNorm]',
            'BertForQuestionAnswering/BertModel[bert]/BertEncoder[encoder]/BertLayer[2]/BertAttention[attention]/BertSelfAttention[self]/Linear[query]',
            'BertForQuestionAnswering/BertModel[bert]/BertEncoder[encoder]/BertLayer[2]/BertAttention[attention]/BertSelfAttention[self]/Linear[key]',
            'BertForQuestionAnswering/BertModel[bert]/BertEncoder[encoder]/BertLayer[2]/BertAttention[attention]/BertSelfAttention[self]/Linear[value]',
            'BertForQuestionAnswering/BertModel[bert]/BertEncoder[encoder]/BertLayer[2]/BertAttention[attention]/BertSelfAttention[self]/Softmax[softmax]',
            'BertForQuestionAnswering/BertModel[bert]/BertEncoder[encoder]/BertLayer[2]/BertAttention[attention]/BertSelfAttention[self]/Dropout[dropout]',
            'BertForQuestionAnswering/BertModel[bert]/BertEncoder[encoder]/BertLayer[2]/BertAttention[attention]/BertSelfOutput[output]/Linear[dense]',
            'BertForQuestionAnswering/BertModel[bert]/BertEncoder[encoder]/BertLayer[2]/BertAttention[attention]/BertSelfOutput[output]/Dropout[dropout]',
            'BertForQuestionAnswering/BertModel[bert]/BertEncoder[encoder]/BertLayer[2]/BertAttention[attention]/BertSelfOutput[output]/LayerNorm[LayerNorm]',
            'BertForQuestionAnswering/BertModel[bert]/BertEncoder[encoder]/BertLayer[2]/BertIntermediate[intermediate]/Linear[dense]',
            'BertForQuestionAnswering/BertModel[bert]/BertEncoder[encoder]/BertLayer[2]/BertIntermediate[intermediate]/Gelu[intermediate_act_fn]',
            'BertForQuestionAnswering/BertModel[bert]/BertEncoder[encoder]/BertLayer[2]/BertOutput[output]/Linear[dense]',
            'BertForQuestionAnswering/BertModel[bert]/BertEncoder[encoder]/BertLayer[2]/BertOutput[output]/Dropout[dropout]',
            'BertForQuestionAnswering/BertModel[bert]/BertEncoder[encoder]/BertLayer[2]/BertOutput[output]/LayerNorm[LayerNorm]',
            'BertForQuestionAnswering/BertModel[bert]/BertEncoder[encoder]/BertLayer[3]/BertAttention[attention]/BertSelfAttention[self]/Linear[query]',
            'BertForQuestionAnswering/BertModel[bert]/BertEncoder[encoder]/BertLayer[3]/BertAttention[attention]/BertSelfAttention[self]/Linear[key]',
            'BertForQuestionAnswering/BertModel[bert]/BertEncoder[encoder]/BertLayer[3]/BertAttention[attention]/BertSelfAttention[self]/Linear[value]',
            'BertForQuestionAnswering/BertModel[bert]/BertEncoder[encoder]/BertLayer[3]/BertAttention[attention]/BertSelfAttention[self]/Softmax[softmax]',
            'BertForQuestionAnswering/BertModel[bert]/BertEncoder[encoder]/BertLayer[3]/BertAttention[attention]/BertSelfAttention[self]/Dropout[dropout]',
            'BertForQuestionAnswering/BertModel[bert]/BertEncoder[encoder]/BertLayer[3]/BertAttention[attention]/BertSelfOutput[output]/Linear[dense]',
            'BertForQuestionAnswering/BertModel[bert]/BertEncoder[encoder]/BertLayer[3]/BertAttention[attention]/BertSelfOutput[output]/Dropout[dropout]',
            'BertForQuestionAnswering/BertModel[bert]/BertEncoder[encoder]/BertLayer[3]/BertAttention[attention]/BertSelfOutput[output]/LayerNorm[LayerNorm]',
            'BertForQuestionAnswering/BertModel[bert]/BertEncoder[encoder]/BertLayer[3]/BertIntermediate[intermediate]/Linear[dense]',
            'BertForQuestionAnswering/BertModel[bert]/BertEncoder[encoder]/BertLayer[3]/BertIntermediate[intermediate]/Gelu[intermediate_act_fn]',
            'BertForQuestionAnswering/BertModel[bert]/BertEncoder[encoder]/BertLayer[3]/BertOutput[output]/Linear[dense]',
            'BertForQuestionAnswering/BertModel[bert]/BertEncoder[encoder]/BertLayer[3]/BertOutput[output]/Dropout[dropout]',
            'BertForQuestionAnswering/BertModel[bert]/BertEncoder[encoder]/BertLayer[3]/BertOutput[output]/LayerNorm[LayerNorm]',
            'BertForQuestionAnswering/BertModel[bert]/BertEncoder[encoder]/BertLayer[4]/BertAttention[attention]/BertSelfAttention[self]/Linear[query]',
            'BertForQuestionAnswering/BertModel[bert]/BertEncoder[encoder]/BertLayer[4]/BertAttention[attention]/BertSelfAttention[self]/Linear[key]',
            'BertForQuestionAnswering/BertModel[bert]/BertEncoder[encoder]/BertLayer[4]/BertAttention[attention]/BertSelfAttention[self]/Linear[value]',
            'BertForQuestionAnswering/BertModel[bert]/BertEncoder[encoder]/BertLayer[4]/BertAttention[attention]/BertSelfAttention[self]/Softmax[softmax]',
            'BertForQuestionAnswering/BertModel[bert]/BertEncoder[encoder]/BertLayer[4]/BertAttention[attention]/BertSelfAttention[self]/Dropout[dropout]',
            'BertForQuestionAnswering/BertModel[bert]/BertEncoder[encoder]/BertLayer[4]/BertAttention[attention]/BertSelfOutput[output]/Linear[dense]',
            'BertForQuestionAnswering/BertModel[bert]/BertEncoder[encoder]/BertLayer[4]/BertAttention[attention]/BertSelfOutput[output]/Dropout[dropout]',
            'BertForQuestionAnswering/BertModel[bert]/BertEncoder[encoder]/BertLayer[4]/BertAttention[attention]/BertSelfOutput[output]/LayerNorm[LayerNorm]',
            'BertForQuestionAnswering/BertModel[bert]/BertEncoder[encoder]/BertLayer[4]/BertIntermediate[intermediate]/Linear[dense]',
            'BertForQuestionAnswering/BertModel[bert]/BertEncoder[encoder]/BertLayer[4]/BertIntermediate[intermediate]/Gelu[intermediate_act_fn]',
            'BertForQuestionAnswering/BertModel[bert]/BertEncoder[encoder]/BertLayer[4]/BertOutput[output]/Linear[dense]',
            'BertForQuestionAnswering/BertModel[bert]/BertEncoder[encoder]/BertLayer[4]/BertOutput[output]/Dropout[dropout]',
            'BertForQuestionAnswering/BertModel[bert]/BertEncoder[encoder]/BertLayer[4]/BertOutput[output]/LayerNorm[LayerNorm]',
            'BertForQuestionAnswering/BertModel[bert]/BertEncoder[encoder]/BertLayer[5]/BertAttention[attention]/BertSelfAttention[self]/Linear[query]',
            'BertForQuestionAnswering/BertModel[bert]/BertEncoder[encoder]/BertLayer[5]/BertAttention[attention]/BertSelfAttention[self]/Linear[key]',
            'BertForQuestionAnswering/BertModel[bert]/BertEncoder[encoder]/BertLayer[5]/BertAttention[attention]/BertSelfAttention[self]/Linear[value]',
            'BertForQuestionAnswering/BertModel[bert]/BertEncoder[encoder]/BertLayer[5]/BertAttention[attention]/BertSelfAttention[self]/Softmax[softmax]',
        ]
    TENSORS = [
        ]
    def __init__(self, layers, tensors, device='cuda:0'):
        super().__init__()

        # Initialize partition layers
        for idx, layer_scope in enumerate(self.LAYER_SCOPES):
            self.add_module(f'l_{idx}' ,layers[layer_scope])

        # Initialize partition tensors (params and buffs)
        b = p = 0
        for tensor_scope in self.TENSORS:
            tensor = tensors[tensor_scope]
            if isinstance(tensor, nn.Parameter):
                self.register_parameter(f'p_{p}', tensor)
                p += 1
            else:
                self.register_buffer(f'b_{b}', tensor)
                b += 1

        self.device = torch.device(device)
        self.input_structure = [1, 1, 1]
        self.lookup = {'l_0': 'bert.embeddings.word_embeddings',
                        'l_1': 'bert.embeddings.position_embeddings',
                        'l_2': 'bert.embeddings.token_type_embeddings',
                        'l_3': 'bert.embeddings.LayerNorm',
                        'l_4': 'bert.embeddings.dropout',
                        'l_5': 'bert.encoder.0.attention.self.query',
                        'l_6': 'bert.encoder.0.attention.self.key',
                        'l_7': 'bert.encoder.0.attention.self.value',
                        'l_8': 'bert.encoder.0.attention.self.softmax',
                        'l_9': 'bert.encoder.0.attention.self.dropout',
                        'l_10': 'bert.encoder.0.attention.output.dense',
                        'l_11': 'bert.encoder.0.attention.output.dropout',
                        'l_12': 'bert.encoder.0.attention.output.LayerNorm',
                        'l_13': 'bert.encoder.0.intermediate.dense',
                        'l_14': 'bert.encoder.0.intermediate.intermediate_act_fn',
                        'l_15': 'bert.encoder.0.output.dense',
                        'l_16': 'bert.encoder.0.output.dropout',
                        'l_17': 'bert.encoder.0.output.LayerNorm',
                        'l_18': 'bert.encoder.1.attention.self.query',
                        'l_19': 'bert.encoder.1.attention.self.key',
                        'l_20': 'bert.encoder.1.attention.self.value',
                        'l_21': 'bert.encoder.1.attention.self.softmax',
                        'l_22': 'bert.encoder.1.attention.self.dropout',
                        'l_23': 'bert.encoder.1.attention.output.dense',
                        'l_24': 'bert.encoder.1.attention.output.dropout',
                        'l_25': 'bert.encoder.1.attention.output.LayerNorm',
                        'l_26': 'bert.encoder.1.intermediate.dense',
                        'l_27': 'bert.encoder.1.intermediate.intermediate_act_fn',
                        'l_28': 'bert.encoder.1.output.dense',
                        'l_29': 'bert.encoder.1.output.dropout',
                        'l_30': 'bert.encoder.1.output.LayerNorm',
                        'l_31': 'bert.encoder.2.attention.self.query',
                        'l_32': 'bert.encoder.2.attention.self.key',
                        'l_33': 'bert.encoder.2.attention.self.value',
                        'l_34': 'bert.encoder.2.attention.self.softmax',
                        'l_35': 'bert.encoder.2.attention.self.dropout',
                        'l_36': 'bert.encoder.2.attention.output.dense',
                        'l_37': 'bert.encoder.2.attention.output.dropout',
                        'l_38': 'bert.encoder.2.attention.output.LayerNorm',
                        'l_39': 'bert.encoder.2.intermediate.dense',
                        'l_40': 'bert.encoder.2.intermediate.intermediate_act_fn',
                        'l_41': 'bert.encoder.2.output.dense',
                        'l_42': 'bert.encoder.2.output.dropout',
                        'l_43': 'bert.encoder.2.output.LayerNorm',
                        'l_44': 'bert.encoder.3.attention.self.query',
                        'l_45': 'bert.encoder.3.attention.self.key',
                        'l_46': 'bert.encoder.3.attention.self.value',
                        'l_47': 'bert.encoder.3.attention.self.softmax',
                        'l_48': 'bert.encoder.3.attention.self.dropout',
                        'l_49': 'bert.encoder.3.attention.output.dense',
                        'l_50': 'bert.encoder.3.attention.output.dropout',
                        'l_51': 'bert.encoder.3.attention.output.LayerNorm',
                        'l_52': 'bert.encoder.3.intermediate.dense',
                        'l_53': 'bert.encoder.3.intermediate.intermediate_act_fn',
                        'l_54': 'bert.encoder.3.output.dense',
                        'l_55': 'bert.encoder.3.output.dropout',
                        'l_56': 'bert.encoder.3.output.LayerNorm',
                        'l_57': 'bert.encoder.4.attention.self.query',
                        'l_58': 'bert.encoder.4.attention.self.key',
                        'l_59': 'bert.encoder.4.attention.self.value',
                        'l_60': 'bert.encoder.4.attention.self.softmax',
                        'l_61': 'bert.encoder.4.attention.self.dropout',
                        'l_62': 'bert.encoder.4.attention.output.dense',
                        'l_63': 'bert.encoder.4.attention.output.dropout',
                        'l_64': 'bert.encoder.4.attention.output.LayerNorm',
                        'l_65': 'bert.encoder.4.intermediate.dense',
                        'l_66': 'bert.encoder.4.intermediate.intermediate_act_fn',
                        'l_67': 'bert.encoder.4.output.dense',
                        'l_68': 'bert.encoder.4.output.dropout',
                        'l_69': 'bert.encoder.4.output.LayerNorm',
                        'l_70': 'bert.encoder.5.attention.self.query',
                        'l_71': 'bert.encoder.5.attention.self.key',
                        'l_72': 'bert.encoder.5.attention.self.value',
                        'l_73': 'bert.encoder.5.attention.self.softmax'}
        self.to(self.device)

    def forward(self, *args):
        # BertForQuestionAnswering/BertModel[bert]/BertEmbeddings[embeddings]/Embedding[word_embeddings] <=> self.l_0
        # BertForQuestionAnswering/BertModel[bert]/BertEmbeddings[embeddings]/Embedding[position_embeddings] <=> self.l_1
        # BertForQuestionAnswering/BertModel[bert]/BertEmbeddings[embeddings]/Embedding[token_type_embeddings] <=> self.l_2
        # BertForQuestionAnswering/BertModel[bert]/BertEmbeddings[embeddings]/LayerNorm[LayerNorm] <=> self.l_3
        # BertForQuestionAnswering/BertModel[bert]/BertEmbeddings[embeddings]/Dropout[dropout] <=> self.l_4
        # BertForQuestionAnswering/BertModel[bert]/BertEncoder[encoder]/BertLayer[0]/BertAttention[attention]/BertSelfAttention[self]/Linear[query] <=> self.l_5
        # BertForQuestionAnswering/BertModel[bert]/BertEncoder[encoder]/BertLayer[0]/BertAttention[attention]/BertSelfAttention[self]/Linear[key] <=> self.l_6
        # BertForQuestionAnswering/BertModel[bert]/BertEncoder[encoder]/BertLayer[0]/BertAttention[attention]/BertSelfAttention[self]/Linear[value] <=> self.l_7
        # BertForQuestionAnswering/BertModel[bert]/BertEncoder[encoder]/BertLayer[0]/BertAttention[attention]/BertSelfAttention[self]/Softmax[softmax] <=> self.l_8
        # BertForQuestionAnswering/BertModel[bert]/BertEncoder[encoder]/BertLayer[0]/BertAttention[attention]/BertSelfAttention[self]/Dropout[dropout] <=> self.l_9
        # BertForQuestionAnswering/BertModel[bert]/BertEncoder[encoder]/BertLayer[0]/BertAttention[attention]/BertSelfOutput[output]/Linear[dense] <=> self.l_10
        # BertForQuestionAnswering/BertModel[bert]/BertEncoder[encoder]/BertLayer[0]/BertAttention[attention]/BertSelfOutput[output]/Dropout[dropout] <=> self.l_11
        # BertForQuestionAnswering/BertModel[bert]/BertEncoder[encoder]/BertLayer[0]/BertAttention[attention]/BertSelfOutput[output]/LayerNorm[LayerNorm] <=> self.l_12
        # BertForQuestionAnswering/BertModel[bert]/BertEncoder[encoder]/BertLayer[0]/BertIntermediate[intermediate]/Linear[dense] <=> self.l_13
        # BertForQuestionAnswering/BertModel[bert]/BertEncoder[encoder]/BertLayer[0]/BertIntermediate[intermediate]/Gelu[intermediate_act_fn] <=> self.l_14
        # BertForQuestionAnswering/BertModel[bert]/BertEncoder[encoder]/BertLayer[0]/BertOutput[output]/Linear[dense] <=> self.l_15
        # BertForQuestionAnswering/BertModel[bert]/BertEncoder[encoder]/BertLayer[0]/BertOutput[output]/Dropout[dropout] <=> self.l_16
        # BertForQuestionAnswering/BertModel[bert]/BertEncoder[encoder]/BertLayer[0]/BertOutput[output]/LayerNorm[LayerNorm] <=> self.l_17
        # BertForQuestionAnswering/BertModel[bert]/BertEncoder[encoder]/BertLayer[1]/BertAttention[attention]/BertSelfAttention[self]/Linear[query] <=> self.l_18
        # BertForQuestionAnswering/BertModel[bert]/BertEncoder[encoder]/BertLayer[1]/BertAttention[attention]/BertSelfAttention[self]/Linear[key] <=> self.l_19
        # BertForQuestionAnswering/BertModel[bert]/BertEncoder[encoder]/BertLayer[1]/BertAttention[attention]/BertSelfAttention[self]/Linear[value] <=> self.l_20
        # BertForQuestionAnswering/BertModel[bert]/BertEncoder[encoder]/BertLayer[1]/BertAttention[attention]/BertSelfAttention[self]/Softmax[softmax] <=> self.l_21
        # BertForQuestionAnswering/BertModel[bert]/BertEncoder[encoder]/BertLayer[1]/BertAttention[attention]/BertSelfAttention[self]/Dropout[dropout] <=> self.l_22
        # BertForQuestionAnswering/BertModel[bert]/BertEncoder[encoder]/BertLayer[1]/BertAttention[attention]/BertSelfOutput[output]/Linear[dense] <=> self.l_23
        # BertForQuestionAnswering/BertModel[bert]/BertEncoder[encoder]/BertLayer[1]/BertAttention[attention]/BertSelfOutput[output]/Dropout[dropout] <=> self.l_24
        # BertForQuestionAnswering/BertModel[bert]/BertEncoder[encoder]/BertLayer[1]/BertAttention[attention]/BertSelfOutput[output]/LayerNorm[LayerNorm] <=> self.l_25
        # BertForQuestionAnswering/BertModel[bert]/BertEncoder[encoder]/BertLayer[1]/BertIntermediate[intermediate]/Linear[dense] <=> self.l_26
        # BertForQuestionAnswering/BertModel[bert]/BertEncoder[encoder]/BertLayer[1]/BertIntermediate[intermediate]/Gelu[intermediate_act_fn] <=> self.l_27
        # BertForQuestionAnswering/BertModel[bert]/BertEncoder[encoder]/BertLayer[1]/BertOutput[output]/Linear[dense] <=> self.l_28
        # BertForQuestionAnswering/BertModel[bert]/BertEncoder[encoder]/BertLayer[1]/BertOutput[output]/Dropout[dropout] <=> self.l_29
        # BertForQuestionAnswering/BertModel[bert]/BertEncoder[encoder]/BertLayer[1]/BertOutput[output]/LayerNorm[LayerNorm] <=> self.l_30
        # BertForQuestionAnswering/BertModel[bert]/BertEncoder[encoder]/BertLayer[2]/BertAttention[attention]/BertSelfAttention[self]/Linear[query] <=> self.l_31
        # BertForQuestionAnswering/BertModel[bert]/BertEncoder[encoder]/BertLayer[2]/BertAttention[attention]/BertSelfAttention[self]/Linear[key] <=> self.l_32
        # BertForQuestionAnswering/BertModel[bert]/BertEncoder[encoder]/BertLayer[2]/BertAttention[attention]/BertSelfAttention[self]/Linear[value] <=> self.l_33
        # BertForQuestionAnswering/BertModel[bert]/BertEncoder[encoder]/BertLayer[2]/BertAttention[attention]/BertSelfAttention[self]/Softmax[softmax] <=> self.l_34
        # BertForQuestionAnswering/BertModel[bert]/BertEncoder[encoder]/BertLayer[2]/BertAttention[attention]/BertSelfAttention[self]/Dropout[dropout] <=> self.l_35
        # BertForQuestionAnswering/BertModel[bert]/BertEncoder[encoder]/BertLayer[2]/BertAttention[attention]/BertSelfOutput[output]/Linear[dense] <=> self.l_36
        # BertForQuestionAnswering/BertModel[bert]/BertEncoder[encoder]/BertLayer[2]/BertAttention[attention]/BertSelfOutput[output]/Dropout[dropout] <=> self.l_37
        # BertForQuestionAnswering/BertModel[bert]/BertEncoder[encoder]/BertLayer[2]/BertAttention[attention]/BertSelfOutput[output]/LayerNorm[LayerNorm] <=> self.l_38
        # BertForQuestionAnswering/BertModel[bert]/BertEncoder[encoder]/BertLayer[2]/BertIntermediate[intermediate]/Linear[dense] <=> self.l_39
        # BertForQuestionAnswering/BertModel[bert]/BertEncoder[encoder]/BertLayer[2]/BertIntermediate[intermediate]/Gelu[intermediate_act_fn] <=> self.l_40
        # BertForQuestionAnswering/BertModel[bert]/BertEncoder[encoder]/BertLayer[2]/BertOutput[output]/Linear[dense] <=> self.l_41
        # BertForQuestionAnswering/BertModel[bert]/BertEncoder[encoder]/BertLayer[2]/BertOutput[output]/Dropout[dropout] <=> self.l_42
        # BertForQuestionAnswering/BertModel[bert]/BertEncoder[encoder]/BertLayer[2]/BertOutput[output]/LayerNorm[LayerNorm] <=> self.l_43
        # BertForQuestionAnswering/BertModel[bert]/BertEncoder[encoder]/BertLayer[3]/BertAttention[attention]/BertSelfAttention[self]/Linear[query] <=> self.l_44
        # BertForQuestionAnswering/BertModel[bert]/BertEncoder[encoder]/BertLayer[3]/BertAttention[attention]/BertSelfAttention[self]/Linear[key] <=> self.l_45
        # BertForQuestionAnswering/BertModel[bert]/BertEncoder[encoder]/BertLayer[3]/BertAttention[attention]/BertSelfAttention[self]/Linear[value] <=> self.l_46
        # BertForQuestionAnswering/BertModel[bert]/BertEncoder[encoder]/BertLayer[3]/BertAttention[attention]/BertSelfAttention[self]/Softmax[softmax] <=> self.l_47
        # BertForQuestionAnswering/BertModel[bert]/BertEncoder[encoder]/BertLayer[3]/BertAttention[attention]/BertSelfAttention[self]/Dropout[dropout] <=> self.l_48
        # BertForQuestionAnswering/BertModel[bert]/BertEncoder[encoder]/BertLayer[3]/BertAttention[attention]/BertSelfOutput[output]/Linear[dense] <=> self.l_49
        # BertForQuestionAnswering/BertModel[bert]/BertEncoder[encoder]/BertLayer[3]/BertAttention[attention]/BertSelfOutput[output]/Dropout[dropout] <=> self.l_50
        # BertForQuestionAnswering/BertModel[bert]/BertEncoder[encoder]/BertLayer[3]/BertAttention[attention]/BertSelfOutput[output]/LayerNorm[LayerNorm] <=> self.l_51
        # BertForQuestionAnswering/BertModel[bert]/BertEncoder[encoder]/BertLayer[3]/BertIntermediate[intermediate]/Linear[dense] <=> self.l_52
        # BertForQuestionAnswering/BertModel[bert]/BertEncoder[encoder]/BertLayer[3]/BertIntermediate[intermediate]/Gelu[intermediate_act_fn] <=> self.l_53
        # BertForQuestionAnswering/BertModel[bert]/BertEncoder[encoder]/BertLayer[3]/BertOutput[output]/Linear[dense] <=> self.l_54
        # BertForQuestionAnswering/BertModel[bert]/BertEncoder[encoder]/BertLayer[3]/BertOutput[output]/Dropout[dropout] <=> self.l_55
        # BertForQuestionAnswering/BertModel[bert]/BertEncoder[encoder]/BertLayer[3]/BertOutput[output]/LayerNorm[LayerNorm] <=> self.l_56
        # BertForQuestionAnswering/BertModel[bert]/BertEncoder[encoder]/BertLayer[4]/BertAttention[attention]/BertSelfAttention[self]/Linear[query] <=> self.l_57
        # BertForQuestionAnswering/BertModel[bert]/BertEncoder[encoder]/BertLayer[4]/BertAttention[attention]/BertSelfAttention[self]/Linear[key] <=> self.l_58
        # BertForQuestionAnswering/BertModel[bert]/BertEncoder[encoder]/BertLayer[4]/BertAttention[attention]/BertSelfAttention[self]/Linear[value] <=> self.l_59
        # BertForQuestionAnswering/BertModel[bert]/BertEncoder[encoder]/BertLayer[4]/BertAttention[attention]/BertSelfAttention[self]/Softmax[softmax] <=> self.l_60
        # BertForQuestionAnswering/BertModel[bert]/BertEncoder[encoder]/BertLayer[4]/BertAttention[attention]/BertSelfAttention[self]/Dropout[dropout] <=> self.l_61
        # BertForQuestionAnswering/BertModel[bert]/BertEncoder[encoder]/BertLayer[4]/BertAttention[attention]/BertSelfOutput[output]/Linear[dense] <=> self.l_62
        # BertForQuestionAnswering/BertModel[bert]/BertEncoder[encoder]/BertLayer[4]/BertAttention[attention]/BertSelfOutput[output]/Dropout[dropout] <=> self.l_63
        # BertForQuestionAnswering/BertModel[bert]/BertEncoder[encoder]/BertLayer[4]/BertAttention[attention]/BertSelfOutput[output]/LayerNorm[LayerNorm] <=> self.l_64
        # BertForQuestionAnswering/BertModel[bert]/BertEncoder[encoder]/BertLayer[4]/BertIntermediate[intermediate]/Linear[dense] <=> self.l_65
        # BertForQuestionAnswering/BertModel[bert]/BertEncoder[encoder]/BertLayer[4]/BertIntermediate[intermediate]/Gelu[intermediate_act_fn] <=> self.l_66
        # BertForQuestionAnswering/BertModel[bert]/BertEncoder[encoder]/BertLayer[4]/BertOutput[output]/Linear[dense] <=> self.l_67
        # BertForQuestionAnswering/BertModel[bert]/BertEncoder[encoder]/BertLayer[4]/BertOutput[output]/Dropout[dropout] <=> self.l_68
        # BertForQuestionAnswering/BertModel[bert]/BertEncoder[encoder]/BertLayer[4]/BertOutput[output]/LayerNorm[LayerNorm] <=> self.l_69
        # BertForQuestionAnswering/BertModel[bert]/BertEncoder[encoder]/BertLayer[5]/BertAttention[attention]/BertSelfAttention[self]/Linear[query] <=> self.l_70
        # BertForQuestionAnswering/BertModel[bert]/BertEncoder[encoder]/BertLayer[5]/BertAttention[attention]/BertSelfAttention[self]/Linear[key] <=> self.l_71
        # BertForQuestionAnswering/BertModel[bert]/BertEncoder[encoder]/BertLayer[5]/BertAttention[attention]/BertSelfAttention[self]/Linear[value] <=> self.l_72
        # BertForQuestionAnswering/BertModel[bert]/BertEncoder[encoder]/BertLayer[5]/BertAttention[attention]/BertSelfAttention[self]/Softmax[softmax] <=> self.l_73
        # input0 <=> attention_mask
        # input1 <=> input_ids
        # input2 <=> token_type_ids
        attention_mask, input_ids, token_type_ids = unflatten(args,self.input_structure)
        t_0 = self.l_0(input_ids)
        t_1 = self.l_2(token_type_ids)
        t_2 = attention_mask.unsqueeze(1)
        t_2 = t_2.unsqueeze(2)
        t_2 = t_2.to(dtype=torch.float32)
        t_2 = 1.0 - t_2
        t_2 = t_2 * -10000.0
        t_3 = input_ids.size(1)
        t_3 = torch.arange(t_3, dtype=torch.int64, device=self.device)
        t_3 = t_3.unsqueeze(0)
        t_3 = t_3.expand_as(input_ids)
        t_3 = self.l_1(t_3)
        t_3 = t_0 + t_3
        t_1 = t_3 + t_1
        t_1 = self.l_3(t_1)
        t_1 = self.l_4(t_1)
        t_3 = self.l_5(t_1)
        t_0 = self.l_6(t_1)
        t_4 = self.l_7(t_1)
        t_5 = t_3.size()
        t_6 = t_0.size()
        t_7 = t_4.size()
        t_5 = t_5[slice(None, -1, None)]
        t_5 = t_5 + (12, 64)
        t_8 = t_5[0]
        t_9 = t_5[1]
        t_10 = t_5[2]
        t_5 = t_5[3]
        t_5 = t_3.view(t_8, t_9, t_10, t_5)
        t_5 = t_5.permute(0, 2, 1, 3)
        t_6 = t_6[slice(None, -1, None)]
        t_6 = t_6 + (12, 64)
        t_10 = t_6[0]
        t_9 = t_6[1]
        t_8 = t_6[2]
        t_6 = t_6[3]
        t_6 = t_0.view(t_10, t_9, t_8, t_6)
        t_6 = t_6.permute(0, 2, 1, 3)
        t_7 = t_7[slice(None, -1, None)]
        t_7 = t_7 + (12, 64)
        t_8 = t_7[0]
        t_9 = t_7[1]
        t_10 = t_7[2]
        t_7 = t_7[3]
        t_7 = t_4.view(t_8, t_9, t_10, t_7)
        t_7 = t_7.permute(0, 2, 1, 3)
        t_6 = t_6.transpose(-1, -2)
        t_6 = torch.matmul(t_5, t_6)
        t_5 = math.sqrt(64)
        t_5 = t_6 / t_5
        t_5 = t_5 + t_2
        t_5 = self.l_8(t_5)
        t_5 = self.l_9(t_5)
        t_7 = torch.matmul(t_5, t_7)
        t_7 = t_7.permute(0, 2, 1, 3)
        t_7 = t_7.contiguous()
        t_5 = t_7.size()
        t_5 = t_5[slice(None, -2, None)]
        t_5 = t_5 + (768,)
        t_6 = t_5[0]
        t_10 = t_5[1]
        t_5 = t_5[2]
        t_5 = t_7.view(t_6, t_10, t_5)
        t_5 = self.l_10(t_5)
        t_5 = self.l_11(t_5)
        t_1 = t_5 + t_1
        t_1 = self.l_12(t_1)
        t_5 = self.l_13(t_1)
        t_5 = self.l_14(t_5)
        t_5 = self.l_15(t_5)
        t_5 = self.l_16(t_5)
        t_1 = t_5 + t_1
        t_1 = self.l_17(t_1)
        t_5 = self.l_18(t_1)
        t_10 = self.l_19(t_1)
        t_6 = self.l_20(t_1)
        t_7 = t_5.size()
        t_9 = t_10.size()
        t_8 = t_6.size()
        t_7 = t_7[slice(None, -1, None)]
        t_7 = t_7 + (12, 64)
        t_4 = t_7[0]
        t_0 = t_7[1]
        t_3 = t_7[2]
        t_7 = t_7[3]
        t_7 = t_5.view(t_4, t_0, t_3, t_7)
        t_7 = t_7.permute(0, 2, 1, 3)
        t_9 = t_9[slice(None, -1, None)]
        t_9 = t_9 + (12, 64)
        t_3 = t_9[0]
        t_0 = t_9[1]
        t_4 = t_9[2]
        t_9 = t_9[3]
        t_9 = t_10.view(t_3, t_0, t_4, t_9)
        t_9 = t_9.permute(0, 2, 1, 3)
        t_8 = t_8[slice(None, -1, None)]
        t_8 = t_8 + (12, 64)
        t_4 = t_8[0]
        t_0 = t_8[1]
        t_3 = t_8[2]
        t_8 = t_8[3]
        t_8 = t_6.view(t_4, t_0, t_3, t_8)
        t_8 = t_8.permute(0, 2, 1, 3)
        t_9 = t_9.transpose(-1, -2)
        t_9 = torch.matmul(t_7, t_9)
        t_7 = math.sqrt(64)
        t_7 = t_9 / t_7
        t_7 = t_7 + t_2
        t_7 = self.l_21(t_7)
        t_7 = self.l_22(t_7)
        t_8 = torch.matmul(t_7, t_8)
        t_8 = t_8.permute(0, 2, 1, 3)
        t_8 = t_8.contiguous()
        t_7 = t_8.size()
        t_7 = t_7[slice(None, -2, None)]
        t_7 = t_7 + (768,)
        t_9 = t_7[0]
        t_3 = t_7[1]
        t_7 = t_7[2]
        t_7 = t_8.view(t_9, t_3, t_7)
        t_7 = self.l_23(t_7)
        t_7 = self.l_24(t_7)
        t_1 = t_7 + t_1
        t_1 = self.l_25(t_1)
        t_7 = self.l_26(t_1)
        t_7 = self.l_27(t_7)
        t_7 = self.l_28(t_7)
        t_7 = self.l_29(t_7)
        t_1 = t_7 + t_1
        t_1 = self.l_30(t_1)
        t_7 = self.l_31(t_1)
        t_3 = self.l_32(t_1)
        t_9 = self.l_33(t_1)
        t_8 = t_7.size()
        t_0 = t_3.size()
        t_4 = t_9.size()
        t_8 = t_8[slice(None, -1, None)]
        t_8 = t_8 + (12, 64)
        t_6 = t_8[0]
        t_10 = t_8[1]
        t_5 = t_8[2]
        t_8 = t_8[3]
        t_8 = t_7.view(t_6, t_10, t_5, t_8)
        t_8 = t_8.permute(0, 2, 1, 3)
        t_0 = t_0[slice(None, -1, None)]
        t_0 = t_0 + (12, 64)
        t_5 = t_0[0]
        t_10 = t_0[1]
        t_6 = t_0[2]
        t_0 = t_0[3]
        t_0 = t_3.view(t_5, t_10, t_6, t_0)
        t_0 = t_0.permute(0, 2, 1, 3)
        t_4 = t_4[slice(None, -1, None)]
        t_4 = t_4 + (12, 64)
        t_6 = t_4[0]
        t_10 = t_4[1]
        t_5 = t_4[2]
        t_4 = t_4[3]
        t_4 = t_9.view(t_6, t_10, t_5, t_4)
        t_4 = t_4.permute(0, 2, 1, 3)
        t_0 = t_0.transpose(-1, -2)
        t_0 = torch.matmul(t_8, t_0)
        t_8 = math.sqrt(64)
        t_8 = t_0 / t_8
        t_8 = t_8 + t_2
        t_8 = self.l_34(t_8)
        t_8 = self.l_35(t_8)
        t_4 = torch.matmul(t_8, t_4)
        t_4 = t_4.permute(0, 2, 1, 3)
        t_4 = t_4.contiguous()
        t_8 = t_4.size()
        t_8 = t_8[slice(None, -2, None)]
        t_8 = t_8 + (768,)
        t_0 = t_8[0]
        t_5 = t_8[1]
        t_8 = t_8[2]
        t_8 = t_4.view(t_0, t_5, t_8)
        t_8 = self.l_36(t_8)
        t_8 = self.l_37(t_8)
        t_1 = t_8 + t_1
        t_1 = self.l_38(t_1)
        t_8 = self.l_39(t_1)
        t_8 = self.l_40(t_8)
        t_8 = self.l_41(t_8)
        t_8 = self.l_42(t_8)
        t_1 = t_8 + t_1
        t_1 = self.l_43(t_1)
        t_8 = self.l_44(t_1)
        t_5 = self.l_45(t_1)
        t_0 = self.l_46(t_1)
        t_4 = t_8.size()
        t_10 = t_5.size()
        t_6 = t_0.size()
        t_4 = t_4[slice(None, -1, None)]
        t_4 = t_4 + (12, 64)
        t_9 = t_4[0]
        t_3 = t_4[1]
        t_7 = t_4[2]
        t_4 = t_4[3]
        t_4 = t_8.view(t_9, t_3, t_7, t_4)
        t_4 = t_4.permute(0, 2, 1, 3)
        t_10 = t_10[slice(None, -1, None)]
        t_10 = t_10 + (12, 64)
        t_7 = t_10[0]
        t_3 = t_10[1]
        t_9 = t_10[2]
        t_10 = t_10[3]
        t_10 = t_5.view(t_7, t_3, t_9, t_10)
        t_10 = t_10.permute(0, 2, 1, 3)
        t_6 = t_6[slice(None, -1, None)]
        t_6 = t_6 + (12, 64)
        t_9 = t_6[0]
        t_3 = t_6[1]
        t_7 = t_6[2]
        t_6 = t_6[3]
        t_6 = t_0.view(t_9, t_3, t_7, t_6)
        t_6 = t_6.permute(0, 2, 1, 3)
        t_10 = t_10.transpose(-1, -2)
        t_10 = torch.matmul(t_4, t_10)
        t_4 = math.sqrt(64)
        t_4 = t_10 / t_4
        t_4 = t_4 + t_2
        t_4 = self.l_47(t_4)
        t_4 = self.l_48(t_4)
        t_6 = torch.matmul(t_4, t_6)
        t_6 = t_6.permute(0, 2, 1, 3)
        t_6 = t_6.contiguous()
        t_4 = t_6.size()
        t_4 = t_4[slice(None, -2, None)]
        t_4 = t_4 + (768,)
        t_10 = t_4[0]
        t_7 = t_4[1]
        t_4 = t_4[2]
        t_4 = t_6.view(t_10, t_7, t_4)
        t_4 = self.l_49(t_4)
        t_4 = self.l_50(t_4)
        t_1 = t_4 + t_1
        t_1 = self.l_51(t_1)
        t_4 = self.l_52(t_1)
        t_4 = self.l_53(t_4)
        t_4 = self.l_54(t_4)
        t_4 = self.l_55(t_4)
        t_1 = t_4 + t_1
        t_1 = self.l_56(t_1)
        t_4 = self.l_57(t_1)
        t_7 = self.l_58(t_1)
        t_10 = self.l_59(t_1)
        t_6 = t_4.size()
        t_3 = t_7.size()
        t_9 = t_10.size()
        t_6 = t_6[slice(None, -1, None)]
        t_6 = t_6 + (12, 64)
        t_0 = t_6[0]
        t_5 = t_6[1]
        t_8 = t_6[2]
        t_6 = t_6[3]
        t_6 = t_4.view(t_0, t_5, t_8, t_6)
        t_6 = t_6.permute(0, 2, 1, 3)
        t_3 = t_3[slice(None, -1, None)]
        t_3 = t_3 + (12, 64)
        t_8 = t_3[0]
        t_5 = t_3[1]
        t_0 = t_3[2]
        t_3 = t_3[3]
        t_3 = t_7.view(t_8, t_5, t_0, t_3)
        t_3 = t_3.permute(0, 2, 1, 3)
        t_9 = t_9[slice(None, -1, None)]
        t_9 = t_9 + (12, 64)
        t_0 = t_9[0]
        t_5 = t_9[1]
        t_8 = t_9[2]
        t_9 = t_9[3]
        t_9 = t_10.view(t_0, t_5, t_8, t_9)
        t_9 = t_9.permute(0, 2, 1, 3)
        t_3 = t_3.transpose(-1, -2)
        t_3 = torch.matmul(t_6, t_3)
        t_6 = math.sqrt(64)
        t_6 = t_3 / t_6
        t_6 = t_6 + t_2
        t_6 = self.l_60(t_6)
        t_6 = self.l_61(t_6)
        t_9 = torch.matmul(t_6, t_9)
        t_9 = t_9.permute(0, 2, 1, 3)
        t_9 = t_9.contiguous()
        t_6 = t_9.size()
        t_6 = t_6[slice(None, -2, None)]
        t_6 = t_6 + (768,)
        t_3 = t_6[0]
        t_8 = t_6[1]
        t_6 = t_6[2]
        t_6 = t_9.view(t_3, t_8, t_6)
        t_6 = self.l_62(t_6)
        t_6 = self.l_63(t_6)
        t_1 = t_6 + t_1
        t_1 = self.l_64(t_1)
        t_6 = self.l_65(t_1)
        t_6 = self.l_66(t_6)
        t_6 = self.l_67(t_6)
        t_6 = self.l_68(t_6)
        t_1 = t_6 + t_1
        t_1 = self.l_69(t_1)
        t_6 = self.l_70(t_1)
        t_8 = self.l_71(t_1)
        t_3 = self.l_72(t_1)
        t_9 = t_6.size()
        t_5 = t_8.size()
        t_0 = t_3.size()
        t_9 = t_9[slice(None, -1, None)]
        t_9 = t_9 + (12, 64)
        t_10 = t_9[0]
        t_7 = t_9[1]
        t_4 = t_9[2]
        t_9 = t_9[3]
        t_9 = t_6.view(t_10, t_7, t_4, t_9)
        t_9 = t_9.permute(0, 2, 1, 3)
        t_5 = t_5[slice(None, -1, None)]
        t_5 = t_5 + (12, 64)
        t_4 = t_5[0]
        t_7 = t_5[1]
        t_10 = t_5[2]
        t_5 = t_5[3]
        t_5 = t_8.view(t_4, t_7, t_10, t_5)
        t_5 = t_5.permute(0, 2, 1, 3)
        t_0 = t_0[slice(None, -1, None)]
        t_0 = t_0 + (12, 64)
        t_10 = t_0[0]
        t_7 = t_0[1]
        t_4 = t_0[2]
        t_0 = t_0[3]
        t_0 = t_3.view(t_10, t_7, t_4, t_0)
        t_0 = t_0.permute(0, 2, 1, 3)
        t_5 = t_5.transpose(-1, -2)
        t_5 = torch.matmul(t_9, t_5)
        t_9 = math.sqrt(64)
        t_9 = t_5 / t_9
        t_9 = t_9 + t_2
        t_9 = self.l_73(t_9)
        # Returning:
        # BertForQuestionAnswering/BertModel[bert]/Tensor::__mul___12
        # BertForQuestionAnswering/BertModel[bert]/BertEncoder[encoder]/BertLayer[4]/BertOutput[output]/LayerNorm[LayerNorm]
        # BertForQuestionAnswering/BertModel[bert]/BertEncoder[encoder]/BertLayer[5]/BertAttention[attention]/BertSelfAttention[self]/Tensor::permute_582
        # BertForQuestionAnswering/BertModel[bert]/BertEncoder[encoder]/BertLayer[5]/BertAttention[attention]/BertSelfAttention[self]/Softmax[softmax]
        return list(flatten((t_2, t_1, t_0, t_9)))

    def state_dict(self, *args, **kwargs):
        # we return the state dict of this part as it should be in the original model
        return state_dict(self, *args, **kwargs)

    def load_state_dict(self, *args, **kwargs):
        return load_state_dict(self, *args, **kwargs)

    def named_parameters(self, *args, **kwargs):
        # we return the named parameters of this part as it should be in the original model
        return named_parameters(self, *args, **kwargs)

    def named_buffers(self, *args, **kwargs):
        # we return the named buffers of this part as it should be in the original model
        return named_buffers(self, *args, **kwargs)

    def cpu(self):
        return cpu(self)

    def cuda(self, device=None):
        return cuda(self, device=device)

    def to(self, *args, **kwargs):
        return to(self, *args, **kwargs)


class Partition1(nn.Module):
    LAYER_SCOPES = [
            'BertForQuestionAnswering/BertModel[bert]/BertEncoder[encoder]/BertLayer[5]/BertAttention[attention]/BertSelfAttention[self]/Dropout[dropout]',
            'BertForQuestionAnswering/BertModel[bert]/BertEncoder[encoder]/BertLayer[5]/BertAttention[attention]/BertSelfOutput[output]/Linear[dense]',
            'BertForQuestionAnswering/BertModel[bert]/BertEncoder[encoder]/BertLayer[5]/BertAttention[attention]/BertSelfOutput[output]/Dropout[dropout]',
            'BertForQuestionAnswering/BertModel[bert]/BertEncoder[encoder]/BertLayer[5]/BertAttention[attention]/BertSelfOutput[output]/LayerNorm[LayerNorm]',
            'BertForQuestionAnswering/BertModel[bert]/BertEncoder[encoder]/BertLayer[5]/BertIntermediate[intermediate]/Linear[dense]',
            'BertForQuestionAnswering/BertModel[bert]/BertEncoder[encoder]/BertLayer[5]/BertIntermediate[intermediate]/Gelu[intermediate_act_fn]',
            'BertForQuestionAnswering/BertModel[bert]/BertEncoder[encoder]/BertLayer[5]/BertOutput[output]/Linear[dense]',
            'BertForQuestionAnswering/BertModel[bert]/BertEncoder[encoder]/BertLayer[5]/BertOutput[output]/Dropout[dropout]',
            'BertForQuestionAnswering/BertModel[bert]/BertEncoder[encoder]/BertLayer[5]/BertOutput[output]/LayerNorm[LayerNorm]',
            'BertForQuestionAnswering/BertModel[bert]/BertEncoder[encoder]/BertLayer[6]/BertAttention[attention]/BertSelfAttention[self]/Linear[query]',
            'BertForQuestionAnswering/BertModel[bert]/BertEncoder[encoder]/BertLayer[6]/BertAttention[attention]/BertSelfAttention[self]/Linear[key]',
            'BertForQuestionAnswering/BertModel[bert]/BertEncoder[encoder]/BertLayer[6]/BertAttention[attention]/BertSelfAttention[self]/Linear[value]',
            'BertForQuestionAnswering/BertModel[bert]/BertEncoder[encoder]/BertLayer[6]/BertAttention[attention]/BertSelfAttention[self]/Softmax[softmax]',
            'BertForQuestionAnswering/BertModel[bert]/BertEncoder[encoder]/BertLayer[6]/BertAttention[attention]/BertSelfAttention[self]/Dropout[dropout]',
            'BertForQuestionAnswering/BertModel[bert]/BertEncoder[encoder]/BertLayer[6]/BertAttention[attention]/BertSelfOutput[output]/Linear[dense]',
            'BertForQuestionAnswering/BertModel[bert]/BertEncoder[encoder]/BertLayer[6]/BertAttention[attention]/BertSelfOutput[output]/Dropout[dropout]',
            'BertForQuestionAnswering/BertModel[bert]/BertEncoder[encoder]/BertLayer[6]/BertAttention[attention]/BertSelfOutput[output]/LayerNorm[LayerNorm]',
            'BertForQuestionAnswering/BertModel[bert]/BertEncoder[encoder]/BertLayer[6]/BertIntermediate[intermediate]/Linear[dense]',
            'BertForQuestionAnswering/BertModel[bert]/BertEncoder[encoder]/BertLayer[6]/BertIntermediate[intermediate]/Gelu[intermediate_act_fn]',
            'BertForQuestionAnswering/BertModel[bert]/BertEncoder[encoder]/BertLayer[6]/BertOutput[output]/Linear[dense]',
            'BertForQuestionAnswering/BertModel[bert]/BertEncoder[encoder]/BertLayer[6]/BertOutput[output]/Dropout[dropout]',
            'BertForQuestionAnswering/BertModel[bert]/BertEncoder[encoder]/BertLayer[6]/BertOutput[output]/LayerNorm[LayerNorm]',
            'BertForQuestionAnswering/BertModel[bert]/BertEncoder[encoder]/BertLayer[7]/BertAttention[attention]/BertSelfAttention[self]/Linear[query]',
            'BertForQuestionAnswering/BertModel[bert]/BertEncoder[encoder]/BertLayer[7]/BertAttention[attention]/BertSelfAttention[self]/Linear[key]',
            'BertForQuestionAnswering/BertModel[bert]/BertEncoder[encoder]/BertLayer[7]/BertAttention[attention]/BertSelfAttention[self]/Linear[value]',
            'BertForQuestionAnswering/BertModel[bert]/BertEncoder[encoder]/BertLayer[7]/BertAttention[attention]/BertSelfAttention[self]/Softmax[softmax]',
            'BertForQuestionAnswering/BertModel[bert]/BertEncoder[encoder]/BertLayer[7]/BertAttention[attention]/BertSelfAttention[self]/Dropout[dropout]',
            'BertForQuestionAnswering/BertModel[bert]/BertEncoder[encoder]/BertLayer[7]/BertAttention[attention]/BertSelfOutput[output]/Linear[dense]',
            'BertForQuestionAnswering/BertModel[bert]/BertEncoder[encoder]/BertLayer[7]/BertAttention[attention]/BertSelfOutput[output]/Dropout[dropout]',
            'BertForQuestionAnswering/BertModel[bert]/BertEncoder[encoder]/BertLayer[7]/BertAttention[attention]/BertSelfOutput[output]/LayerNorm[LayerNorm]',
            'BertForQuestionAnswering/BertModel[bert]/BertEncoder[encoder]/BertLayer[7]/BertIntermediate[intermediate]/Linear[dense]',
            'BertForQuestionAnswering/BertModel[bert]/BertEncoder[encoder]/BertLayer[7]/BertIntermediate[intermediate]/Gelu[intermediate_act_fn]',
            'BertForQuestionAnswering/BertModel[bert]/BertEncoder[encoder]/BertLayer[7]/BertOutput[output]/Linear[dense]',
            'BertForQuestionAnswering/BertModel[bert]/BertEncoder[encoder]/BertLayer[7]/BertOutput[output]/Dropout[dropout]',
            'BertForQuestionAnswering/BertModel[bert]/BertEncoder[encoder]/BertLayer[7]/BertOutput[output]/LayerNorm[LayerNorm]',
            'BertForQuestionAnswering/BertModel[bert]/BertEncoder[encoder]/BertLayer[8]/BertAttention[attention]/BertSelfAttention[self]/Linear[query]',
            'BertForQuestionAnswering/BertModel[bert]/BertEncoder[encoder]/BertLayer[8]/BertAttention[attention]/BertSelfAttention[self]/Linear[key]',
            'BertForQuestionAnswering/BertModel[bert]/BertEncoder[encoder]/BertLayer[8]/BertAttention[attention]/BertSelfAttention[self]/Linear[value]',
            'BertForQuestionAnswering/BertModel[bert]/BertEncoder[encoder]/BertLayer[8]/BertAttention[attention]/BertSelfAttention[self]/Softmax[softmax]',
            'BertForQuestionAnswering/BertModel[bert]/BertEncoder[encoder]/BertLayer[8]/BertAttention[attention]/BertSelfAttention[self]/Dropout[dropout]',
            'BertForQuestionAnswering/BertModel[bert]/BertEncoder[encoder]/BertLayer[8]/BertAttention[attention]/BertSelfOutput[output]/Linear[dense]',
            'BertForQuestionAnswering/BertModel[bert]/BertEncoder[encoder]/BertLayer[8]/BertAttention[attention]/BertSelfOutput[output]/Dropout[dropout]',
            'BertForQuestionAnswering/BertModel[bert]/BertEncoder[encoder]/BertLayer[8]/BertAttention[attention]/BertSelfOutput[output]/LayerNorm[LayerNorm]',
            'BertForQuestionAnswering/BertModel[bert]/BertEncoder[encoder]/BertLayer[8]/BertIntermediate[intermediate]/Linear[dense]',
            'BertForQuestionAnswering/BertModel[bert]/BertEncoder[encoder]/BertLayer[8]/BertIntermediate[intermediate]/Gelu[intermediate_act_fn]',
            'BertForQuestionAnswering/BertModel[bert]/BertEncoder[encoder]/BertLayer[8]/BertOutput[output]/Linear[dense]',
            'BertForQuestionAnswering/BertModel[bert]/BertEncoder[encoder]/BertLayer[8]/BertOutput[output]/Dropout[dropout]',
            'BertForQuestionAnswering/BertModel[bert]/BertEncoder[encoder]/BertLayer[8]/BertOutput[output]/LayerNorm[LayerNorm]',
            'BertForQuestionAnswering/BertModel[bert]/BertEncoder[encoder]/BertLayer[9]/BertAttention[attention]/BertSelfAttention[self]/Linear[query]',
            'BertForQuestionAnswering/BertModel[bert]/BertEncoder[encoder]/BertLayer[9]/BertAttention[attention]/BertSelfAttention[self]/Linear[key]',
            'BertForQuestionAnswering/BertModel[bert]/BertEncoder[encoder]/BertLayer[9]/BertAttention[attention]/BertSelfAttention[self]/Linear[value]',
            'BertForQuestionAnswering/BertModel[bert]/BertEncoder[encoder]/BertLayer[9]/BertAttention[attention]/BertSelfAttention[self]/Softmax[softmax]',
            'BertForQuestionAnswering/BertModel[bert]/BertEncoder[encoder]/BertLayer[9]/BertAttention[attention]/BertSelfAttention[self]/Dropout[dropout]',
            'BertForQuestionAnswering/BertModel[bert]/BertEncoder[encoder]/BertLayer[9]/BertAttention[attention]/BertSelfOutput[output]/Linear[dense]',
            'BertForQuestionAnswering/BertModel[bert]/BertEncoder[encoder]/BertLayer[9]/BertAttention[attention]/BertSelfOutput[output]/Dropout[dropout]',
            'BertForQuestionAnswering/BertModel[bert]/BertEncoder[encoder]/BertLayer[9]/BertAttention[attention]/BertSelfOutput[output]/LayerNorm[LayerNorm]',
            'BertForQuestionAnswering/BertModel[bert]/BertEncoder[encoder]/BertLayer[9]/BertIntermediate[intermediate]/Linear[dense]',
            'BertForQuestionAnswering/BertModel[bert]/BertEncoder[encoder]/BertLayer[9]/BertIntermediate[intermediate]/Gelu[intermediate_act_fn]',
            'BertForQuestionAnswering/BertModel[bert]/BertEncoder[encoder]/BertLayer[9]/BertOutput[output]/Linear[dense]',
            'BertForQuestionAnswering/BertModel[bert]/BertEncoder[encoder]/BertLayer[9]/BertOutput[output]/Dropout[dropout]',
            'BertForQuestionAnswering/BertModel[bert]/BertEncoder[encoder]/BertLayer[9]/BertOutput[output]/LayerNorm[LayerNorm]',
            'BertForQuestionAnswering/BertModel[bert]/BertEncoder[encoder]/BertLayer[10]/BertAttention[attention]/BertSelfAttention[self]/Linear[query]',
            'BertForQuestionAnswering/BertModel[bert]/BertEncoder[encoder]/BertLayer[10]/BertAttention[attention]/BertSelfAttention[self]/Linear[key]',
            'BertForQuestionAnswering/BertModel[bert]/BertEncoder[encoder]/BertLayer[10]/BertAttention[attention]/BertSelfAttention[self]/Linear[value]',
            'BertForQuestionAnswering/BertModel[bert]/BertEncoder[encoder]/BertLayer[10]/BertAttention[attention]/BertSelfAttention[self]/Softmax[softmax]',
            'BertForQuestionAnswering/BertModel[bert]/BertEncoder[encoder]/BertLayer[10]/BertAttention[attention]/BertSelfAttention[self]/Dropout[dropout]',
            'BertForQuestionAnswering/BertModel[bert]/BertEncoder[encoder]/BertLayer[10]/BertAttention[attention]/BertSelfOutput[output]/Linear[dense]',
            'BertForQuestionAnswering/BertModel[bert]/BertEncoder[encoder]/BertLayer[10]/BertAttention[attention]/BertSelfOutput[output]/Dropout[dropout]',
            'BertForQuestionAnswering/BertModel[bert]/BertEncoder[encoder]/BertLayer[10]/BertAttention[attention]/BertSelfOutput[output]/LayerNorm[LayerNorm]',
            'BertForQuestionAnswering/BertModel[bert]/BertEncoder[encoder]/BertLayer[10]/BertIntermediate[intermediate]/Linear[dense]',
            'BertForQuestionAnswering/BertModel[bert]/BertEncoder[encoder]/BertLayer[10]/BertIntermediate[intermediate]/Gelu[intermediate_act_fn]',
            'BertForQuestionAnswering/BertModel[bert]/BertEncoder[encoder]/BertLayer[10]/BertOutput[output]/Linear[dense]',
            'BertForQuestionAnswering/BertModel[bert]/BertEncoder[encoder]/BertLayer[10]/BertOutput[output]/Dropout[dropout]',
            'BertForQuestionAnswering/BertModel[bert]/BertEncoder[encoder]/BertLayer[10]/BertOutput[output]/LayerNorm[LayerNorm]',
            'BertForQuestionAnswering/BertModel[bert]/BertEncoder[encoder]/BertLayer[11]/BertAttention[attention]/BertSelfAttention[self]/Linear[query]',
            'BertForQuestionAnswering/BertModel[bert]/BertEncoder[encoder]/BertLayer[11]/BertAttention[attention]/BertSelfAttention[self]/Linear[key]',
            'BertForQuestionAnswering/BertModel[bert]/BertEncoder[encoder]/BertLayer[11]/BertAttention[attention]/BertSelfAttention[self]/Linear[value]',
            'BertForQuestionAnswering/BertModel[bert]/BertEncoder[encoder]/BertLayer[11]/BertAttention[attention]/BertSelfAttention[self]/Softmax[softmax]',
            'BertForQuestionAnswering/BertModel[bert]/BertEncoder[encoder]/BertLayer[11]/BertAttention[attention]/BertSelfAttention[self]/Dropout[dropout]',
            'BertForQuestionAnswering/BertModel[bert]/BertEncoder[encoder]/BertLayer[11]/BertAttention[attention]/BertSelfOutput[output]/Linear[dense]',
            'BertForQuestionAnswering/BertModel[bert]/BertEncoder[encoder]/BertLayer[11]/BertAttention[attention]/BertSelfOutput[output]/Dropout[dropout]',
            'BertForQuestionAnswering/BertModel[bert]/BertEncoder[encoder]/BertLayer[11]/BertAttention[attention]/BertSelfOutput[output]/LayerNorm[LayerNorm]',
            'BertForQuestionAnswering/BertModel[bert]/BertEncoder[encoder]/BertLayer[11]/BertIntermediate[intermediate]/Linear[dense]',
            'BertForQuestionAnswering/BertModel[bert]/BertEncoder[encoder]/BertLayer[11]/BertIntermediate[intermediate]/Gelu[intermediate_act_fn]',
            'BertForQuestionAnswering/BertModel[bert]/BertEncoder[encoder]/BertLayer[11]/BertOutput[output]/Linear[dense]',
            'BertForQuestionAnswering/BertModel[bert]/BertEncoder[encoder]/BertLayer[11]/BertOutput[output]/Dropout[dropout]',
            'BertForQuestionAnswering/BertModel[bert]/BertEncoder[encoder]/BertLayer[11]/BertOutput[output]/LayerNorm[LayerNorm]',
            'BertForQuestionAnswering/BertModel[bert]/BertPooler[pooler]/Linear[dense]',
            'BertForQuestionAnswering/BertModel[bert]/BertPooler[pooler]/Tanh[activation]',
            'BertForQuestionAnswering/Linear[qa_outputs]',
        ]
    TENSORS = [
        ]
    def __init__(self, layers, tensors, device='cuda:1'):
        super().__init__()

        # Initialize partition layers
        for idx, layer_scope in enumerate(self.LAYER_SCOPES):
            self.add_module(f'l_{idx}' ,layers[layer_scope])

        # Initialize partition tensors (params and buffs)
        b = p = 0
        for tensor_scope in self.TENSORS:
            tensor = tensors[tensor_scope]
            if isinstance(tensor, nn.Parameter):
                self.register_parameter(f'p_{p}', tensor)
                p += 1
            else:
                self.register_buffer(f'b_{b}', tensor)
                b += 1

        self.device = torch.device(device)
        self.input_structure = [1, 1, 1, 1]
        self.lookup = {'l_0': 'bert.encoder.5.attention.self.dropout',
                        'l_1': 'bert.encoder.5.attention.output.dense',
                        'l_2': 'bert.encoder.5.attention.output.dropout',
                        'l_3': 'bert.encoder.5.attention.output.LayerNorm',
                        'l_4': 'bert.encoder.5.intermediate.dense',
                        'l_5': 'bert.encoder.5.intermediate.intermediate_act_fn',
                        'l_6': 'bert.encoder.5.output.dense',
                        'l_7': 'bert.encoder.5.output.dropout',
                        'l_8': 'bert.encoder.5.output.LayerNorm',
                        'l_9': 'bert.encoder.6.attention.self.query',
                        'l_10': 'bert.encoder.6.attention.self.key',
                        'l_11': 'bert.encoder.6.attention.self.value',
                        'l_12': 'bert.encoder.6.attention.self.softmax',
                        'l_13': 'bert.encoder.6.attention.self.dropout',
                        'l_14': 'bert.encoder.6.attention.output.dense',
                        'l_15': 'bert.encoder.6.attention.output.dropout',
                        'l_16': 'bert.encoder.6.attention.output.LayerNorm',
                        'l_17': 'bert.encoder.6.intermediate.dense',
                        'l_18': 'bert.encoder.6.intermediate.intermediate_act_fn',
                        'l_19': 'bert.encoder.6.output.dense',
                        'l_20': 'bert.encoder.6.output.dropout',
                        'l_21': 'bert.encoder.6.output.LayerNorm',
                        'l_22': 'bert.encoder.7.attention.self.query',
                        'l_23': 'bert.encoder.7.attention.self.key',
                        'l_24': 'bert.encoder.7.attention.self.value',
                        'l_25': 'bert.encoder.7.attention.self.softmax',
                        'l_26': 'bert.encoder.7.attention.self.dropout',
                        'l_27': 'bert.encoder.7.attention.output.dense',
                        'l_28': 'bert.encoder.7.attention.output.dropout',
                        'l_29': 'bert.encoder.7.attention.output.LayerNorm',
                        'l_30': 'bert.encoder.7.intermediate.dense',
                        'l_31': 'bert.encoder.7.intermediate.intermediate_act_fn',
                        'l_32': 'bert.encoder.7.output.dense',
                        'l_33': 'bert.encoder.7.output.dropout',
                        'l_34': 'bert.encoder.7.output.LayerNorm',
                        'l_35': 'bert.encoder.8.attention.self.query',
                        'l_36': 'bert.encoder.8.attention.self.key',
                        'l_37': 'bert.encoder.8.attention.self.value',
                        'l_38': 'bert.encoder.8.attention.self.softmax',
                        'l_39': 'bert.encoder.8.attention.self.dropout',
                        'l_40': 'bert.encoder.8.attention.output.dense',
                        'l_41': 'bert.encoder.8.attention.output.dropout',
                        'l_42': 'bert.encoder.8.attention.output.LayerNorm',
                        'l_43': 'bert.encoder.8.intermediate.dense',
                        'l_44': 'bert.encoder.8.intermediate.intermediate_act_fn',
                        'l_45': 'bert.encoder.8.output.dense',
                        'l_46': 'bert.encoder.8.output.dropout',
                        'l_47': 'bert.encoder.8.output.LayerNorm',
                        'l_48': 'bert.encoder.9.attention.self.query',
                        'l_49': 'bert.encoder.9.attention.self.key',
                        'l_50': 'bert.encoder.9.attention.self.value',
                        'l_51': 'bert.encoder.9.attention.self.softmax',
                        'l_52': 'bert.encoder.9.attention.self.dropout',
                        'l_53': 'bert.encoder.9.attention.output.dense',
                        'l_54': 'bert.encoder.9.attention.output.dropout',
                        'l_55': 'bert.encoder.9.attention.output.LayerNorm',
                        'l_56': 'bert.encoder.9.intermediate.dense',
                        'l_57': 'bert.encoder.9.intermediate.intermediate_act_fn',
                        'l_58': 'bert.encoder.9.output.dense',
                        'l_59': 'bert.encoder.9.output.dropout',
                        'l_60': 'bert.encoder.9.output.LayerNorm',
                        'l_61': 'bert.encoder.10.attention.self.query',
                        'l_62': 'bert.encoder.10.attention.self.key',
                        'l_63': 'bert.encoder.10.attention.self.value',
                        'l_64': 'bert.encoder.10.attention.self.softmax',
                        'l_65': 'bert.encoder.10.attention.self.dropout',
                        'l_66': 'bert.encoder.10.attention.output.dense',
                        'l_67': 'bert.encoder.10.attention.output.dropout',
                        'l_68': 'bert.encoder.10.attention.output.LayerNorm',
                        'l_69': 'bert.encoder.10.intermediate.dense',
                        'l_70': 'bert.encoder.10.intermediate.intermediate_act_fn',
                        'l_71': 'bert.encoder.10.output.dense',
                        'l_72': 'bert.encoder.10.output.dropout',
                        'l_73': 'bert.encoder.10.output.LayerNorm',
                        'l_74': 'bert.encoder.11.attention.self.query',
                        'l_75': 'bert.encoder.11.attention.self.key',
                        'l_76': 'bert.encoder.11.attention.self.value',
                        'l_77': 'bert.encoder.11.attention.self.softmax',
                        'l_78': 'bert.encoder.11.attention.self.dropout',
                        'l_79': 'bert.encoder.11.attention.output.dense',
                        'l_80': 'bert.encoder.11.attention.output.dropout',
                        'l_81': 'bert.encoder.11.attention.output.LayerNorm',
                        'l_82': 'bert.encoder.11.intermediate.dense',
                        'l_83': 'bert.encoder.11.intermediate.intermediate_act_fn',
                        'l_84': 'bert.encoder.11.output.dense',
                        'l_85': 'bert.encoder.11.output.dropout',
                        'l_86': 'bert.encoder.11.output.LayerNorm',
                        'l_87': 'bert.pooler.dense',
                        'l_88': 'bert.pooler.activation',
                        'l_89': 'qa_outputs'}
        self.to(self.device)

    def forward(self, *args):
        # BertForQuestionAnswering/BertModel[bert]/BertEncoder[encoder]/BertLayer[5]/BertAttention[attention]/BertSelfAttention[self]/Dropout[dropout] <=> self.l_0
        # BertForQuestionAnswering/BertModel[bert]/BertEncoder[encoder]/BertLayer[5]/BertAttention[attention]/BertSelfOutput[output]/Linear[dense] <=> self.l_1
        # BertForQuestionAnswering/BertModel[bert]/BertEncoder[encoder]/BertLayer[5]/BertAttention[attention]/BertSelfOutput[output]/Dropout[dropout] <=> self.l_2
        # BertForQuestionAnswering/BertModel[bert]/BertEncoder[encoder]/BertLayer[5]/BertAttention[attention]/BertSelfOutput[output]/LayerNorm[LayerNorm] <=> self.l_3
        # BertForQuestionAnswering/BertModel[bert]/BertEncoder[encoder]/BertLayer[5]/BertIntermediate[intermediate]/Linear[dense] <=> self.l_4
        # BertForQuestionAnswering/BertModel[bert]/BertEncoder[encoder]/BertLayer[5]/BertIntermediate[intermediate]/Gelu[intermediate_act_fn] <=> self.l_5
        # BertForQuestionAnswering/BertModel[bert]/BertEncoder[encoder]/BertLayer[5]/BertOutput[output]/Linear[dense] <=> self.l_6
        # BertForQuestionAnswering/BertModel[bert]/BertEncoder[encoder]/BertLayer[5]/BertOutput[output]/Dropout[dropout] <=> self.l_7
        # BertForQuestionAnswering/BertModel[bert]/BertEncoder[encoder]/BertLayer[5]/BertOutput[output]/LayerNorm[LayerNorm] <=> self.l_8
        # BertForQuestionAnswering/BertModel[bert]/BertEncoder[encoder]/BertLayer[6]/BertAttention[attention]/BertSelfAttention[self]/Linear[query] <=> self.l_9
        # BertForQuestionAnswering/BertModel[bert]/BertEncoder[encoder]/BertLayer[6]/BertAttention[attention]/BertSelfAttention[self]/Linear[key] <=> self.l_10
        # BertForQuestionAnswering/BertModel[bert]/BertEncoder[encoder]/BertLayer[6]/BertAttention[attention]/BertSelfAttention[self]/Linear[value] <=> self.l_11
        # BertForQuestionAnswering/BertModel[bert]/BertEncoder[encoder]/BertLayer[6]/BertAttention[attention]/BertSelfAttention[self]/Softmax[softmax] <=> self.l_12
        # BertForQuestionAnswering/BertModel[bert]/BertEncoder[encoder]/BertLayer[6]/BertAttention[attention]/BertSelfAttention[self]/Dropout[dropout] <=> self.l_13
        # BertForQuestionAnswering/BertModel[bert]/BertEncoder[encoder]/BertLayer[6]/BertAttention[attention]/BertSelfOutput[output]/Linear[dense] <=> self.l_14
        # BertForQuestionAnswering/BertModel[bert]/BertEncoder[encoder]/BertLayer[6]/BertAttention[attention]/BertSelfOutput[output]/Dropout[dropout] <=> self.l_15
        # BertForQuestionAnswering/BertModel[bert]/BertEncoder[encoder]/BertLayer[6]/BertAttention[attention]/BertSelfOutput[output]/LayerNorm[LayerNorm] <=> self.l_16
        # BertForQuestionAnswering/BertModel[bert]/BertEncoder[encoder]/BertLayer[6]/BertIntermediate[intermediate]/Linear[dense] <=> self.l_17
        # BertForQuestionAnswering/BertModel[bert]/BertEncoder[encoder]/BertLayer[6]/BertIntermediate[intermediate]/Gelu[intermediate_act_fn] <=> self.l_18
        # BertForQuestionAnswering/BertModel[bert]/BertEncoder[encoder]/BertLayer[6]/BertOutput[output]/Linear[dense] <=> self.l_19
        # BertForQuestionAnswering/BertModel[bert]/BertEncoder[encoder]/BertLayer[6]/BertOutput[output]/Dropout[dropout] <=> self.l_20
        # BertForQuestionAnswering/BertModel[bert]/BertEncoder[encoder]/BertLayer[6]/BertOutput[output]/LayerNorm[LayerNorm] <=> self.l_21
        # BertForQuestionAnswering/BertModel[bert]/BertEncoder[encoder]/BertLayer[7]/BertAttention[attention]/BertSelfAttention[self]/Linear[query] <=> self.l_22
        # BertForQuestionAnswering/BertModel[bert]/BertEncoder[encoder]/BertLayer[7]/BertAttention[attention]/BertSelfAttention[self]/Linear[key] <=> self.l_23
        # BertForQuestionAnswering/BertModel[bert]/BertEncoder[encoder]/BertLayer[7]/BertAttention[attention]/BertSelfAttention[self]/Linear[value] <=> self.l_24
        # BertForQuestionAnswering/BertModel[bert]/BertEncoder[encoder]/BertLayer[7]/BertAttention[attention]/BertSelfAttention[self]/Softmax[softmax] <=> self.l_25
        # BertForQuestionAnswering/BertModel[bert]/BertEncoder[encoder]/BertLayer[7]/BertAttention[attention]/BertSelfAttention[self]/Dropout[dropout] <=> self.l_26
        # BertForQuestionAnswering/BertModel[bert]/BertEncoder[encoder]/BertLayer[7]/BertAttention[attention]/BertSelfOutput[output]/Linear[dense] <=> self.l_27
        # BertForQuestionAnswering/BertModel[bert]/BertEncoder[encoder]/BertLayer[7]/BertAttention[attention]/BertSelfOutput[output]/Dropout[dropout] <=> self.l_28
        # BertForQuestionAnswering/BertModel[bert]/BertEncoder[encoder]/BertLayer[7]/BertAttention[attention]/BertSelfOutput[output]/LayerNorm[LayerNorm] <=> self.l_29
        # BertForQuestionAnswering/BertModel[bert]/BertEncoder[encoder]/BertLayer[7]/BertIntermediate[intermediate]/Linear[dense] <=> self.l_30
        # BertForQuestionAnswering/BertModel[bert]/BertEncoder[encoder]/BertLayer[7]/BertIntermediate[intermediate]/Gelu[intermediate_act_fn] <=> self.l_31
        # BertForQuestionAnswering/BertModel[bert]/BertEncoder[encoder]/BertLayer[7]/BertOutput[output]/Linear[dense] <=> self.l_32
        # BertForQuestionAnswering/BertModel[bert]/BertEncoder[encoder]/BertLayer[7]/BertOutput[output]/Dropout[dropout] <=> self.l_33
        # BertForQuestionAnswering/BertModel[bert]/BertEncoder[encoder]/BertLayer[7]/BertOutput[output]/LayerNorm[LayerNorm] <=> self.l_34
        # BertForQuestionAnswering/BertModel[bert]/BertEncoder[encoder]/BertLayer[8]/BertAttention[attention]/BertSelfAttention[self]/Linear[query] <=> self.l_35
        # BertForQuestionAnswering/BertModel[bert]/BertEncoder[encoder]/BertLayer[8]/BertAttention[attention]/BertSelfAttention[self]/Linear[key] <=> self.l_36
        # BertForQuestionAnswering/BertModel[bert]/BertEncoder[encoder]/BertLayer[8]/BertAttention[attention]/BertSelfAttention[self]/Linear[value] <=> self.l_37
        # BertForQuestionAnswering/BertModel[bert]/BertEncoder[encoder]/BertLayer[8]/BertAttention[attention]/BertSelfAttention[self]/Softmax[softmax] <=> self.l_38
        # BertForQuestionAnswering/BertModel[bert]/BertEncoder[encoder]/BertLayer[8]/BertAttention[attention]/BertSelfAttention[self]/Dropout[dropout] <=> self.l_39
        # BertForQuestionAnswering/BertModel[bert]/BertEncoder[encoder]/BertLayer[8]/BertAttention[attention]/BertSelfOutput[output]/Linear[dense] <=> self.l_40
        # BertForQuestionAnswering/BertModel[bert]/BertEncoder[encoder]/BertLayer[8]/BertAttention[attention]/BertSelfOutput[output]/Dropout[dropout] <=> self.l_41
        # BertForQuestionAnswering/BertModel[bert]/BertEncoder[encoder]/BertLayer[8]/BertAttention[attention]/BertSelfOutput[output]/LayerNorm[LayerNorm] <=> self.l_42
        # BertForQuestionAnswering/BertModel[bert]/BertEncoder[encoder]/BertLayer[8]/BertIntermediate[intermediate]/Linear[dense] <=> self.l_43
        # BertForQuestionAnswering/BertModel[bert]/BertEncoder[encoder]/BertLayer[8]/BertIntermediate[intermediate]/Gelu[intermediate_act_fn] <=> self.l_44
        # BertForQuestionAnswering/BertModel[bert]/BertEncoder[encoder]/BertLayer[8]/BertOutput[output]/Linear[dense] <=> self.l_45
        # BertForQuestionAnswering/BertModel[bert]/BertEncoder[encoder]/BertLayer[8]/BertOutput[output]/Dropout[dropout] <=> self.l_46
        # BertForQuestionAnswering/BertModel[bert]/BertEncoder[encoder]/BertLayer[8]/BertOutput[output]/LayerNorm[LayerNorm] <=> self.l_47
        # BertForQuestionAnswering/BertModel[bert]/BertEncoder[encoder]/BertLayer[9]/BertAttention[attention]/BertSelfAttention[self]/Linear[query] <=> self.l_48
        # BertForQuestionAnswering/BertModel[bert]/BertEncoder[encoder]/BertLayer[9]/BertAttention[attention]/BertSelfAttention[self]/Linear[key] <=> self.l_49
        # BertForQuestionAnswering/BertModel[bert]/BertEncoder[encoder]/BertLayer[9]/BertAttention[attention]/BertSelfAttention[self]/Linear[value] <=> self.l_50
        # BertForQuestionAnswering/BertModel[bert]/BertEncoder[encoder]/BertLayer[9]/BertAttention[attention]/BertSelfAttention[self]/Softmax[softmax] <=> self.l_51
        # BertForQuestionAnswering/BertModel[bert]/BertEncoder[encoder]/BertLayer[9]/BertAttention[attention]/BertSelfAttention[self]/Dropout[dropout] <=> self.l_52
        # BertForQuestionAnswering/BertModel[bert]/BertEncoder[encoder]/BertLayer[9]/BertAttention[attention]/BertSelfOutput[output]/Linear[dense] <=> self.l_53
        # BertForQuestionAnswering/BertModel[bert]/BertEncoder[encoder]/BertLayer[9]/BertAttention[attention]/BertSelfOutput[output]/Dropout[dropout] <=> self.l_54
        # BertForQuestionAnswering/BertModel[bert]/BertEncoder[encoder]/BertLayer[9]/BertAttention[attention]/BertSelfOutput[output]/LayerNorm[LayerNorm] <=> self.l_55
        # BertForQuestionAnswering/BertModel[bert]/BertEncoder[encoder]/BertLayer[9]/BertIntermediate[intermediate]/Linear[dense] <=> self.l_56
        # BertForQuestionAnswering/BertModel[bert]/BertEncoder[encoder]/BertLayer[9]/BertIntermediate[intermediate]/Gelu[intermediate_act_fn] <=> self.l_57
        # BertForQuestionAnswering/BertModel[bert]/BertEncoder[encoder]/BertLayer[9]/BertOutput[output]/Linear[dense] <=> self.l_58
        # BertForQuestionAnswering/BertModel[bert]/BertEncoder[encoder]/BertLayer[9]/BertOutput[output]/Dropout[dropout] <=> self.l_59
        # BertForQuestionAnswering/BertModel[bert]/BertEncoder[encoder]/BertLayer[9]/BertOutput[output]/LayerNorm[LayerNorm] <=> self.l_60
        # BertForQuestionAnswering/BertModel[bert]/BertEncoder[encoder]/BertLayer[10]/BertAttention[attention]/BertSelfAttention[self]/Linear[query] <=> self.l_61
        # BertForQuestionAnswering/BertModel[bert]/BertEncoder[encoder]/BertLayer[10]/BertAttention[attention]/BertSelfAttention[self]/Linear[key] <=> self.l_62
        # BertForQuestionAnswering/BertModel[bert]/BertEncoder[encoder]/BertLayer[10]/BertAttention[attention]/BertSelfAttention[self]/Linear[value] <=> self.l_63
        # BertForQuestionAnswering/BertModel[bert]/BertEncoder[encoder]/BertLayer[10]/BertAttention[attention]/BertSelfAttention[self]/Softmax[softmax] <=> self.l_64
        # BertForQuestionAnswering/BertModel[bert]/BertEncoder[encoder]/BertLayer[10]/BertAttention[attention]/BertSelfAttention[self]/Dropout[dropout] <=> self.l_65
        # BertForQuestionAnswering/BertModel[bert]/BertEncoder[encoder]/BertLayer[10]/BertAttention[attention]/BertSelfOutput[output]/Linear[dense] <=> self.l_66
        # BertForQuestionAnswering/BertModel[bert]/BertEncoder[encoder]/BertLayer[10]/BertAttention[attention]/BertSelfOutput[output]/Dropout[dropout] <=> self.l_67
        # BertForQuestionAnswering/BertModel[bert]/BertEncoder[encoder]/BertLayer[10]/BertAttention[attention]/BertSelfOutput[output]/LayerNorm[LayerNorm] <=> self.l_68
        # BertForQuestionAnswering/BertModel[bert]/BertEncoder[encoder]/BertLayer[10]/BertIntermediate[intermediate]/Linear[dense] <=> self.l_69
        # BertForQuestionAnswering/BertModel[bert]/BertEncoder[encoder]/BertLayer[10]/BertIntermediate[intermediate]/Gelu[intermediate_act_fn] <=> self.l_70
        # BertForQuestionAnswering/BertModel[bert]/BertEncoder[encoder]/BertLayer[10]/BertOutput[output]/Linear[dense] <=> self.l_71
        # BertForQuestionAnswering/BertModel[bert]/BertEncoder[encoder]/BertLayer[10]/BertOutput[output]/Dropout[dropout] <=> self.l_72
        # BertForQuestionAnswering/BertModel[bert]/BertEncoder[encoder]/BertLayer[10]/BertOutput[output]/LayerNorm[LayerNorm] <=> self.l_73
        # BertForQuestionAnswering/BertModel[bert]/BertEncoder[encoder]/BertLayer[11]/BertAttention[attention]/BertSelfAttention[self]/Linear[query] <=> self.l_74
        # BertForQuestionAnswering/BertModel[bert]/BertEncoder[encoder]/BertLayer[11]/BertAttention[attention]/BertSelfAttention[self]/Linear[key] <=> self.l_75
        # BertForQuestionAnswering/BertModel[bert]/BertEncoder[encoder]/BertLayer[11]/BertAttention[attention]/BertSelfAttention[self]/Linear[value] <=> self.l_76
        # BertForQuestionAnswering/BertModel[bert]/BertEncoder[encoder]/BertLayer[11]/BertAttention[attention]/BertSelfAttention[self]/Softmax[softmax] <=> self.l_77
        # BertForQuestionAnswering/BertModel[bert]/BertEncoder[encoder]/BertLayer[11]/BertAttention[attention]/BertSelfAttention[self]/Dropout[dropout] <=> self.l_78
        # BertForQuestionAnswering/BertModel[bert]/BertEncoder[encoder]/BertLayer[11]/BertAttention[attention]/BertSelfOutput[output]/Linear[dense] <=> self.l_79
        # BertForQuestionAnswering/BertModel[bert]/BertEncoder[encoder]/BertLayer[11]/BertAttention[attention]/BertSelfOutput[output]/Dropout[dropout] <=> self.l_80
        # BertForQuestionAnswering/BertModel[bert]/BertEncoder[encoder]/BertLayer[11]/BertAttention[attention]/BertSelfOutput[output]/LayerNorm[LayerNorm] <=> self.l_81
        # BertForQuestionAnswering/BertModel[bert]/BertEncoder[encoder]/BertLayer[11]/BertIntermediate[intermediate]/Linear[dense] <=> self.l_82
        # BertForQuestionAnswering/BertModel[bert]/BertEncoder[encoder]/BertLayer[11]/BertIntermediate[intermediate]/Gelu[intermediate_act_fn] <=> self.l_83
        # BertForQuestionAnswering/BertModel[bert]/BertEncoder[encoder]/BertLayer[11]/BertOutput[output]/Linear[dense] <=> self.l_84
        # BertForQuestionAnswering/BertModel[bert]/BertEncoder[encoder]/BertLayer[11]/BertOutput[output]/Dropout[dropout] <=> self.l_85
        # BertForQuestionAnswering/BertModel[bert]/BertEncoder[encoder]/BertLayer[11]/BertOutput[output]/LayerNorm[LayerNorm] <=> self.l_86
        # BertForQuestionAnswering/BertModel[bert]/BertPooler[pooler]/Linear[dense] <=> self.l_87
        # BertForQuestionAnswering/BertModel[bert]/BertPooler[pooler]/Tanh[activation] <=> self.l_88
        # BertForQuestionAnswering/Linear[qa_outputs] <=> self.l_89
        # BertForQuestionAnswering/BertModel[bert]/Tensor::__mul___12 <=> x0
        # BertForQuestionAnswering/BertModel[bert]/BertEncoder[encoder]/BertLayer[4]/BertOutput[output]/LayerNorm[LayerNorm] <=> x1
        # BertForQuestionAnswering/BertModel[bert]/BertEncoder[encoder]/BertLayer[5]/BertAttention[attention]/BertSelfAttention[self]/Tensor::permute_582 <=> x2
        # BertForQuestionAnswering/BertModel[bert]/BertEncoder[encoder]/BertLayer[5]/BertAttention[attention]/BertSelfAttention[self]/Softmax[softmax] <=> x3
        x0, x1, x2, x3 = unflatten(args,self.input_structure)
        t_0 = self.l_0(x3)
        t_0 = torch.matmul(t_0, x2)
        t_0 = t_0.permute(0, 2, 1, 3)
        t_0 = t_0.contiguous()
        t_1 = t_0.size()
        t_1 = t_1[slice(None, -2, None)]
        t_1 = t_1 + (768,)
        t_2 = t_1[0]
        t_3 = t_1[1]
        t_1 = t_1[2]
        t_1 = t_0.view(t_2, t_3, t_1)
        t_1 = self.l_1(t_1)
        t_1 = self.l_2(t_1)
        t_1 = t_1 + x1
        t_1 = self.l_3(t_1)
        t_3 = self.l_4(t_1)
        t_3 = self.l_5(t_3)
        t_3 = self.l_6(t_3)
        t_3 = self.l_7(t_3)
        t_1 = t_3 + t_1
        t_1 = self.l_8(t_1)
        t_3 = self.l_9(t_1)
        t_2 = self.l_10(t_1)
        t_0 = self.l_11(t_1)
        t_4 = t_3.size()
        t_5 = t_2.size()
        t_6 = t_0.size()
        t_4 = t_4[slice(None, -1, None)]
        t_4 = t_4 + (12, 64)
        t_7 = t_4[0]
        t_8 = t_4[1]
        t_9 = t_4[2]
        t_4 = t_4[3]
        t_4 = t_3.view(t_7, t_8, t_9, t_4)
        t_4 = t_4.permute(0, 2, 1, 3)
        t_5 = t_5[slice(None, -1, None)]
        t_5 = t_5 + (12, 64)
        t_9 = t_5[0]
        t_8 = t_5[1]
        t_7 = t_5[2]
        t_5 = t_5[3]
        t_5 = t_2.view(t_9, t_8, t_7, t_5)
        t_5 = t_5.permute(0, 2, 1, 3)
        t_6 = t_6[slice(None, -1, None)]
        t_6 = t_6 + (12, 64)
        t_7 = t_6[0]
        t_8 = t_6[1]
        t_9 = t_6[2]
        t_6 = t_6[3]
        t_6 = t_0.view(t_7, t_8, t_9, t_6)
        t_6 = t_6.permute(0, 2, 1, 3)
        t_5 = t_5.transpose(-1, -2)
        t_5 = torch.matmul(t_4, t_5)
        t_4 = math.sqrt(64)
        t_4 = t_5 / t_4
        t_4 = t_4 + x0
        t_4 = self.l_12(t_4)
        t_4 = self.l_13(t_4)
        t_6 = torch.matmul(t_4, t_6)
        t_6 = t_6.permute(0, 2, 1, 3)
        t_6 = t_6.contiguous()
        t_4 = t_6.size()
        t_4 = t_4[slice(None, -2, None)]
        t_4 = t_4 + (768,)
        t_5 = t_4[0]
        t_9 = t_4[1]
        t_4 = t_4[2]
        t_4 = t_6.view(t_5, t_9, t_4)
        t_4 = self.l_14(t_4)
        t_4 = self.l_15(t_4)
        t_1 = t_4 + t_1
        t_1 = self.l_16(t_1)
        t_4 = self.l_17(t_1)
        t_4 = self.l_18(t_4)
        t_4 = self.l_19(t_4)
        t_4 = self.l_20(t_4)
        t_1 = t_4 + t_1
        t_1 = self.l_21(t_1)
        t_4 = self.l_22(t_1)
        t_9 = self.l_23(t_1)
        t_5 = self.l_24(t_1)
        t_6 = t_4.size()
        t_8 = t_9.size()
        t_7 = t_5.size()
        t_6 = t_6[slice(None, -1, None)]
        t_6 = t_6 + (12, 64)
        t_0 = t_6[0]
        t_2 = t_6[1]
        t_3 = t_6[2]
        t_6 = t_6[3]
        t_6 = t_4.view(t_0, t_2, t_3, t_6)
        t_6 = t_6.permute(0, 2, 1, 3)
        t_8 = t_8[slice(None, -1, None)]
        t_8 = t_8 + (12, 64)
        t_3 = t_8[0]
        t_2 = t_8[1]
        t_0 = t_8[2]
        t_8 = t_8[3]
        t_8 = t_9.view(t_3, t_2, t_0, t_8)
        t_8 = t_8.permute(0, 2, 1, 3)
        t_7 = t_7[slice(None, -1, None)]
        t_7 = t_7 + (12, 64)
        t_0 = t_7[0]
        t_2 = t_7[1]
        t_3 = t_7[2]
        t_7 = t_7[3]
        t_7 = t_5.view(t_0, t_2, t_3, t_7)
        t_7 = t_7.permute(0, 2, 1, 3)
        t_8 = t_8.transpose(-1, -2)
        t_8 = torch.matmul(t_6, t_8)
        t_6 = math.sqrt(64)
        t_6 = t_8 / t_6
        t_6 = t_6 + x0
        t_6 = self.l_25(t_6)
        t_6 = self.l_26(t_6)
        t_7 = torch.matmul(t_6, t_7)
        t_7 = t_7.permute(0, 2, 1, 3)
        t_7 = t_7.contiguous()
        t_6 = t_7.size()
        t_6 = t_6[slice(None, -2, None)]
        t_6 = t_6 + (768,)
        t_8 = t_6[0]
        t_3 = t_6[1]
        t_6 = t_6[2]
        t_6 = t_7.view(t_8, t_3, t_6)
        t_6 = self.l_27(t_6)
        t_6 = self.l_28(t_6)
        t_1 = t_6 + t_1
        t_1 = self.l_29(t_1)
        t_6 = self.l_30(t_1)
        t_6 = self.l_31(t_6)
        t_6 = self.l_32(t_6)
        t_6 = self.l_33(t_6)
        t_1 = t_6 + t_1
        t_1 = self.l_34(t_1)
        t_6 = self.l_35(t_1)
        t_3 = self.l_36(t_1)
        t_8 = self.l_37(t_1)
        t_7 = t_6.size()
        t_2 = t_3.size()
        t_0 = t_8.size()
        t_7 = t_7[slice(None, -1, None)]
        t_7 = t_7 + (12, 64)
        t_5 = t_7[0]
        t_9 = t_7[1]
        t_4 = t_7[2]
        t_7 = t_7[3]
        t_7 = t_6.view(t_5, t_9, t_4, t_7)
        t_7 = t_7.permute(0, 2, 1, 3)
        t_2 = t_2[slice(None, -1, None)]
        t_2 = t_2 + (12, 64)
        t_4 = t_2[0]
        t_9 = t_2[1]
        t_5 = t_2[2]
        t_2 = t_2[3]
        t_2 = t_3.view(t_4, t_9, t_5, t_2)
        t_2 = t_2.permute(0, 2, 1, 3)
        t_0 = t_0[slice(None, -1, None)]
        t_0 = t_0 + (12, 64)
        t_5 = t_0[0]
        t_9 = t_0[1]
        t_4 = t_0[2]
        t_0 = t_0[3]
        t_0 = t_8.view(t_5, t_9, t_4, t_0)
        t_0 = t_0.permute(0, 2, 1, 3)
        t_2 = t_2.transpose(-1, -2)
        t_2 = torch.matmul(t_7, t_2)
        t_7 = math.sqrt(64)
        t_7 = t_2 / t_7
        t_7 = t_7 + x0
        t_7 = self.l_38(t_7)
        t_7 = self.l_39(t_7)
        t_0 = torch.matmul(t_7, t_0)
        t_0 = t_0.permute(0, 2, 1, 3)
        t_0 = t_0.contiguous()
        t_7 = t_0.size()
        t_7 = t_7[slice(None, -2, None)]
        t_7 = t_7 + (768,)
        t_2 = t_7[0]
        t_4 = t_7[1]
        t_7 = t_7[2]
        t_7 = t_0.view(t_2, t_4, t_7)
        t_7 = self.l_40(t_7)
        t_7 = self.l_41(t_7)
        t_1 = t_7 + t_1
        t_1 = self.l_42(t_1)
        t_7 = self.l_43(t_1)
        t_7 = self.l_44(t_7)
        t_7 = self.l_45(t_7)
        t_7 = self.l_46(t_7)
        t_1 = t_7 + t_1
        t_1 = self.l_47(t_1)
        t_7 = self.l_48(t_1)
        t_4 = self.l_49(t_1)
        t_2 = self.l_50(t_1)
        t_0 = t_7.size()
        t_9 = t_4.size()
        t_5 = t_2.size()
        t_0 = t_0[slice(None, -1, None)]
        t_0 = t_0 + (12, 64)
        t_8 = t_0[0]
        t_3 = t_0[1]
        t_6 = t_0[2]
        t_0 = t_0[3]
        t_0 = t_7.view(t_8, t_3, t_6, t_0)
        t_0 = t_0.permute(0, 2, 1, 3)
        t_9 = t_9[slice(None, -1, None)]
        t_9 = t_9 + (12, 64)
        t_6 = t_9[0]
        t_3 = t_9[1]
        t_8 = t_9[2]
        t_9 = t_9[3]
        t_9 = t_4.view(t_6, t_3, t_8, t_9)
        t_9 = t_9.permute(0, 2, 1, 3)
        t_5 = t_5[slice(None, -1, None)]
        t_5 = t_5 + (12, 64)
        t_8 = t_5[0]
        t_3 = t_5[1]
        t_6 = t_5[2]
        t_5 = t_5[3]
        t_5 = t_2.view(t_8, t_3, t_6, t_5)
        t_5 = t_5.permute(0, 2, 1, 3)
        t_9 = t_9.transpose(-1, -2)
        t_9 = torch.matmul(t_0, t_9)
        t_0 = math.sqrt(64)
        t_0 = t_9 / t_0
        t_0 = t_0 + x0
        t_0 = self.l_51(t_0)
        t_0 = self.l_52(t_0)
        t_5 = torch.matmul(t_0, t_5)
        t_5 = t_5.permute(0, 2, 1, 3)
        t_5 = t_5.contiguous()
        t_0 = t_5.size()
        t_0 = t_0[slice(None, -2, None)]
        t_0 = t_0 + (768,)
        t_9 = t_0[0]
        t_6 = t_0[1]
        t_0 = t_0[2]
        t_0 = t_5.view(t_9, t_6, t_0)
        t_0 = self.l_53(t_0)
        t_0 = self.l_54(t_0)
        t_1 = t_0 + t_1
        t_1 = self.l_55(t_1)
        t_0 = self.l_56(t_1)
        t_0 = self.l_57(t_0)
        t_0 = self.l_58(t_0)
        t_0 = self.l_59(t_0)
        t_1 = t_0 + t_1
        t_1 = self.l_60(t_1)
        t_0 = self.l_61(t_1)
        t_6 = self.l_62(t_1)
        t_9 = self.l_63(t_1)
        t_5 = t_0.size()
        t_3 = t_6.size()
        t_8 = t_9.size()
        t_5 = t_5[slice(None, -1, None)]
        t_5 = t_5 + (12, 64)
        t_2 = t_5[0]
        t_4 = t_5[1]
        t_7 = t_5[2]
        t_5 = t_5[3]
        t_5 = t_0.view(t_2, t_4, t_7, t_5)
        t_5 = t_5.permute(0, 2, 1, 3)
        t_3 = t_3[slice(None, -1, None)]
        t_3 = t_3 + (12, 64)
        t_7 = t_3[0]
        t_4 = t_3[1]
        t_2 = t_3[2]
        t_3 = t_3[3]
        t_3 = t_6.view(t_7, t_4, t_2, t_3)
        t_3 = t_3.permute(0, 2, 1, 3)
        t_8 = t_8[slice(None, -1, None)]
        t_8 = t_8 + (12, 64)
        t_2 = t_8[0]
        t_4 = t_8[1]
        t_7 = t_8[2]
        t_8 = t_8[3]
        t_8 = t_9.view(t_2, t_4, t_7, t_8)
        t_8 = t_8.permute(0, 2, 1, 3)
        t_3 = t_3.transpose(-1, -2)
        t_3 = torch.matmul(t_5, t_3)
        t_5 = math.sqrt(64)
        t_5 = t_3 / t_5
        t_5 = t_5 + x0
        t_5 = self.l_64(t_5)
        t_5 = self.l_65(t_5)
        t_8 = torch.matmul(t_5, t_8)
        t_8 = t_8.permute(0, 2, 1, 3)
        t_8 = t_8.contiguous()
        t_5 = t_8.size()
        t_5 = t_5[slice(None, -2, None)]
        t_5 = t_5 + (768,)
        t_3 = t_5[0]
        t_7 = t_5[1]
        t_5 = t_5[2]
        t_5 = t_8.view(t_3, t_7, t_5)
        t_5 = self.l_66(t_5)
        t_5 = self.l_67(t_5)
        t_1 = t_5 + t_1
        t_1 = self.l_68(t_1)
        t_5 = self.l_69(t_1)
        t_5 = self.l_70(t_5)
        t_5 = self.l_71(t_5)
        t_5 = self.l_72(t_5)
        t_1 = t_5 + t_1
        t_1 = self.l_73(t_1)
        t_5 = self.l_74(t_1)
        t_7 = self.l_75(t_1)
        t_3 = self.l_76(t_1)
        t_8 = t_5.size()
        t_4 = t_7.size()
        t_2 = t_3.size()
        t_8 = t_8[slice(None, -1, None)]
        t_8 = t_8 + (12, 64)
        t_9 = t_8[0]
        t_6 = t_8[1]
        t_0 = t_8[2]
        t_8 = t_8[3]
        t_8 = t_5.view(t_9, t_6, t_0, t_8)
        t_8 = t_8.permute(0, 2, 1, 3)
        t_4 = t_4[slice(None, -1, None)]
        t_4 = t_4 + (12, 64)
        t_0 = t_4[0]
        t_6 = t_4[1]
        t_9 = t_4[2]
        t_4 = t_4[3]
        t_4 = t_7.view(t_0, t_6, t_9, t_4)
        t_4 = t_4.permute(0, 2, 1, 3)
        t_2 = t_2[slice(None, -1, None)]
        t_2 = t_2 + (12, 64)
        t_9 = t_2[0]
        t_6 = t_2[1]
        t_0 = t_2[2]
        t_2 = t_2[3]
        t_2 = t_3.view(t_9, t_6, t_0, t_2)
        t_2 = t_2.permute(0, 2, 1, 3)
        t_4 = t_4.transpose(-1, -2)
        t_4 = torch.matmul(t_8, t_4)
        t_8 = math.sqrt(64)
        t_8 = t_4 / t_8
        t_8 = t_8 + x0
        t_8 = self.l_77(t_8)
        t_8 = self.l_78(t_8)
        t_2 = torch.matmul(t_8, t_2)
        t_2 = t_2.permute(0, 2, 1, 3)
        t_2 = t_2.contiguous()
        t_8 = t_2.size()
        t_8 = t_8[slice(None, -2, None)]
        t_8 = t_8 + (768,)
        t_4 = t_8[0]
        t_0 = t_8[1]
        t_8 = t_8[2]
        t_8 = t_2.view(t_4, t_0, t_8)
        t_8 = self.l_79(t_8)
        t_8 = self.l_80(t_8)
        t_1 = t_8 + t_1
        t_1 = self.l_81(t_1)
        t_8 = self.l_82(t_1)
        t_8 = self.l_83(t_8)
        t_8 = self.l_84(t_8)
        t_8 = self.l_85(t_8)
        t_1 = t_8 + t_1
        t_1 = self.l_86(t_1)
        t_8 = self.l_89(t_1)
        t_1 = t_1[(slice(None, None, None), 0)]
        t_1 = self.l_87(t_1)
        t_1 = self.l_88(t_1)
        # Returning:
        # BertForQuestionAnswering/Linear[qa_outputs]
        return (t_8,)

    def state_dict(self, *args, **kwargs):
        # we return the state dict of this part as it should be in the original model
        return state_dict(self, *args, **kwargs)

    def load_state_dict(self, *args, **kwargs):
        return load_state_dict(self, *args, **kwargs)

    def named_parameters(self, *args, **kwargs):
        # we return the named parameters of this part as it should be in the original model
        return named_parameters(self, *args, **kwargs)

    def named_buffers(self, *args, **kwargs):
        # we return the named buffers of this part as it should be in the original model
        return named_buffers(self, *args, **kwargs)

    def cpu(self):
        return cpu(self)

    def cuda(self, device=None):
        return cuda(self, device=device)

    def to(self, *args, **kwargs):
        return to(self, *args, **kwargs)


def traverse_model(module: nn.Module, depth: int, prefix: Optional[str] = None,
                   basic_blocks: Tuple[Type[nn.Module]] = (), full: bool = False) -> Iterator[
    Tuple[nn.Module, str, nn.Module, Optional[bool]]]:
    """
    iterate over model layers yielding the layer,layer_scope,encasing_module
    Parameters:
    -----------
    model:
        the model to iterate over
    depth:
        how far down in the model tree to go
    basic_blocks:
        a list of modules that if encountered will not be broken down
    full:
        whether to yield only layers specified by the depth and basic_block options or to yield all layers
    """
    if prefix is None:
        prefix = type(module).__name__

    for name, sub_module in module.named_children():
        scope = prefix + "/" + type(sub_module).__name__ + f"[{name}]"
        if len(list(sub_module.children())) == 0 or isinstance(sub_module, tuple(basic_blocks)) or depth == 0:
            if full:
                # TODO:
                # is_explicit_block_limit = len(list(sub_module.children())) != 0 and (isinstance(sub_module, tuple(basic_blocks)) or depth == 0)
                yield sub_module, scope, module, True

            else:
                yield sub_module, scope, module
        else:
            if full:
                yield sub_module, scope, module, False
            yield from traverse_model(sub_module, depth - 1, scope, basic_blocks, full)


def layerDict(model: nn.Module, depth=1000, basic_blocks=()) -> Dict[str, nn.Module]:
    return {s: l for l, s, _ in traverse_model(model, depth, basic_blocks=basic_blocks)}


def traverse_params_buffs(module: nn.Module, prefix: Optional[str] = None) -> Iterator[Tuple[torch.tensor, str]]:
    """
    iterate over model's buffers and parameters yielding obj,obj_scope

    Parameters:
    -----------
    model:
        the model to iterate over
    """
    if prefix is None:
        prefix = type(module).__name__

    # params
    for param_name, param in module.named_parameters(recurse=False):
        param_scope = f"{prefix}/{type(param).__name__}[{param_name}]"
        yield param, param_scope

    # buffs
    for buffer_name, buffer in module.named_buffers(recurse=False):
        buffer_scope = f"{prefix}/{type(buffer).__name__}[{buffer_name}]"
        yield buffer, buffer_scope

    # recurse
    for name, sub_module in module.named_children():
        yield from traverse_params_buffs(sub_module, prefix + "/" + type(sub_module).__name__ + f"[{name}]")


def tensorDict(model: nn.Module) -> OrderedDict[str, Tensor]:
    return collections.OrderedDict((s, t) for t, s in traverse_params_buffs(model))


def move_tensors(ts, device):
    def move(t):
        if isinstance(t, (nn.Module, Tensor)):
            return t.to(device)
        return t

    return nested_map(move, ts)


def nested_map(func, ts, full=False):
    if isinstance(ts, torch.Size):
        # size is inheriting from tuple which is stupid
        return func(ts)
    elif isinstance(ts, (list, tuple, set)):
        return type(ts)(nested_map(func, t, full=full) for t in ts)
    elif isinstance(ts, dict):
        return {k: nested_map(func, v, full=full) for k, v in ts.items()}
    elif isinstance(ts, slice) and full:
        start = nested_map(func, ts.start, full=full)
        stop = nested_map(func, ts.stop, full=full)
        step = nested_map(func, ts.step, full=full)
        return slice(start, stop, step)
    return func(ts)


def flatten(ts):
    if isinstance(ts, torch.Size):
        # size is inheriting from tuple which is stupid
        yield ts
    elif isinstance(ts, (list, tuple, set)):
        yield from chain(*[flatten(t) for t in ts])
    elif isinstance(ts, dict):
        yield from chain(*[flatten(t) for k, t in sorted(ts.items(), key=lambda t: t[0])])
    else:
        yield ts


def unflatten(xs, structure):
    return _unflatten(xs, structure)[0]


def _unflatten(xs, structure):
    if isinstance(structure, torch.Size):
        # torch.Size is subclass of tuple which is stupid
        return xs[0], 1

    if not isinstance(structure, (list, tuple, set, dict)):
        return xs[0], 1

    if isinstance(structure, (list, tuple, set)):
        offset = 0
        elements = []
        for s in structure:
            e, n = _unflatten(xs[offset:], s)
            elements.append(e)
            offset += n

        return type(structure)(elements), offset

    assert isinstance(structure, dict)
    offset = 0
    elements = dict()
    for k, v in sorted(structure.items(), key=lambda t: t[0]):
        e, n = _unflatten(xs[offset:], v)
        elements[k] = e
        offset += n

    return elements, offset


def state_dict(partition, *args, **kwargs):
    # we return the state dict of this part as it should be in the original model
    state = nn.Module.state_dict(partition, *args, **kwargs)
    lookup = partition.lookup
    result = dict()
    for k, v in state.items():
        if k in lookup:
            result[lookup[k]] = v
        else:
            assert '.' in k
            split_idx = k.find('.')
            new_k = lookup[k[:split_idx]] + k[split_idx:]
            result[new_k] = v
    return result


def load_state_dict(partition, state_dict, strict=True):
    reverse_lookup = {v: k for k, v in partition.lookup.items()}
    device = partition.device
    keys = list(partition.state_dict(None).keys())
    new_state = dict()
    for k in keys:
        if k in reverse_lookup:
            new_state[reverse_lookup[k]] = state_dict[k].to(device)
            continue
        idx = k.rfind(".")
        to_replace = k[:idx]
        if to_replace in reverse_lookup:
            key = reverse_lookup[to_replace] + k[idx:]
            new_state[key] = state_dict[k].to(device)
    nn.Module.load_state_dict(partition, new_state, strict=strict)


def named_buffers(partition, prefix='', recurse=True):
    # we return the named buffers of this part as it should be in the original model
    params = nn.Module.named_buffers(partition, prefix=prefix, recurse=recurse)
    lookup = partition.lookup
    for k, v in params:
        if k in lookup:
            yield lookup[k], v
        else:
            assert '.' in k
            split_idx = k.find('.')
            new_k = lookup[k[:split_idx]] + k[split_idx:]
            yield new_k, v


def named_parameters(partition, prefix='', recurse=True):
    # we return the named parameters of this part as it should be in the original model
    params = nn.Module.named_parameters(partition, prefix=prefix, recurse=recurse)
    lookup = partition.lookup
    for k, v in params:
        if k in lookup:
            yield lookup[k], v
        else:
            assert '.' in k
            split_idx = k.find('.')
            new_k = lookup[k[:split_idx]] + k[split_idx:]
            yield new_k, v


def cpu(partition):
    partition.device = torch.device('cpu')
    return nn.Module.cpu(partition)


def cuda(partition, device=None):
    if device is None:
        device = torch.cuda.current_device()
    partition.device = torch.device(device)
    return nn.Module.cuda(partition, partition.device)


def to(partition, *args, **kwargs):
    device = None
    if 'device' in kwargs:
        device = kwargs['device']
    elif 'tensor' in kwargs:
        device = kwargs['tensor'].device
    if args:
        if isinstance(args[0], (torch.device, int, str)):
            device = args[0]
        if torch.is_tensor(args[0]):
            device = args[0].device
    if not (device is None):
        partition.device = torch.device(device)
    return nn.Module.to(partition, *args, **kwargs)

model_args = {'model_name_or_path': 'bert-base-uncased', 'precompute_attention_mask': False, 'max_seq_length': 384, 'max_query_length': 64, 'do_lower_case': True}
"""analysis summary
-I- Printing Report
warnings:
Partition0 output:BertForQuestionAnswering/BertModel[bert]/BertEncoder[encoder]/BertLayer[5]/BertAttention[attention]/BertSelfAttention[self]/Tensor::permute_582 is not contiguous!
Number of nodes in Computation Graph: 1221
Number of stages: 2
backward times include recomputation
Analysis for async_pipeline=True: last partition will not do recomputation.

Stage parameter count:
 {0: 61048320, 1: 48435458, 'total': 109483778}

GPU parameter count:
 Number of Model Parameters 109.5M
{'total': 109483778}

real times are based on real measurements of execution time (with communication) of generated partitions ms
forward {0: 23.62, 1: 24.43}
backward {0: 53.0, 1: 44.68}

Assuming bandwidth of 12 GBps between GPUs

communication volumes size of activations of each partition
0: input size:'0.00 MB', recieve_time:'0.00 ms', out:'37.75 MB', send time:'3.15 ms'
1: input size:'37.75 MB', recieve_time:'3.15 ms', out:'0.01 MB', send time:'0.00 ms'

Compuatation Communication ratio (comp/(comp+comm)):
forward {0: 0.87, 1: 1.0} 
backward {0: 1.0, 1: 0.93}

Analysis for T = fwd + bwd:
 {'expected_compute_utilization': {0: 1.0, 1: 0.9},
 'pipeline_no_comm': {0: 73.47, 1: 65.96, 'worstcase': 73.47},
 'pipeline_vs_seq_no_comm': 1.65,
 'pipeline_with_non_parallel_comm': {0: 76.62, 1: 69.11, 'worstcase': 76.62},
 'seq_no_comm_no_recomp': {0: 54.56, 1: 66.36}}

Analysis for T = (1-R)fwd + R*bwd:

Pipeline Slowdown: (compared to sequential executation with no communication, and same recompute policy)
forward 1.088
backward 1.121

Expected utilization by partition
forward {0: 0.84, 1: 1.0}
backward {0: 1.0, 1: 0.78}

worstcase: bwd: 53.003 fwd: 24.431
expected_speedup_compared_to_seq_no_recomp_no_comm: 1.562
Expected speedup for 2 partitions is: 1.800
Analysis max cuda memory used 1.73GB
"""