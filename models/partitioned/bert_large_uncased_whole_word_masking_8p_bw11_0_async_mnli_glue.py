"""AutoGenerated with:
python partition_glue_models.py --model_name_or_path bert-large-uncased-whole-word-masking --bw 11 --bwd_to_fwd_ratio 3 --n_iter 5 --model_type bert --use_network_profiler --disable_op_profiling --use_METIS -a --n_partitions 8
"""
import torch.functional
import math
import torch.nn.functional
import torch
from torch import Tensor
import torch.nn as nn
from itertools import chain
from typing import Optional, Tuple, Iterator, Iterable, OrderedDict, Dict
import collections
import os
from torch.nn.modules.activation import Softmax
from torch.nn.modules.linear import Linear
from torch.nn.modules.dropout import Dropout
from torch.nn.modules.activation import Tanh
from torch.nn.modules.normalization import LayerNorm
from torch.nn.modules.sparse import Embedding
# this is an auto generated file do not edit unless you know what you are doing


# partition adjacency
# model inputs {0}
# partition 0 {'inputs': {'input2', 'input1', 'input0'}, 'outputs': {1}}
# partition 1 {'inputs': {0}, 'outputs': {2}}
# partition 2 {'inputs': {1}, 'outputs': {3}}
# partition 3 {'inputs': {2}, 'outputs': {4}}
# partition 4 {'inputs': {3}, 'outputs': {5}}
# partition 5 {'inputs': {4}, 'outputs': {6}}
# partition 6 {'inputs': {5}, 'outputs': {7}}
# partition 7 {'inputs': {6}, 'outputs': {'output'}}
# model outputs {7}


def create_pipeline_configuration(DEBUG=False):
    basic_blocks = (Softmax,Linear,Dropout,Tanh,LayerNorm,Embedding)
    module_path = os.path.relpath(__file__).replace("/",".")[:-3]
    
    config = {
        'batch_dim': 0,
        'depth': 10000,
        'basic_blocks': ['torch.nn.modules.activation.Softmax', 'torch.nn.modules.linear.Linear', 'torch.nn.modules.dropout.Dropout', 'torch.nn.modules.activation.Tanh', 'torch.nn.modules.normalization.LayerNorm', 'torch.nn.modules.sparse.Embedding'],
        'model_inputs': {
            'input0': {
                'shape': torch.Size([1, 128]),
                'dtype': torch.int64,
                'is_batched': True},
            'input1': {
                'shape': torch.Size([1, 128]),
                'dtype': torch.int64,
                'is_batched': True},
            'input2': {
                'shape': torch.Size([1, 128]),
                'dtype': torch.int64,
                'is_batched': True}},
        'model_outputs': {
            'BertForSequenceClassification/Linear[classifier]': {
                'shape': torch.Size([1, 3]),
                'dtype': torch.float32,
                'is_batched': True}},
        'stages': {
            0: {
                'inputs': {
                    'input0': {
                        'shape': torch.Size([1, 128]),
                        'dtype': torch.int64,
                        'req_grad': False,
                        'is_batched': True},
                    'input1': {
                        'shape': torch.Size([1, 128]),
                        'dtype': torch.int64,
                        'req_grad': False,
                        'is_batched': True},
                    'input2': {
                        'shape': torch.Size([1, 128]),
                        'dtype': torch.int64,
                        'req_grad': False,
                        'is_batched': True}},
                'outputs': {
                    'BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/tuple::__getitem___273': {
                        'shape': torch.Size([1, 1, 1, 128]),
                        'dtype': torch.float32,
                        'is_batched': True},
                    'BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[2]/BertAttention[attention]/BertSelfOutput[output]/Tensor::__add___384': {
                        'shape': torch.Size([1, 128, 1024]),
                        'dtype': torch.float32,
                        'is_batched': True}}},
            1: {
                'inputs': {
                    'BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/tuple::__getitem___273': {
                        'shape': torch.Size([1, 1, 1, 128]),
                        'dtype': torch.float32,
                        'req_grad': False,
                        'is_batched': True},
                    'BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[2]/BertAttention[attention]/BertSelfOutput[output]/Tensor::__add___384': {
                        'shape': torch.Size([1, 128, 1024]),
                        'dtype': torch.float32,
                        'req_grad': True,
                        'is_batched': True}},
                'outputs': {
                    'BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/tuple::__getitem___642': {
                        'shape': torch.Size([1, 1, 1, 128]),
                        'dtype': torch.float32,
                        'is_batched': True},
                    'BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[5]/BertAttention[attention]/BertSelfOutput[output]/LayerNorm[LayerNorm]': {
                        'shape': torch.Size([1, 128, 1024]),
                        'dtype': torch.float32,
                        'is_batched': True},
                    'BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[5]/BertOutput[output]/Dropout[dropout]': {
                        'shape': torch.Size([1, 128, 1024]),
                        'dtype': torch.float32,
                        'is_batched': True}}},
            2: {
                'inputs': {
                    'BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/tuple::__getitem___642': {
                        'shape': torch.Size([1, 1, 1, 128]),
                        'dtype': torch.float32,
                        'req_grad': False,
                        'is_batched': True},
                    'BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[5]/BertAttention[attention]/BertSelfOutput[output]/LayerNorm[LayerNorm]': {
                        'shape': torch.Size([1, 128, 1024]),
                        'dtype': torch.float32,
                        'req_grad': True,
                        'is_batched': True},
                    'BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[5]/BertOutput[output]/Dropout[dropout]': {
                        'shape': torch.Size([1, 128, 1024]),
                        'dtype': torch.float32,
                        'req_grad': True,
                        'is_batched': True}},
                'outputs': {
                    'BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[8]/prim::TupleConstruct_1130': {
                        'shape': (torch.Size([1, 128, 1024]), torch.Size([1, 1, 1, 128])),
                        'dtype': (torch.float32, torch.float32),
                        'is_batched': (True, True)}}},
            3: {
                'inputs': {
                    'BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[8]/prim::TupleConstruct_1130': {
                        'shape': (torch.Size([1, 128, 1024]), torch.Size([1, 1, 1, 128])),
                        'dtype': (torch.float32, torch.float32),
                        'req_grad': (True, False),
                        'is_batched': (True, True)}},
                'outputs': {
                    'BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/tuple::__getitem___1380': {
                        'shape': torch.Size([1, 1, 1, 128]),
                        'dtype': torch.float32,
                        'is_batched': True},
                    'BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[11]/BertOutput[output]/LayerNorm[LayerNorm]': {
                        'shape': torch.Size([1, 128, 1024]),
                        'dtype': torch.float32,
                        'is_batched': True}}},
            4: {
                'inputs': {
                    'BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/tuple::__getitem___1380': {
                        'shape': torch.Size([1, 1, 1, 128]),
                        'dtype': torch.float32,
                        'req_grad': False,
                        'is_batched': True},
                    'BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[11]/BertOutput[output]/LayerNorm[LayerNorm]': {
                        'shape': torch.Size([1, 128, 1024]),
                        'dtype': torch.float32,
                        'req_grad': False,
                        'is_batched': True}},
                'outputs': {
                    'BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/tuple::__getitem___1749': {
                        'shape': torch.Size([1, 1, 1, 128]),
                        'dtype': torch.float32,
                        'is_batched': True},
                    'BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[14]/BertOutput[output]/Tensor::__add___1866': {
                        'shape': torch.Size([1, 128, 1024]),
                        'dtype': torch.float32,
                        'is_batched': True}}},
            5: {
                'inputs': {
                    'BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/tuple::__getitem___1749': {
                        'shape': torch.Size([1, 1, 1, 128]),
                        'dtype': torch.float32,
                        'req_grad': False,
                        'is_batched': True},
                    'BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[14]/BertOutput[output]/Tensor::__add___1866': {
                        'shape': torch.Size([1, 128, 1024]),
                        'dtype': torch.float32,
                        'req_grad': True,
                        'is_batched': True}},
                'outputs': {
                    'BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/tuple::__getitem___2118': {
                        'shape': torch.Size([1, 1, 1, 128]),
                        'dtype': torch.float32,
                        'is_batched': True},
                    'BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[17]/BertOutput[output]/Tensor::__add___2235': {
                        'shape': torch.Size([1, 128, 1024]),
                        'dtype': torch.float32,
                        'is_batched': True}}},
            6: {
                'inputs': {
                    'BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/tuple::__getitem___2118': {
                        'shape': torch.Size([1, 1, 1, 128]),
                        'dtype': torch.float32,
                        'req_grad': False,
                        'is_batched': True},
                    'BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[17]/BertOutput[output]/Tensor::__add___2235': {
                        'shape': torch.Size([1, 128, 1024]),
                        'dtype': torch.float32,
                        'req_grad': True,
                        'is_batched': True}},
                'outputs': {
                    'BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/tuple::__getitem___2487': {
                        'shape': torch.Size([1, 1, 1, 128]),
                        'dtype': torch.float32,
                        'is_batched': True},
                    'BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[20]/BertOutput[output]/LayerNorm[LayerNorm]': {
                        'shape': torch.Size([1, 128, 1024]),
                        'dtype': torch.float32,
                        'is_batched': True}}},
            7: {
                'inputs': {
                    'BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/tuple::__getitem___2487': {
                        'shape': torch.Size([1, 1, 1, 128]),
                        'dtype': torch.float32,
                        'req_grad': False,
                        'is_batched': True},
                    'BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[20]/BertOutput[output]/LayerNorm[LayerNorm]': {
                        'shape': torch.Size([1, 128, 1024]),
                        'dtype': torch.float32,
                        'req_grad': False,
                        'is_batched': True}},
                'outputs': {
                    'BertForSequenceClassification/Linear[classifier]': {
                        'shape': torch.Size([1, 3]),
                        'dtype': torch.float32,
                        'is_batched': True}}}}}
    
    config['stages'][0]['stage_cls'] = module_path+'.Partition0'
    config['stages'][1]['stage_cls'] = module_path+'.Partition1'
    config['stages'][2]['stage_cls'] = module_path+'.Partition2'
    config['stages'][3]['stage_cls'] = module_path+'.Partition3'
    config['stages'][4]['stage_cls'] = module_path+'.Partition4'
    config['stages'][5]['stage_cls'] = module_path+'.Partition5'
    config['stages'][6]['stage_cls'] = module_path+'.Partition6'
    config['stages'][7]['stage_cls'] = module_path+'.Partition7'
    
    config['stages'][0]['devices'] = ['cpu' if DEBUG else 'cuda:0']
    config['stages'][1]['devices'] = ['cpu' if DEBUG else 'cuda:1']
    config['stages'][2]['devices'] = ['cpu' if DEBUG else 'cuda:2']
    config['stages'][3]['devices'] = ['cpu' if DEBUG else 'cuda:3']
    config['stages'][4]['devices'] = ['cpu' if DEBUG else 'cuda:4']
    config['stages'][5]['devices'] = ['cpu' if DEBUG else 'cuda:5']
    config['stages'][6]['devices'] = ['cpu' if DEBUG else 'cuda:6']
    config['stages'][7]['devices'] = ['cpu' if DEBUG else 'cuda:7']
    
    return config

class Partition0(nn.Module):
    BASIC_BLOCKS=(
            Dropout,
            Linear,
            Embedding,
            LayerNorm,
            Softmax,
        )
    LAYER_SCOPES=[
            'BertForSequenceClassification/BertModel[bert]/BertEmbeddings[embeddings]/Embedding[word_embeddings]',
            'BertForSequenceClassification/BertModel[bert]/BertEmbeddings[embeddings]/Embedding[position_embeddings]',
            'BertForSequenceClassification/BertModel[bert]/BertEmbeddings[embeddings]/Embedding[token_type_embeddings]',
            'BertForSequenceClassification/BertModel[bert]/BertEmbeddings[embeddings]/LayerNorm[LayerNorm]',
            'BertForSequenceClassification/BertModel[bert]/BertEmbeddings[embeddings]/Dropout[dropout]',
            'BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[0]/BertAttention[attention]/BertSelfAttention[self]/Linear[query]',
            'BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[0]/BertAttention[attention]/BertSelfAttention[self]/Linear[key]',
            'BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[0]/BertAttention[attention]/BertSelfAttention[self]/Linear[value]',
            'BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[0]/BertAttention[attention]/BertSelfAttention[self]/Softmax[softmax]',
            'BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[0]/BertAttention[attention]/BertSelfAttention[self]/Dropout[dropout]',
            'BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[0]/BertAttention[attention]/BertSelfOutput[output]/Linear[dense]',
            'BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[0]/BertAttention[attention]/BertSelfOutput[output]/Dropout[dropout]',
            'BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[0]/BertAttention[attention]/BertSelfOutput[output]/LayerNorm[LayerNorm]',
            'BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[0]/BertIntermediate[intermediate]/Linear[dense]',
            'BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[0]/BertOutput[output]/Linear[dense]',
            'BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[0]/BertOutput[output]/Dropout[dropout]',
            'BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[0]/BertOutput[output]/LayerNorm[LayerNorm]',
            'BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[1]/BertAttention[attention]/BertSelfAttention[self]/Linear[query]',
            'BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[1]/BertAttention[attention]/BertSelfAttention[self]/Linear[key]',
            'BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[1]/BertAttention[attention]/BertSelfAttention[self]/Linear[value]',
            'BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[1]/BertAttention[attention]/BertSelfAttention[self]/Softmax[softmax]',
            'BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[1]/BertAttention[attention]/BertSelfAttention[self]/Dropout[dropout]',
            'BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[1]/BertAttention[attention]/BertSelfOutput[output]/Linear[dense]',
            'BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[1]/BertAttention[attention]/BertSelfOutput[output]/Dropout[dropout]',
            'BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[1]/BertAttention[attention]/BertSelfOutput[output]/LayerNorm[LayerNorm]',
            'BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[1]/BertIntermediate[intermediate]/Linear[dense]',
            'BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[1]/BertOutput[output]/Linear[dense]',
            'BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[1]/BertOutput[output]/Dropout[dropout]',
            'BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[1]/BertOutput[output]/LayerNorm[LayerNorm]',
            'BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[2]/BertAttention[attention]/BertSelfAttention[self]/Linear[query]',
            'BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[2]/BertAttention[attention]/BertSelfAttention[self]/Linear[key]',
            'BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[2]/BertAttention[attention]/BertSelfAttention[self]/Linear[value]',
            'BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[2]/BertAttention[attention]/BertSelfAttention[self]/Softmax[softmax]',
            'BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[2]/BertAttention[attention]/BertSelfAttention[self]/Dropout[dropout]',
            'BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[2]/BertAttention[attention]/BertSelfOutput[output]/Linear[dense]',
            'BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[2]/BertAttention[attention]/BertSelfOutput[output]/Dropout[dropout]',
        ]
    TENSORS=[
        ]
    def __init__(self, layers, tensors):
        super(Partition0, self).__init__()

        #initialize partition layers
        for idx,layer_scope in enumerate(self.LAYER_SCOPES):
            self.add_module(f'l_{idx}',layers[layer_scope])

        #initialize partition tensors
        b=p=0
        for tensor_scope in self.TENSORS:
            tensor=tensors[tensor_scope]
            if isinstance(tensor,nn.Parameter):
                self.register_parameter(f'p_{p}',tensor)
                p+=1
            else:
                self.register_buffer(f'b_{b}',tensor)
                b+=1

        self.device = torch.device('cuda:0')
        self.lookup = { 'l_0': 'bert.embeddings.word_embeddings',
                        'l_1': 'bert.embeddings.position_embeddings',
                        'l_2': 'bert.embeddings.token_type_embeddings',
                        'l_3': 'bert.embeddings.LayerNorm',
                        'l_4': 'bert.embeddings.dropout',
                        'l_5': 'bert.encoder.0.attention.self.query',
                        'l_6': 'bert.encoder.0.attention.self.key',
                        'l_7': 'bert.encoder.0.attention.self.value',
                        'l_8': 'bert.encoder.0.attention.self.softmax',
                        'l_9': 'bert.encoder.0.attention.self.dropout',
                        'l_10': 'bert.encoder.0.attention.output.dense',
                        'l_11': 'bert.encoder.0.attention.output.dropout',
                        'l_12': 'bert.encoder.0.attention.output.LayerNorm',
                        'l_13': 'bert.encoder.0.intermediate.dense',
                        'l_14': 'bert.encoder.0.output.dense',
                        'l_15': 'bert.encoder.0.output.dropout',
                        'l_16': 'bert.encoder.0.output.LayerNorm',
                        'l_17': 'bert.encoder.1.attention.self.query',
                        'l_18': 'bert.encoder.1.attention.self.key',
                        'l_19': 'bert.encoder.1.attention.self.value',
                        'l_20': 'bert.encoder.1.attention.self.softmax',
                        'l_21': 'bert.encoder.1.attention.self.dropout',
                        'l_22': 'bert.encoder.1.attention.output.dense',
                        'l_23': 'bert.encoder.1.attention.output.dropout',
                        'l_24': 'bert.encoder.1.attention.output.LayerNorm',
                        'l_25': 'bert.encoder.1.intermediate.dense',
                        'l_26': 'bert.encoder.1.output.dense',
                        'l_27': 'bert.encoder.1.output.dropout',
                        'l_28': 'bert.encoder.1.output.LayerNorm',
                        'l_29': 'bert.encoder.2.attention.self.query',
                        'l_30': 'bert.encoder.2.attention.self.key',
                        'l_31': 'bert.encoder.2.attention.self.value',
                        'l_32': 'bert.encoder.2.attention.self.softmax',
                        'l_33': 'bert.encoder.2.attention.self.dropout',
                        'l_34': 'bert.encoder.2.attention.output.dense',
                        'l_35': 'bert.encoder.2.attention.output.dropout'}

    def forward(self, x0, x1, x2):
        # BertForSequenceClassification/BertModel[bert]/BertEmbeddings[embeddings]/Embedding[word_embeddings] <=> self.l_0
        # BertForSequenceClassification/BertModel[bert]/BertEmbeddings[embeddings]/Embedding[position_embeddings] <=> self.l_1
        # BertForSequenceClassification/BertModel[bert]/BertEmbeddings[embeddings]/Embedding[token_type_embeddings] <=> self.l_2
        # BertForSequenceClassification/BertModel[bert]/BertEmbeddings[embeddings]/LayerNorm[LayerNorm] <=> self.l_3
        # BertForSequenceClassification/BertModel[bert]/BertEmbeddings[embeddings]/Dropout[dropout] <=> self.l_4
        # BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[0]/BertAttention[attention]/BertSelfAttention[self]/Linear[query] <=> self.l_5
        # BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[0]/BertAttention[attention]/BertSelfAttention[self]/Linear[key] <=> self.l_6
        # BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[0]/BertAttention[attention]/BertSelfAttention[self]/Linear[value] <=> self.l_7
        # BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[0]/BertAttention[attention]/BertSelfAttention[self]/Softmax[softmax] <=> self.l_8
        # BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[0]/BertAttention[attention]/BertSelfAttention[self]/Dropout[dropout] <=> self.l_9
        # BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[0]/BertAttention[attention]/BertSelfOutput[output]/Linear[dense] <=> self.l_10
        # BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[0]/BertAttention[attention]/BertSelfOutput[output]/Dropout[dropout] <=> self.l_11
        # BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[0]/BertAttention[attention]/BertSelfOutput[output]/LayerNorm[LayerNorm] <=> self.l_12
        # BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[0]/BertIntermediate[intermediate]/Linear[dense] <=> self.l_13
        # BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[0]/BertOutput[output]/Linear[dense] <=> self.l_14
        # BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[0]/BertOutput[output]/Dropout[dropout] <=> self.l_15
        # BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[0]/BertOutput[output]/LayerNorm[LayerNorm] <=> self.l_16
        # BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[1]/BertAttention[attention]/BertSelfAttention[self]/Linear[query] <=> self.l_17
        # BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[1]/BertAttention[attention]/BertSelfAttention[self]/Linear[key] <=> self.l_18
        # BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[1]/BertAttention[attention]/BertSelfAttention[self]/Linear[value] <=> self.l_19
        # BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[1]/BertAttention[attention]/BertSelfAttention[self]/Softmax[softmax] <=> self.l_20
        # BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[1]/BertAttention[attention]/BertSelfAttention[self]/Dropout[dropout] <=> self.l_21
        # BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[1]/BertAttention[attention]/BertSelfOutput[output]/Linear[dense] <=> self.l_22
        # BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[1]/BertAttention[attention]/BertSelfOutput[output]/Dropout[dropout] <=> self.l_23
        # BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[1]/BertAttention[attention]/BertSelfOutput[output]/LayerNorm[LayerNorm] <=> self.l_24
        # BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[1]/BertIntermediate[intermediate]/Linear[dense] <=> self.l_25
        # BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[1]/BertOutput[output]/Linear[dense] <=> self.l_26
        # BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[1]/BertOutput[output]/Dropout[dropout] <=> self.l_27
        # BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[1]/BertOutput[output]/LayerNorm[LayerNorm] <=> self.l_28
        # BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[2]/BertAttention[attention]/BertSelfAttention[self]/Linear[query] <=> self.l_29
        # BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[2]/BertAttention[attention]/BertSelfAttention[self]/Linear[key] <=> self.l_30
        # BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[2]/BertAttention[attention]/BertSelfAttention[self]/Linear[value] <=> self.l_31
        # BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[2]/BertAttention[attention]/BertSelfAttention[self]/Softmax[softmax] <=> self.l_32
        # BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[2]/BertAttention[attention]/BertSelfAttention[self]/Dropout[dropout] <=> self.l_33
        # BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[2]/BertAttention[attention]/BertSelfOutput[output]/Linear[dense] <=> self.l_34
        # BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[2]/BertAttention[attention]/BertSelfOutput[output]/Dropout[dropout] <=> self.l_35
        # input0 <=> x0
        # input1 <=> x1
        # input2 <=> x2

        # moving inputs to current device no op if already on the correct device
        x0, x1, x2 = move_tensors((x0, x1, x2), self.device)
        t_0 = x1.unsqueeze(1)
        t_0 = t_0.unsqueeze(2)
        t_0 = t_0.to(dtype=torch.float32)
        t_0 = 1.0 - t_0
        t_0 = t_0 * -10000.0
        t_1 = x0.size(1)
        t_1 = torch.arange(t_1, dtype=torch.int64, device=self.device)
        t_1 = t_1.unsqueeze(0)
        t_1 = t_1.expand_as(x0)
        t_2 = self.l_0(x0)
        t_1 = self.l_1(t_1)
        t_3 = self.l_2(x2)
        t_1 = t_2 + t_1
        t_3 = t_1 + t_3
        t_3 = self.l_3(t_3)
        t_3 = self.l_4(t_3)
        t_1 = self.l_5(t_3)
        t_2 = self.l_6(t_3)
        t_4 = self.l_7(t_3)
        t_5 = t_1.size()
        t_6 = slice(None, -1, None)
        t_6 = t_5[t_6]
        t_5 = (16, 64)
        t_5 = t_6 + t_5
        t_6 = t_5[0]
        t_7 = t_5[1]
        t_8 = t_5[2]
        t_5 = t_5[3]
        t_5 = t_1.view(t_6, t_7, t_8, t_5)
        t_5 = t_5.permute(0, 2, 1, 3)
        t_8 = t_2.size()
        t_7 = slice(None, -1, None)
        t_7 = t_8[t_7]
        t_8 = (16, 64)
        t_8 = t_7 + t_8
        t_7 = t_8[0]
        t_6 = t_8[1]
        t_1 = t_8[2]
        t_8 = t_8[3]
        t_8 = t_2.view(t_7, t_6, t_1, t_8)
        t_8 = t_8.permute(0, 2, 1, 3)
        t_1 = t_4.size()
        t_6 = slice(None, -1, None)
        t_6 = t_1[t_6]
        t_1 = (16, 64)
        t_1 = t_6 + t_1
        t_6 = t_1[0]
        t_7 = t_1[1]
        t_2 = t_1[2]
        t_1 = t_1[3]
        t_1 = t_4.view(t_6, t_7, t_2, t_1)
        t_1 = t_1.permute(0, 2, 1, 3)
        t_8 = t_8.transpose(-1, -2)
        t_8 = torch.matmul(t_5, t_8)
        t_5 = math.sqrt(64)
        t_5 = t_8 / t_5
        t_5 = t_5 + t_0
        t_5 = self.l_8(t_5)
        t_5 = self.l_9(t_5)
        t_1 = torch.matmul(t_5, t_1)
        t_1 = t_1.permute(0, 2, 1, 3)
        t_1 = t_1.contiguous()
        t_5 = t_1.size()
        t_8 = slice(None, -2, None)
        t_8 = t_5[t_8]
        t_5 = (1024,)
        t_5 = t_8 + t_5
        t_8 = t_5[0]
        t_2 = t_5[1]
        t_5 = t_5[2]
        t_5 = t_1.view(t_8, t_2, t_5)
        t_5 = self.l_10(t_5)
        t_5 = self.l_11(t_5)
        t_3 = t_5 + t_3
        t_3 = self.l_12(t_3)
        t_5 = self.l_13(t_3)
        t_5 = torch.nn.functional.gelu(t_5)
        t_5 = self.l_14(t_5)
        t_5 = self.l_15(t_5)
        t_3 = t_5 + t_3
        t_3 = self.l_16(t_3)
        t_0 = (t_3, t_0)
        t_3 = t_0[0]
        t_0 = t_0[1]
        t_5 = self.l_17(t_3)
        t_2 = self.l_18(t_3)
        t_8 = self.l_19(t_3)
        t_1 = t_5.size()
        t_7 = slice(None, -1, None)
        t_7 = t_1[t_7]
        t_1 = (16, 64)
        t_1 = t_7 + t_1
        t_7 = t_1[0]
        t_6 = t_1[1]
        t_4 = t_1[2]
        t_1 = t_1[3]
        t_1 = t_5.view(t_7, t_6, t_4, t_1)
        t_1 = t_1.permute(0, 2, 1, 3)
        t_4 = t_2.size()
        t_6 = slice(None, -1, None)
        t_6 = t_4[t_6]
        t_4 = (16, 64)
        t_4 = t_6 + t_4
        t_6 = t_4[0]
        t_7 = t_4[1]
        t_5 = t_4[2]
        t_4 = t_4[3]
        t_4 = t_2.view(t_6, t_7, t_5, t_4)
        t_4 = t_4.permute(0, 2, 1, 3)
        t_5 = t_8.size()
        t_7 = slice(None, -1, None)
        t_7 = t_5[t_7]
        t_5 = (16, 64)
        t_5 = t_7 + t_5
        t_7 = t_5[0]
        t_6 = t_5[1]
        t_2 = t_5[2]
        t_5 = t_5[3]
        t_5 = t_8.view(t_7, t_6, t_2, t_5)
        t_5 = t_5.permute(0, 2, 1, 3)
        t_4 = t_4.transpose(-1, -2)
        t_4 = torch.matmul(t_1, t_4)
        t_1 = math.sqrt(64)
        t_1 = t_4 / t_1
        t_1 = t_1 + t_0
        t_1 = self.l_20(t_1)
        t_1 = self.l_21(t_1)
        t_5 = torch.matmul(t_1, t_5)
        t_5 = t_5.permute(0, 2, 1, 3)
        t_5 = t_5.contiguous()
        t_1 = t_5.size()
        t_4 = slice(None, -2, None)
        t_4 = t_1[t_4]
        t_1 = (1024,)
        t_1 = t_4 + t_1
        t_4 = t_1[0]
        t_2 = t_1[1]
        t_1 = t_1[2]
        t_1 = t_5.view(t_4, t_2, t_1)
        t_1 = self.l_22(t_1)
        t_1 = self.l_23(t_1)
        t_3 = t_1 + t_3
        t_3 = self.l_24(t_3)
        t_1 = self.l_25(t_3)
        t_1 = torch.nn.functional.gelu(t_1)
        t_1 = self.l_26(t_1)
        t_1 = self.l_27(t_1)
        t_3 = t_1 + t_3
        t_3 = self.l_28(t_3)
        t_0 = (t_3, t_0)
        t_3 = t_0[0]
        t_0 = t_0[1]
        t_1 = self.l_29(t_3)
        t_2 = self.l_30(t_3)
        t_4 = self.l_31(t_3)
        t_5 = t_1.size()
        t_6 = slice(None, -1, None)
        t_6 = t_5[t_6]
        t_5 = (16, 64)
        t_5 = t_6 + t_5
        t_6 = t_5[0]
        t_7 = t_5[1]
        t_8 = t_5[2]
        t_5 = t_5[3]
        t_5 = t_1.view(t_6, t_7, t_8, t_5)
        t_5 = t_5.permute(0, 2, 1, 3)
        t_8 = t_2.size()
        t_7 = slice(None, -1, None)
        t_7 = t_8[t_7]
        t_8 = (16, 64)
        t_8 = t_7 + t_8
        t_7 = t_8[0]
        t_6 = t_8[1]
        t_1 = t_8[2]
        t_8 = t_8[3]
        t_8 = t_2.view(t_7, t_6, t_1, t_8)
        t_8 = t_8.permute(0, 2, 1, 3)
        t_1 = t_4.size()
        t_6 = slice(None, -1, None)
        t_6 = t_1[t_6]
        t_1 = (16, 64)
        t_1 = t_6 + t_1
        t_6 = t_1[0]
        t_7 = t_1[1]
        t_2 = t_1[2]
        t_1 = t_1[3]
        t_1 = t_4.view(t_6, t_7, t_2, t_1)
        t_1 = t_1.permute(0, 2, 1, 3)
        t_8 = t_8.transpose(-1, -2)
        t_8 = torch.matmul(t_5, t_8)
        t_5 = math.sqrt(64)
        t_5 = t_8 / t_5
        t_5 = t_5 + t_0
        t_5 = self.l_32(t_5)
        t_5 = self.l_33(t_5)
        t_1 = torch.matmul(t_5, t_1)
        t_1 = t_1.permute(0, 2, 1, 3)
        t_1 = t_1.contiguous()
        t_5 = t_1.size()
        t_8 = slice(None, -2, None)
        t_8 = t_5[t_8]
        t_5 = (1024,)
        t_5 = t_8 + t_5
        t_8 = t_5[0]
        t_2 = t_5[1]
        t_5 = t_5[2]
        t_5 = t_1.view(t_8, t_2, t_5)
        t_5 = self.l_34(t_5)
        t_5 = self.l_35(t_5)
        t_3 = t_5 + t_3
        # returning:
        # BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/tuple::__getitem___273
        # BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[2]/BertAttention[attention]/BertSelfOutput[output]/Tensor::__add___384
        return (t_0, t_3)

    def state_dict(self,device=None):
        # we return the state dict of this part as it should be in the original model
        return state_dict(self,device=device)

    def load_state_dict(self, state):
        return load_state_dict(self,state)

    def named_parameters(self,recurse=True):
        # we return the named parameters of this part as it should be in the original model
        return named_parameters(self,recurse=recurse)

    def named_buffers(self,recurse=True):
        # we return the named buffers of this part as it should be in the original model
        return named_buffers(self,recurse=recurse)

    def cpu(self):
        return cpu(self)

    def cuda(self,device=None):
        return cuda(self,device=device)

    def to(self, *args, **kwargs):
        return to(self,*args,**kwargs)


class Partition1(nn.Module):
    BASIC_BLOCKS=(
            Linear,
            Dropout,
            Softmax,
            LayerNorm,
        )
    LAYER_SCOPES=[
            'BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[2]/BertAttention[attention]/BertSelfOutput[output]/LayerNorm[LayerNorm]',
            'BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[2]/BertIntermediate[intermediate]/Linear[dense]',
            'BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[2]/BertOutput[output]/Linear[dense]',
            'BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[2]/BertOutput[output]/Dropout[dropout]',
            'BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[2]/BertOutput[output]/LayerNorm[LayerNorm]',
            'BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[3]/BertAttention[attention]/BertSelfAttention[self]/Linear[query]',
            'BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[3]/BertAttention[attention]/BertSelfAttention[self]/Linear[key]',
            'BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[3]/BertAttention[attention]/BertSelfAttention[self]/Linear[value]',
            'BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[3]/BertAttention[attention]/BertSelfAttention[self]/Softmax[softmax]',
            'BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[3]/BertAttention[attention]/BertSelfAttention[self]/Dropout[dropout]',
            'BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[3]/BertAttention[attention]/BertSelfOutput[output]/Linear[dense]',
            'BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[3]/BertAttention[attention]/BertSelfOutput[output]/Dropout[dropout]',
            'BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[3]/BertAttention[attention]/BertSelfOutput[output]/LayerNorm[LayerNorm]',
            'BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[3]/BertIntermediate[intermediate]/Linear[dense]',
            'BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[3]/BertOutput[output]/Linear[dense]',
            'BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[3]/BertOutput[output]/Dropout[dropout]',
            'BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[3]/BertOutput[output]/LayerNorm[LayerNorm]',
            'BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[4]/BertAttention[attention]/BertSelfAttention[self]/Linear[query]',
            'BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[4]/BertAttention[attention]/BertSelfAttention[self]/Linear[key]',
            'BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[4]/BertAttention[attention]/BertSelfAttention[self]/Linear[value]',
            'BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[4]/BertAttention[attention]/BertSelfAttention[self]/Softmax[softmax]',
            'BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[4]/BertAttention[attention]/BertSelfAttention[self]/Dropout[dropout]',
            'BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[4]/BertAttention[attention]/BertSelfOutput[output]/Linear[dense]',
            'BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[4]/BertAttention[attention]/BertSelfOutput[output]/Dropout[dropout]',
            'BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[4]/BertAttention[attention]/BertSelfOutput[output]/LayerNorm[LayerNorm]',
            'BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[4]/BertIntermediate[intermediate]/Linear[dense]',
            'BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[4]/BertOutput[output]/Linear[dense]',
            'BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[4]/BertOutput[output]/Dropout[dropout]',
            'BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[4]/BertOutput[output]/LayerNorm[LayerNorm]',
            'BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[5]/BertAttention[attention]/BertSelfAttention[self]/Linear[query]',
            'BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[5]/BertAttention[attention]/BertSelfAttention[self]/Linear[key]',
            'BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[5]/BertAttention[attention]/BertSelfAttention[self]/Linear[value]',
            'BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[5]/BertAttention[attention]/BertSelfAttention[self]/Softmax[softmax]',
            'BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[5]/BertAttention[attention]/BertSelfAttention[self]/Dropout[dropout]',
            'BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[5]/BertAttention[attention]/BertSelfOutput[output]/Linear[dense]',
            'BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[5]/BertAttention[attention]/BertSelfOutput[output]/Dropout[dropout]',
            'BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[5]/BertAttention[attention]/BertSelfOutput[output]/LayerNorm[LayerNorm]',
            'BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[5]/BertIntermediate[intermediate]/Linear[dense]',
            'BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[5]/BertOutput[output]/Linear[dense]',
            'BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[5]/BertOutput[output]/Dropout[dropout]',
        ]
    TENSORS=[
        ]
    def __init__(self, layers, tensors):
        super(Partition1, self).__init__()

        #initialize partition layers
        for idx,layer_scope in enumerate(self.LAYER_SCOPES):
            self.add_module(f'l_{idx}',layers[layer_scope])

        #initialize partition tensors
        b=p=0
        for tensor_scope in self.TENSORS:
            tensor=tensors[tensor_scope]
            if isinstance(tensor,nn.Parameter):
                self.register_parameter(f'p_{p}',tensor)
                p+=1
            else:
                self.register_buffer(f'b_{b}',tensor)
                b+=1

        self.device = torch.device('cuda:1')
        self.lookup = { 'l_0': 'bert.encoder.2.attention.output.LayerNorm',
                        'l_1': 'bert.encoder.2.intermediate.dense',
                        'l_2': 'bert.encoder.2.output.dense',
                        'l_3': 'bert.encoder.2.output.dropout',
                        'l_4': 'bert.encoder.2.output.LayerNorm',
                        'l_5': 'bert.encoder.3.attention.self.query',
                        'l_6': 'bert.encoder.3.attention.self.key',
                        'l_7': 'bert.encoder.3.attention.self.value',
                        'l_8': 'bert.encoder.3.attention.self.softmax',
                        'l_9': 'bert.encoder.3.attention.self.dropout',
                        'l_10': 'bert.encoder.3.attention.output.dense',
                        'l_11': 'bert.encoder.3.attention.output.dropout',
                        'l_12': 'bert.encoder.3.attention.output.LayerNorm',
                        'l_13': 'bert.encoder.3.intermediate.dense',
                        'l_14': 'bert.encoder.3.output.dense',
                        'l_15': 'bert.encoder.3.output.dropout',
                        'l_16': 'bert.encoder.3.output.LayerNorm',
                        'l_17': 'bert.encoder.4.attention.self.query',
                        'l_18': 'bert.encoder.4.attention.self.key',
                        'l_19': 'bert.encoder.4.attention.self.value',
                        'l_20': 'bert.encoder.4.attention.self.softmax',
                        'l_21': 'bert.encoder.4.attention.self.dropout',
                        'l_22': 'bert.encoder.4.attention.output.dense',
                        'l_23': 'bert.encoder.4.attention.output.dropout',
                        'l_24': 'bert.encoder.4.attention.output.LayerNorm',
                        'l_25': 'bert.encoder.4.intermediate.dense',
                        'l_26': 'bert.encoder.4.output.dense',
                        'l_27': 'bert.encoder.4.output.dropout',
                        'l_28': 'bert.encoder.4.output.LayerNorm',
                        'l_29': 'bert.encoder.5.attention.self.query',
                        'l_30': 'bert.encoder.5.attention.self.key',
                        'l_31': 'bert.encoder.5.attention.self.value',
                        'l_32': 'bert.encoder.5.attention.self.softmax',
                        'l_33': 'bert.encoder.5.attention.self.dropout',
                        'l_34': 'bert.encoder.5.attention.output.dense',
                        'l_35': 'bert.encoder.5.attention.output.dropout',
                        'l_36': 'bert.encoder.5.attention.output.LayerNorm',
                        'l_37': 'bert.encoder.5.intermediate.dense',
                        'l_38': 'bert.encoder.5.output.dense',
                        'l_39': 'bert.encoder.5.output.dropout'}

    def forward(self, x0, x1):
        # BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[2]/BertAttention[attention]/BertSelfOutput[output]/LayerNorm[LayerNorm] <=> self.l_0
        # BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[2]/BertIntermediate[intermediate]/Linear[dense] <=> self.l_1
        # BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[2]/BertOutput[output]/Linear[dense] <=> self.l_2
        # BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[2]/BertOutput[output]/Dropout[dropout] <=> self.l_3
        # BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[2]/BertOutput[output]/LayerNorm[LayerNorm] <=> self.l_4
        # BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[3]/BertAttention[attention]/BertSelfAttention[self]/Linear[query] <=> self.l_5
        # BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[3]/BertAttention[attention]/BertSelfAttention[self]/Linear[key] <=> self.l_6
        # BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[3]/BertAttention[attention]/BertSelfAttention[self]/Linear[value] <=> self.l_7
        # BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[3]/BertAttention[attention]/BertSelfAttention[self]/Softmax[softmax] <=> self.l_8
        # BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[3]/BertAttention[attention]/BertSelfAttention[self]/Dropout[dropout] <=> self.l_9
        # BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[3]/BertAttention[attention]/BertSelfOutput[output]/Linear[dense] <=> self.l_10
        # BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[3]/BertAttention[attention]/BertSelfOutput[output]/Dropout[dropout] <=> self.l_11
        # BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[3]/BertAttention[attention]/BertSelfOutput[output]/LayerNorm[LayerNorm] <=> self.l_12
        # BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[3]/BertIntermediate[intermediate]/Linear[dense] <=> self.l_13
        # BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[3]/BertOutput[output]/Linear[dense] <=> self.l_14
        # BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[3]/BertOutput[output]/Dropout[dropout] <=> self.l_15
        # BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[3]/BertOutput[output]/LayerNorm[LayerNorm] <=> self.l_16
        # BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[4]/BertAttention[attention]/BertSelfAttention[self]/Linear[query] <=> self.l_17
        # BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[4]/BertAttention[attention]/BertSelfAttention[self]/Linear[key] <=> self.l_18
        # BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[4]/BertAttention[attention]/BertSelfAttention[self]/Linear[value] <=> self.l_19
        # BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[4]/BertAttention[attention]/BertSelfAttention[self]/Softmax[softmax] <=> self.l_20
        # BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[4]/BertAttention[attention]/BertSelfAttention[self]/Dropout[dropout] <=> self.l_21
        # BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[4]/BertAttention[attention]/BertSelfOutput[output]/Linear[dense] <=> self.l_22
        # BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[4]/BertAttention[attention]/BertSelfOutput[output]/Dropout[dropout] <=> self.l_23
        # BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[4]/BertAttention[attention]/BertSelfOutput[output]/LayerNorm[LayerNorm] <=> self.l_24
        # BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[4]/BertIntermediate[intermediate]/Linear[dense] <=> self.l_25
        # BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[4]/BertOutput[output]/Linear[dense] <=> self.l_26
        # BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[4]/BertOutput[output]/Dropout[dropout] <=> self.l_27
        # BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[4]/BertOutput[output]/LayerNorm[LayerNorm] <=> self.l_28
        # BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[5]/BertAttention[attention]/BertSelfAttention[self]/Linear[query] <=> self.l_29
        # BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[5]/BertAttention[attention]/BertSelfAttention[self]/Linear[key] <=> self.l_30
        # BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[5]/BertAttention[attention]/BertSelfAttention[self]/Linear[value] <=> self.l_31
        # BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[5]/BertAttention[attention]/BertSelfAttention[self]/Softmax[softmax] <=> self.l_32
        # BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[5]/BertAttention[attention]/BertSelfAttention[self]/Dropout[dropout] <=> self.l_33
        # BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[5]/BertAttention[attention]/BertSelfOutput[output]/Linear[dense] <=> self.l_34
        # BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[5]/BertAttention[attention]/BertSelfOutput[output]/Dropout[dropout] <=> self.l_35
        # BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[5]/BertAttention[attention]/BertSelfOutput[output]/LayerNorm[LayerNorm] <=> self.l_36
        # BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[5]/BertIntermediate[intermediate]/Linear[dense] <=> self.l_37
        # BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[5]/BertOutput[output]/Linear[dense] <=> self.l_38
        # BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[5]/BertOutput[output]/Dropout[dropout] <=> self.l_39
        # BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/tuple::__getitem___273 <=> x0
        # BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[2]/BertAttention[attention]/BertSelfOutput[output]/Tensor::__add___384 <=> x1

        # moving inputs to current device no op if already on the correct device
        x0, x1 = move_tensors((x0, x1), self.device)
        t_0 = self.l_0(x1)
        t_1 = self.l_1(t_0)
        t_1 = torch.nn.functional.gelu(t_1)
        t_1 = self.l_2(t_1)
        t_1 = self.l_3(t_1)
        t_0 = t_1 + t_0
        t_0 = self.l_4(t_0)
        t_0 = (t_0, x0)
        t_1 = t_0[0]
        t_0 = t_0[1]
        t_2 = self.l_5(t_1)
        t_3 = self.l_6(t_1)
        t_4 = self.l_7(t_1)
        t_5 = t_2.size()
        t_6 = slice(None, -1, None)
        t_6 = t_5[t_6]
        t_5 = (16, 64)
        t_5 = t_6 + t_5
        t_6 = t_5[0]
        t_7 = t_5[1]
        t_8 = t_5[2]
        t_5 = t_5[3]
        t_5 = t_2.view(t_6, t_7, t_8, t_5)
        t_5 = t_5.permute(0, 2, 1, 3)
        t_8 = t_3.size()
        t_7 = slice(None, -1, None)
        t_7 = t_8[t_7]
        t_8 = (16, 64)
        t_8 = t_7 + t_8
        t_7 = t_8[0]
        t_6 = t_8[1]
        t_2 = t_8[2]
        t_8 = t_8[3]
        t_8 = t_3.view(t_7, t_6, t_2, t_8)
        t_8 = t_8.permute(0, 2, 1, 3)
        t_2 = t_4.size()
        t_6 = slice(None, -1, None)
        t_6 = t_2[t_6]
        t_2 = (16, 64)
        t_2 = t_6 + t_2
        t_6 = t_2[0]
        t_7 = t_2[1]
        t_3 = t_2[2]
        t_2 = t_2[3]
        t_2 = t_4.view(t_6, t_7, t_3, t_2)
        t_2 = t_2.permute(0, 2, 1, 3)
        t_8 = t_8.transpose(-1, -2)
        t_8 = torch.matmul(t_5, t_8)
        t_5 = math.sqrt(64)
        t_5 = t_8 / t_5
        t_5 = t_5 + t_0
        t_5 = self.l_8(t_5)
        t_5 = self.l_9(t_5)
        t_2 = torch.matmul(t_5, t_2)
        t_2 = t_2.permute(0, 2, 1, 3)
        t_2 = t_2.contiguous()
        t_5 = t_2.size()
        t_8 = slice(None, -2, None)
        t_8 = t_5[t_8]
        t_5 = (1024,)
        t_5 = t_8 + t_5
        t_8 = t_5[0]
        t_3 = t_5[1]
        t_5 = t_5[2]
        t_5 = t_2.view(t_8, t_3, t_5)
        t_5 = self.l_10(t_5)
        t_5 = self.l_11(t_5)
        t_1 = t_5 + t_1
        t_1 = self.l_12(t_1)
        t_5 = self.l_13(t_1)
        t_5 = torch.nn.functional.gelu(t_5)
        t_5 = self.l_14(t_5)
        t_5 = self.l_15(t_5)
        t_1 = t_5 + t_1
        t_1 = self.l_16(t_1)
        t_0 = (t_1, t_0)
        t_1 = t_0[0]
        t_0 = t_0[1]
        t_5 = self.l_17(t_1)
        t_3 = self.l_18(t_1)
        t_8 = self.l_19(t_1)
        t_2 = t_5.size()
        t_7 = slice(None, -1, None)
        t_7 = t_2[t_7]
        t_2 = (16, 64)
        t_2 = t_7 + t_2
        t_7 = t_2[0]
        t_6 = t_2[1]
        t_4 = t_2[2]
        t_2 = t_2[3]
        t_2 = t_5.view(t_7, t_6, t_4, t_2)
        t_2 = t_2.permute(0, 2, 1, 3)
        t_4 = t_3.size()
        t_6 = slice(None, -1, None)
        t_6 = t_4[t_6]
        t_4 = (16, 64)
        t_4 = t_6 + t_4
        t_6 = t_4[0]
        t_7 = t_4[1]
        t_5 = t_4[2]
        t_4 = t_4[3]
        t_4 = t_3.view(t_6, t_7, t_5, t_4)
        t_4 = t_4.permute(0, 2, 1, 3)
        t_5 = t_8.size()
        t_7 = slice(None, -1, None)
        t_7 = t_5[t_7]
        t_5 = (16, 64)
        t_5 = t_7 + t_5
        t_7 = t_5[0]
        t_6 = t_5[1]
        t_3 = t_5[2]
        t_5 = t_5[3]
        t_5 = t_8.view(t_7, t_6, t_3, t_5)
        t_5 = t_5.permute(0, 2, 1, 3)
        t_4 = t_4.transpose(-1, -2)
        t_4 = torch.matmul(t_2, t_4)
        t_2 = math.sqrt(64)
        t_2 = t_4 / t_2
        t_2 = t_2 + t_0
        t_2 = self.l_20(t_2)
        t_2 = self.l_21(t_2)
        t_5 = torch.matmul(t_2, t_5)
        t_5 = t_5.permute(0, 2, 1, 3)
        t_5 = t_5.contiguous()
        t_2 = t_5.size()
        t_4 = slice(None, -2, None)
        t_4 = t_2[t_4]
        t_2 = (1024,)
        t_2 = t_4 + t_2
        t_4 = t_2[0]
        t_3 = t_2[1]
        t_2 = t_2[2]
        t_2 = t_5.view(t_4, t_3, t_2)
        t_2 = self.l_22(t_2)
        t_2 = self.l_23(t_2)
        t_1 = t_2 + t_1
        t_1 = self.l_24(t_1)
        t_2 = self.l_25(t_1)
        t_2 = torch.nn.functional.gelu(t_2)
        t_2 = self.l_26(t_2)
        t_2 = self.l_27(t_2)
        t_1 = t_2 + t_1
        t_1 = self.l_28(t_1)
        t_0 = (t_1, t_0)
        t_1 = t_0[0]
        t_0 = t_0[1]
        t_2 = self.l_29(t_1)
        t_3 = self.l_30(t_1)
        t_4 = self.l_31(t_1)
        t_5 = t_2.size()
        t_6 = slice(None, -1, None)
        t_6 = t_5[t_6]
        t_5 = (16, 64)
        t_5 = t_6 + t_5
        t_6 = t_5[0]
        t_7 = t_5[1]
        t_8 = t_5[2]
        t_5 = t_5[3]
        t_5 = t_2.view(t_6, t_7, t_8, t_5)
        t_5 = t_5.permute(0, 2, 1, 3)
        t_8 = t_3.size()
        t_7 = slice(None, -1, None)
        t_7 = t_8[t_7]
        t_8 = (16, 64)
        t_8 = t_7 + t_8
        t_7 = t_8[0]
        t_6 = t_8[1]
        t_2 = t_8[2]
        t_8 = t_8[3]
        t_8 = t_3.view(t_7, t_6, t_2, t_8)
        t_8 = t_8.permute(0, 2, 1, 3)
        t_2 = t_4.size()
        t_6 = slice(None, -1, None)
        t_6 = t_2[t_6]
        t_2 = (16, 64)
        t_2 = t_6 + t_2
        t_6 = t_2[0]
        t_7 = t_2[1]
        t_3 = t_2[2]
        t_2 = t_2[3]
        t_2 = t_4.view(t_6, t_7, t_3, t_2)
        t_2 = t_2.permute(0, 2, 1, 3)
        t_8 = t_8.transpose(-1, -2)
        t_8 = torch.matmul(t_5, t_8)
        t_5 = math.sqrt(64)
        t_5 = t_8 / t_5
        t_5 = t_5 + t_0
        t_5 = self.l_32(t_5)
        t_5 = self.l_33(t_5)
        t_2 = torch.matmul(t_5, t_2)
        t_2 = t_2.permute(0, 2, 1, 3)
        t_2 = t_2.contiguous()
        t_5 = t_2.size()
        t_8 = slice(None, -2, None)
        t_8 = t_5[t_8]
        t_5 = (1024,)
        t_5 = t_8 + t_5
        t_8 = t_5[0]
        t_3 = t_5[1]
        t_5 = t_5[2]
        t_5 = t_2.view(t_8, t_3, t_5)
        t_5 = self.l_34(t_5)
        t_5 = self.l_35(t_5)
        t_1 = t_5 + t_1
        t_1 = self.l_36(t_1)
        t_5 = self.l_37(t_1)
        t_5 = torch.nn.functional.gelu(t_5)
        t_5 = self.l_38(t_5)
        t_5 = self.l_39(t_5)
        # returning:
        # BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/tuple::__getitem___642
        # BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[5]/BertAttention[attention]/BertSelfOutput[output]/LayerNorm[LayerNorm]
        # BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[5]/BertOutput[output]/Dropout[dropout]
        return (t_0, t_1, t_5)

    def state_dict(self,device=None):
        # we return the state dict of this part as it should be in the original model
        return state_dict(self,device=device)

    def load_state_dict(self, state):
        return load_state_dict(self,state)

    def named_parameters(self,recurse=True):
        # we return the named parameters of this part as it should be in the original model
        return named_parameters(self,recurse=recurse)

    def named_buffers(self,recurse=True):
        # we return the named buffers of this part as it should be in the original model
        return named_buffers(self,recurse=recurse)

    def cpu(self):
        return cpu(self)

    def cuda(self,device=None):
        return cuda(self,device=device)

    def to(self, *args, **kwargs):
        return to(self,*args,**kwargs)


class Partition2(nn.Module):
    BASIC_BLOCKS=(
            Linear,
            Softmax,
            Dropout,
            LayerNorm,
        )
    LAYER_SCOPES=[
            'BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[5]/BertOutput[output]/LayerNorm[LayerNorm]',
            'BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[6]/BertAttention[attention]/BertSelfAttention[self]/Linear[query]',
            'BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[6]/BertAttention[attention]/BertSelfAttention[self]/Linear[key]',
            'BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[6]/BertAttention[attention]/BertSelfAttention[self]/Linear[value]',
            'BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[6]/BertAttention[attention]/BertSelfAttention[self]/Softmax[softmax]',
            'BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[6]/BertAttention[attention]/BertSelfAttention[self]/Dropout[dropout]',
            'BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[6]/BertAttention[attention]/BertSelfOutput[output]/Linear[dense]',
            'BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[6]/BertAttention[attention]/BertSelfOutput[output]/Dropout[dropout]',
            'BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[6]/BertAttention[attention]/BertSelfOutput[output]/LayerNorm[LayerNorm]',
            'BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[6]/BertIntermediate[intermediate]/Linear[dense]',
            'BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[6]/BertOutput[output]/Linear[dense]',
            'BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[6]/BertOutput[output]/Dropout[dropout]',
            'BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[6]/BertOutput[output]/LayerNorm[LayerNorm]',
            'BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[7]/BertAttention[attention]/BertSelfAttention[self]/Linear[query]',
            'BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[7]/BertAttention[attention]/BertSelfAttention[self]/Linear[key]',
            'BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[7]/BertAttention[attention]/BertSelfAttention[self]/Linear[value]',
            'BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[7]/BertAttention[attention]/BertSelfAttention[self]/Softmax[softmax]',
            'BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[7]/BertAttention[attention]/BertSelfAttention[self]/Dropout[dropout]',
            'BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[7]/BertAttention[attention]/BertSelfOutput[output]/Linear[dense]',
            'BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[7]/BertAttention[attention]/BertSelfOutput[output]/Dropout[dropout]',
            'BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[7]/BertAttention[attention]/BertSelfOutput[output]/LayerNorm[LayerNorm]',
            'BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[7]/BertIntermediate[intermediate]/Linear[dense]',
            'BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[7]/BertOutput[output]/Linear[dense]',
            'BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[7]/BertOutput[output]/Dropout[dropout]',
            'BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[7]/BertOutput[output]/LayerNorm[LayerNorm]',
            'BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[8]/BertAttention[attention]/BertSelfAttention[self]/Linear[query]',
            'BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[8]/BertAttention[attention]/BertSelfAttention[self]/Linear[key]',
            'BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[8]/BertAttention[attention]/BertSelfAttention[self]/Linear[value]',
            'BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[8]/BertAttention[attention]/BertSelfAttention[self]/Softmax[softmax]',
            'BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[8]/BertAttention[attention]/BertSelfAttention[self]/Dropout[dropout]',
            'BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[8]/BertAttention[attention]/BertSelfOutput[output]/Linear[dense]',
            'BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[8]/BertAttention[attention]/BertSelfOutput[output]/Dropout[dropout]',
            'BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[8]/BertAttention[attention]/BertSelfOutput[output]/LayerNorm[LayerNorm]',
            'BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[8]/BertIntermediate[intermediate]/Linear[dense]',
            'BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[8]/BertOutput[output]/Linear[dense]',
            'BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[8]/BertOutput[output]/Dropout[dropout]',
            'BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[8]/BertOutput[output]/LayerNorm[LayerNorm]',
        ]
    TENSORS=[
        ]
    def __init__(self, layers, tensors):
        super(Partition2, self).__init__()

        #initialize partition layers
        for idx,layer_scope in enumerate(self.LAYER_SCOPES):
            self.add_module(f'l_{idx}',layers[layer_scope])

        #initialize partition tensors
        b=p=0
        for tensor_scope in self.TENSORS:
            tensor=tensors[tensor_scope]
            if isinstance(tensor,nn.Parameter):
                self.register_parameter(f'p_{p}',tensor)
                p+=1
            else:
                self.register_buffer(f'b_{b}',tensor)
                b+=1

        self.device = torch.device('cuda:2')
        self.lookup = { 'l_0': 'bert.encoder.5.output.LayerNorm',
                        'l_1': 'bert.encoder.6.attention.self.query',
                        'l_2': 'bert.encoder.6.attention.self.key',
                        'l_3': 'bert.encoder.6.attention.self.value',
                        'l_4': 'bert.encoder.6.attention.self.softmax',
                        'l_5': 'bert.encoder.6.attention.self.dropout',
                        'l_6': 'bert.encoder.6.attention.output.dense',
                        'l_7': 'bert.encoder.6.attention.output.dropout',
                        'l_8': 'bert.encoder.6.attention.output.LayerNorm',
                        'l_9': 'bert.encoder.6.intermediate.dense',
                        'l_10': 'bert.encoder.6.output.dense',
                        'l_11': 'bert.encoder.6.output.dropout',
                        'l_12': 'bert.encoder.6.output.LayerNorm',
                        'l_13': 'bert.encoder.7.attention.self.query',
                        'l_14': 'bert.encoder.7.attention.self.key',
                        'l_15': 'bert.encoder.7.attention.self.value',
                        'l_16': 'bert.encoder.7.attention.self.softmax',
                        'l_17': 'bert.encoder.7.attention.self.dropout',
                        'l_18': 'bert.encoder.7.attention.output.dense',
                        'l_19': 'bert.encoder.7.attention.output.dropout',
                        'l_20': 'bert.encoder.7.attention.output.LayerNorm',
                        'l_21': 'bert.encoder.7.intermediate.dense',
                        'l_22': 'bert.encoder.7.output.dense',
                        'l_23': 'bert.encoder.7.output.dropout',
                        'l_24': 'bert.encoder.7.output.LayerNorm',
                        'l_25': 'bert.encoder.8.attention.self.query',
                        'l_26': 'bert.encoder.8.attention.self.key',
                        'l_27': 'bert.encoder.8.attention.self.value',
                        'l_28': 'bert.encoder.8.attention.self.softmax',
                        'l_29': 'bert.encoder.8.attention.self.dropout',
                        'l_30': 'bert.encoder.8.attention.output.dense',
                        'l_31': 'bert.encoder.8.attention.output.dropout',
                        'l_32': 'bert.encoder.8.attention.output.LayerNorm',
                        'l_33': 'bert.encoder.8.intermediate.dense',
                        'l_34': 'bert.encoder.8.output.dense',
                        'l_35': 'bert.encoder.8.output.dropout',
                        'l_36': 'bert.encoder.8.output.LayerNorm'}

    def forward(self, x0, x1, x2):
        # BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[5]/BertOutput[output]/LayerNorm[LayerNorm] <=> self.l_0
        # BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[6]/BertAttention[attention]/BertSelfAttention[self]/Linear[query] <=> self.l_1
        # BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[6]/BertAttention[attention]/BertSelfAttention[self]/Linear[key] <=> self.l_2
        # BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[6]/BertAttention[attention]/BertSelfAttention[self]/Linear[value] <=> self.l_3
        # BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[6]/BertAttention[attention]/BertSelfAttention[self]/Softmax[softmax] <=> self.l_4
        # BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[6]/BertAttention[attention]/BertSelfAttention[self]/Dropout[dropout] <=> self.l_5
        # BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[6]/BertAttention[attention]/BertSelfOutput[output]/Linear[dense] <=> self.l_6
        # BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[6]/BertAttention[attention]/BertSelfOutput[output]/Dropout[dropout] <=> self.l_7
        # BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[6]/BertAttention[attention]/BertSelfOutput[output]/LayerNorm[LayerNorm] <=> self.l_8
        # BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[6]/BertIntermediate[intermediate]/Linear[dense] <=> self.l_9
        # BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[6]/BertOutput[output]/Linear[dense] <=> self.l_10
        # BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[6]/BertOutput[output]/Dropout[dropout] <=> self.l_11
        # BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[6]/BertOutput[output]/LayerNorm[LayerNorm] <=> self.l_12
        # BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[7]/BertAttention[attention]/BertSelfAttention[self]/Linear[query] <=> self.l_13
        # BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[7]/BertAttention[attention]/BertSelfAttention[self]/Linear[key] <=> self.l_14
        # BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[7]/BertAttention[attention]/BertSelfAttention[self]/Linear[value] <=> self.l_15
        # BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[7]/BertAttention[attention]/BertSelfAttention[self]/Softmax[softmax] <=> self.l_16
        # BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[7]/BertAttention[attention]/BertSelfAttention[self]/Dropout[dropout] <=> self.l_17
        # BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[7]/BertAttention[attention]/BertSelfOutput[output]/Linear[dense] <=> self.l_18
        # BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[7]/BertAttention[attention]/BertSelfOutput[output]/Dropout[dropout] <=> self.l_19
        # BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[7]/BertAttention[attention]/BertSelfOutput[output]/LayerNorm[LayerNorm] <=> self.l_20
        # BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[7]/BertIntermediate[intermediate]/Linear[dense] <=> self.l_21
        # BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[7]/BertOutput[output]/Linear[dense] <=> self.l_22
        # BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[7]/BertOutput[output]/Dropout[dropout] <=> self.l_23
        # BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[7]/BertOutput[output]/LayerNorm[LayerNorm] <=> self.l_24
        # BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[8]/BertAttention[attention]/BertSelfAttention[self]/Linear[query] <=> self.l_25
        # BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[8]/BertAttention[attention]/BertSelfAttention[self]/Linear[key] <=> self.l_26
        # BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[8]/BertAttention[attention]/BertSelfAttention[self]/Linear[value] <=> self.l_27
        # BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[8]/BertAttention[attention]/BertSelfAttention[self]/Softmax[softmax] <=> self.l_28
        # BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[8]/BertAttention[attention]/BertSelfAttention[self]/Dropout[dropout] <=> self.l_29
        # BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[8]/BertAttention[attention]/BertSelfOutput[output]/Linear[dense] <=> self.l_30
        # BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[8]/BertAttention[attention]/BertSelfOutput[output]/Dropout[dropout] <=> self.l_31
        # BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[8]/BertAttention[attention]/BertSelfOutput[output]/LayerNorm[LayerNorm] <=> self.l_32
        # BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[8]/BertIntermediate[intermediate]/Linear[dense] <=> self.l_33
        # BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[8]/BertOutput[output]/Linear[dense] <=> self.l_34
        # BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[8]/BertOutput[output]/Dropout[dropout] <=> self.l_35
        # BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[8]/BertOutput[output]/LayerNorm[LayerNorm] <=> self.l_36
        # BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/tuple::__getitem___642 <=> x0
        # BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[5]/BertAttention[attention]/BertSelfOutput[output]/LayerNorm[LayerNorm] <=> x1
        # BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[5]/BertOutput[output]/Dropout[dropout] <=> x2

        # moving inputs to current device no op if already on the correct device
        x0, x1, x2 = move_tensors((x0, x1, x2), self.device)
        t_0 = x2 + x1
        t_0 = self.l_0(t_0)
        t_0 = (t_0, x0)
        t_1 = t_0[0]
        t_0 = t_0[1]
        t_2 = self.l_1(t_1)
        t_3 = self.l_2(t_1)
        t_4 = self.l_3(t_1)
        t_5 = t_2.size()
        t_6 = slice(None, -1, None)
        t_6 = t_5[t_6]
        t_5 = (16, 64)
        t_5 = t_6 + t_5
        t_6 = t_5[0]
        t_7 = t_5[1]
        t_8 = t_5[2]
        t_5 = t_5[3]
        t_5 = t_2.view(t_6, t_7, t_8, t_5)
        t_5 = t_5.permute(0, 2, 1, 3)
        t_8 = t_3.size()
        t_7 = slice(None, -1, None)
        t_7 = t_8[t_7]
        t_8 = (16, 64)
        t_8 = t_7 + t_8
        t_7 = t_8[0]
        t_6 = t_8[1]
        t_2 = t_8[2]
        t_8 = t_8[3]
        t_8 = t_3.view(t_7, t_6, t_2, t_8)
        t_8 = t_8.permute(0, 2, 1, 3)
        t_2 = t_4.size()
        t_6 = slice(None, -1, None)
        t_6 = t_2[t_6]
        t_2 = (16, 64)
        t_2 = t_6 + t_2
        t_6 = t_2[0]
        t_7 = t_2[1]
        t_3 = t_2[2]
        t_2 = t_2[3]
        t_2 = t_4.view(t_6, t_7, t_3, t_2)
        t_2 = t_2.permute(0, 2, 1, 3)
        t_8 = t_8.transpose(-1, -2)
        t_8 = torch.matmul(t_5, t_8)
        t_5 = math.sqrt(64)
        t_5 = t_8 / t_5
        t_5 = t_5 + t_0
        t_5 = self.l_4(t_5)
        t_5 = self.l_5(t_5)
        t_2 = torch.matmul(t_5, t_2)
        t_2 = t_2.permute(0, 2, 1, 3)
        t_2 = t_2.contiguous()
        t_5 = t_2.size()
        t_8 = slice(None, -2, None)
        t_8 = t_5[t_8]
        t_5 = (1024,)
        t_5 = t_8 + t_5
        t_8 = t_5[0]
        t_3 = t_5[1]
        t_5 = t_5[2]
        t_5 = t_2.view(t_8, t_3, t_5)
        t_5 = self.l_6(t_5)
        t_5 = self.l_7(t_5)
        t_1 = t_5 + t_1
        t_1 = self.l_8(t_1)
        t_5 = self.l_9(t_1)
        t_5 = torch.nn.functional.gelu(t_5)
        t_5 = self.l_10(t_5)
        t_5 = self.l_11(t_5)
        t_1 = t_5 + t_1
        t_1 = self.l_12(t_1)
        t_0 = (t_1, t_0)
        t_1 = t_0[0]
        t_0 = t_0[1]
        t_5 = self.l_13(t_1)
        t_3 = self.l_14(t_1)
        t_8 = self.l_15(t_1)
        t_2 = t_5.size()
        t_7 = slice(None, -1, None)
        t_7 = t_2[t_7]
        t_2 = (16, 64)
        t_2 = t_7 + t_2
        t_7 = t_2[0]
        t_6 = t_2[1]
        t_4 = t_2[2]
        t_2 = t_2[3]
        t_2 = t_5.view(t_7, t_6, t_4, t_2)
        t_2 = t_2.permute(0, 2, 1, 3)
        t_4 = t_3.size()
        t_6 = slice(None, -1, None)
        t_6 = t_4[t_6]
        t_4 = (16, 64)
        t_4 = t_6 + t_4
        t_6 = t_4[0]
        t_7 = t_4[1]
        t_5 = t_4[2]
        t_4 = t_4[3]
        t_4 = t_3.view(t_6, t_7, t_5, t_4)
        t_4 = t_4.permute(0, 2, 1, 3)
        t_5 = t_8.size()
        t_7 = slice(None, -1, None)
        t_7 = t_5[t_7]
        t_5 = (16, 64)
        t_5 = t_7 + t_5
        t_7 = t_5[0]
        t_6 = t_5[1]
        t_3 = t_5[2]
        t_5 = t_5[3]
        t_5 = t_8.view(t_7, t_6, t_3, t_5)
        t_5 = t_5.permute(0, 2, 1, 3)
        t_4 = t_4.transpose(-1, -2)
        t_4 = torch.matmul(t_2, t_4)
        t_2 = math.sqrt(64)
        t_2 = t_4 / t_2
        t_2 = t_2 + t_0
        t_2 = self.l_16(t_2)
        t_2 = self.l_17(t_2)
        t_5 = torch.matmul(t_2, t_5)
        t_5 = t_5.permute(0, 2, 1, 3)
        t_5 = t_5.contiguous()
        t_2 = t_5.size()
        t_4 = slice(None, -2, None)
        t_4 = t_2[t_4]
        t_2 = (1024,)
        t_2 = t_4 + t_2
        t_4 = t_2[0]
        t_3 = t_2[1]
        t_2 = t_2[2]
        t_2 = t_5.view(t_4, t_3, t_2)
        t_2 = self.l_18(t_2)
        t_2 = self.l_19(t_2)
        t_1 = t_2 + t_1
        t_1 = self.l_20(t_1)
        t_2 = self.l_21(t_1)
        t_2 = torch.nn.functional.gelu(t_2)
        t_2 = self.l_22(t_2)
        t_2 = self.l_23(t_2)
        t_1 = t_2 + t_1
        t_1 = self.l_24(t_1)
        t_0 = (t_1, t_0)
        t_1 = t_0[0]
        t_0 = t_0[1]
        t_2 = self.l_25(t_1)
        t_3 = self.l_26(t_1)
        t_4 = self.l_27(t_1)
        t_5 = t_2.size()
        t_6 = slice(None, -1, None)
        t_6 = t_5[t_6]
        t_5 = (16, 64)
        t_5 = t_6 + t_5
        t_6 = t_5[0]
        t_7 = t_5[1]
        t_8 = t_5[2]
        t_5 = t_5[3]
        t_5 = t_2.view(t_6, t_7, t_8, t_5)
        t_5 = t_5.permute(0, 2, 1, 3)
        t_8 = t_3.size()
        t_7 = slice(None, -1, None)
        t_7 = t_8[t_7]
        t_8 = (16, 64)
        t_8 = t_7 + t_8
        t_7 = t_8[0]
        t_6 = t_8[1]
        t_2 = t_8[2]
        t_8 = t_8[3]
        t_8 = t_3.view(t_7, t_6, t_2, t_8)
        t_8 = t_8.permute(0, 2, 1, 3)
        t_2 = t_4.size()
        t_6 = slice(None, -1, None)
        t_6 = t_2[t_6]
        t_2 = (16, 64)
        t_2 = t_6 + t_2
        t_6 = t_2[0]
        t_7 = t_2[1]
        t_3 = t_2[2]
        t_2 = t_2[3]
        t_2 = t_4.view(t_6, t_7, t_3, t_2)
        t_2 = t_2.permute(0, 2, 1, 3)
        t_8 = t_8.transpose(-1, -2)
        t_8 = torch.matmul(t_5, t_8)
        t_5 = math.sqrt(64)
        t_5 = t_8 / t_5
        t_5 = t_5 + t_0
        t_5 = self.l_28(t_5)
        t_5 = self.l_29(t_5)
        t_2 = torch.matmul(t_5, t_2)
        t_2 = t_2.permute(0, 2, 1, 3)
        t_2 = t_2.contiguous()
        t_5 = t_2.size()
        t_8 = slice(None, -2, None)
        t_8 = t_5[t_8]
        t_5 = (1024,)
        t_5 = t_8 + t_5
        t_8 = t_5[0]
        t_3 = t_5[1]
        t_5 = t_5[2]
        t_5 = t_2.view(t_8, t_3, t_5)
        t_5 = self.l_30(t_5)
        t_5 = self.l_31(t_5)
        t_1 = t_5 + t_1
        t_1 = self.l_32(t_1)
        t_5 = self.l_33(t_1)
        t_5 = torch.nn.functional.gelu(t_5)
        t_5 = self.l_34(t_5)
        t_5 = self.l_35(t_5)
        t_1 = t_5 + t_1
        t_1 = self.l_36(t_1)
        t_0 = (t_1, t_0)
        # returning:
        # BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[8]/prim::TupleConstruct_1130
        return t_0

    def state_dict(self,device=None):
        # we return the state dict of this part as it should be in the original model
        return state_dict(self,device=device)

    def load_state_dict(self, state):
        return load_state_dict(self,state)

    def named_parameters(self,recurse=True):
        # we return the named parameters of this part as it should be in the original model
        return named_parameters(self,recurse=recurse)

    def named_buffers(self,recurse=True):
        # we return the named buffers of this part as it should be in the original model
        return named_buffers(self,recurse=recurse)

    def cpu(self):
        return cpu(self)

    def cuda(self,device=None):
        return cuda(self,device=device)

    def to(self, *args, **kwargs):
        return to(self,*args,**kwargs)


class Partition3(nn.Module):
    BASIC_BLOCKS=(
            Linear,
            Softmax,
            Dropout,
            LayerNorm,
        )
    LAYER_SCOPES=[
            'BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[9]/BertAttention[attention]/BertSelfAttention[self]/Linear[query]',
            'BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[9]/BertAttention[attention]/BertSelfAttention[self]/Linear[key]',
            'BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[9]/BertAttention[attention]/BertSelfAttention[self]/Linear[value]',
            'BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[9]/BertAttention[attention]/BertSelfAttention[self]/Softmax[softmax]',
            'BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[9]/BertAttention[attention]/BertSelfAttention[self]/Dropout[dropout]',
            'BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[9]/BertAttention[attention]/BertSelfOutput[output]/Linear[dense]',
            'BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[9]/BertAttention[attention]/BertSelfOutput[output]/Dropout[dropout]',
            'BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[9]/BertAttention[attention]/BertSelfOutput[output]/LayerNorm[LayerNorm]',
            'BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[9]/BertIntermediate[intermediate]/Linear[dense]',
            'BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[9]/BertOutput[output]/Linear[dense]',
            'BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[9]/BertOutput[output]/Dropout[dropout]',
            'BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[9]/BertOutput[output]/LayerNorm[LayerNorm]',
            'BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[10]/BertAttention[attention]/BertSelfAttention[self]/Linear[query]',
            'BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[10]/BertAttention[attention]/BertSelfAttention[self]/Linear[key]',
            'BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[10]/BertAttention[attention]/BertSelfAttention[self]/Linear[value]',
            'BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[10]/BertAttention[attention]/BertSelfAttention[self]/Softmax[softmax]',
            'BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[10]/BertAttention[attention]/BertSelfAttention[self]/Dropout[dropout]',
            'BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[10]/BertAttention[attention]/BertSelfOutput[output]/Linear[dense]',
            'BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[10]/BertAttention[attention]/BertSelfOutput[output]/Dropout[dropout]',
            'BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[10]/BertAttention[attention]/BertSelfOutput[output]/LayerNorm[LayerNorm]',
            'BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[10]/BertIntermediate[intermediate]/Linear[dense]',
            'BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[10]/BertOutput[output]/Linear[dense]',
            'BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[10]/BertOutput[output]/Dropout[dropout]',
            'BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[10]/BertOutput[output]/LayerNorm[LayerNorm]',
            'BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[11]/BertAttention[attention]/BertSelfAttention[self]/Linear[query]',
            'BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[11]/BertAttention[attention]/BertSelfAttention[self]/Linear[key]',
            'BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[11]/BertAttention[attention]/BertSelfAttention[self]/Linear[value]',
            'BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[11]/BertAttention[attention]/BertSelfAttention[self]/Softmax[softmax]',
            'BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[11]/BertAttention[attention]/BertSelfAttention[self]/Dropout[dropout]',
            'BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[11]/BertAttention[attention]/BertSelfOutput[output]/Linear[dense]',
            'BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[11]/BertAttention[attention]/BertSelfOutput[output]/Dropout[dropout]',
            'BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[11]/BertAttention[attention]/BertSelfOutput[output]/LayerNorm[LayerNorm]',
            'BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[11]/BertIntermediate[intermediate]/Linear[dense]',
            'BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[11]/BertOutput[output]/Linear[dense]',
            'BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[11]/BertOutput[output]/Dropout[dropout]',
            'BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[11]/BertOutput[output]/LayerNorm[LayerNorm]',
        ]
    TENSORS=[
        ]
    def __init__(self, layers, tensors):
        super(Partition3, self).__init__()

        #initialize partition layers
        for idx,layer_scope in enumerate(self.LAYER_SCOPES):
            self.add_module(f'l_{idx}',layers[layer_scope])

        #initialize partition tensors
        b=p=0
        for tensor_scope in self.TENSORS:
            tensor=tensors[tensor_scope]
            if isinstance(tensor,nn.Parameter):
                self.register_parameter(f'p_{p}',tensor)
                p+=1
            else:
                self.register_buffer(f'b_{b}',tensor)
                b+=1

        self.device = torch.device('cuda:3')
        self.lookup = { 'l_0': 'bert.encoder.9.attention.self.query',
                        'l_1': 'bert.encoder.9.attention.self.key',
                        'l_2': 'bert.encoder.9.attention.self.value',
                        'l_3': 'bert.encoder.9.attention.self.softmax',
                        'l_4': 'bert.encoder.9.attention.self.dropout',
                        'l_5': 'bert.encoder.9.attention.output.dense',
                        'l_6': 'bert.encoder.9.attention.output.dropout',
                        'l_7': 'bert.encoder.9.attention.output.LayerNorm',
                        'l_8': 'bert.encoder.9.intermediate.dense',
                        'l_9': 'bert.encoder.9.output.dense',
                        'l_10': 'bert.encoder.9.output.dropout',
                        'l_11': 'bert.encoder.9.output.LayerNorm',
                        'l_12': 'bert.encoder.10.attention.self.query',
                        'l_13': 'bert.encoder.10.attention.self.key',
                        'l_14': 'bert.encoder.10.attention.self.value',
                        'l_15': 'bert.encoder.10.attention.self.softmax',
                        'l_16': 'bert.encoder.10.attention.self.dropout',
                        'l_17': 'bert.encoder.10.attention.output.dense',
                        'l_18': 'bert.encoder.10.attention.output.dropout',
                        'l_19': 'bert.encoder.10.attention.output.LayerNorm',
                        'l_20': 'bert.encoder.10.intermediate.dense',
                        'l_21': 'bert.encoder.10.output.dense',
                        'l_22': 'bert.encoder.10.output.dropout',
                        'l_23': 'bert.encoder.10.output.LayerNorm',
                        'l_24': 'bert.encoder.11.attention.self.query',
                        'l_25': 'bert.encoder.11.attention.self.key',
                        'l_26': 'bert.encoder.11.attention.self.value',
                        'l_27': 'bert.encoder.11.attention.self.softmax',
                        'l_28': 'bert.encoder.11.attention.self.dropout',
                        'l_29': 'bert.encoder.11.attention.output.dense',
                        'l_30': 'bert.encoder.11.attention.output.dropout',
                        'l_31': 'bert.encoder.11.attention.output.LayerNorm',
                        'l_32': 'bert.encoder.11.intermediate.dense',
                        'l_33': 'bert.encoder.11.output.dense',
                        'l_34': 'bert.encoder.11.output.dropout',
                        'l_35': 'bert.encoder.11.output.LayerNorm'}

    def forward(self, x0):
        # BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[9]/BertAttention[attention]/BertSelfAttention[self]/Linear[query] <=> self.l_0
        # BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[9]/BertAttention[attention]/BertSelfAttention[self]/Linear[key] <=> self.l_1
        # BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[9]/BertAttention[attention]/BertSelfAttention[self]/Linear[value] <=> self.l_2
        # BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[9]/BertAttention[attention]/BertSelfAttention[self]/Softmax[softmax] <=> self.l_3
        # BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[9]/BertAttention[attention]/BertSelfAttention[self]/Dropout[dropout] <=> self.l_4
        # BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[9]/BertAttention[attention]/BertSelfOutput[output]/Linear[dense] <=> self.l_5
        # BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[9]/BertAttention[attention]/BertSelfOutput[output]/Dropout[dropout] <=> self.l_6
        # BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[9]/BertAttention[attention]/BertSelfOutput[output]/LayerNorm[LayerNorm] <=> self.l_7
        # BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[9]/BertIntermediate[intermediate]/Linear[dense] <=> self.l_8
        # BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[9]/BertOutput[output]/Linear[dense] <=> self.l_9
        # BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[9]/BertOutput[output]/Dropout[dropout] <=> self.l_10
        # BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[9]/BertOutput[output]/LayerNorm[LayerNorm] <=> self.l_11
        # BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[10]/BertAttention[attention]/BertSelfAttention[self]/Linear[query] <=> self.l_12
        # BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[10]/BertAttention[attention]/BertSelfAttention[self]/Linear[key] <=> self.l_13
        # BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[10]/BertAttention[attention]/BertSelfAttention[self]/Linear[value] <=> self.l_14
        # BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[10]/BertAttention[attention]/BertSelfAttention[self]/Softmax[softmax] <=> self.l_15
        # BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[10]/BertAttention[attention]/BertSelfAttention[self]/Dropout[dropout] <=> self.l_16
        # BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[10]/BertAttention[attention]/BertSelfOutput[output]/Linear[dense] <=> self.l_17
        # BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[10]/BertAttention[attention]/BertSelfOutput[output]/Dropout[dropout] <=> self.l_18
        # BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[10]/BertAttention[attention]/BertSelfOutput[output]/LayerNorm[LayerNorm] <=> self.l_19
        # BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[10]/BertIntermediate[intermediate]/Linear[dense] <=> self.l_20
        # BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[10]/BertOutput[output]/Linear[dense] <=> self.l_21
        # BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[10]/BertOutput[output]/Dropout[dropout] <=> self.l_22
        # BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[10]/BertOutput[output]/LayerNorm[LayerNorm] <=> self.l_23
        # BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[11]/BertAttention[attention]/BertSelfAttention[self]/Linear[query] <=> self.l_24
        # BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[11]/BertAttention[attention]/BertSelfAttention[self]/Linear[key] <=> self.l_25
        # BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[11]/BertAttention[attention]/BertSelfAttention[self]/Linear[value] <=> self.l_26
        # BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[11]/BertAttention[attention]/BertSelfAttention[self]/Softmax[softmax] <=> self.l_27
        # BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[11]/BertAttention[attention]/BertSelfAttention[self]/Dropout[dropout] <=> self.l_28
        # BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[11]/BertAttention[attention]/BertSelfOutput[output]/Linear[dense] <=> self.l_29
        # BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[11]/BertAttention[attention]/BertSelfOutput[output]/Dropout[dropout] <=> self.l_30
        # BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[11]/BertAttention[attention]/BertSelfOutput[output]/LayerNorm[LayerNorm] <=> self.l_31
        # BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[11]/BertIntermediate[intermediate]/Linear[dense] <=> self.l_32
        # BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[11]/BertOutput[output]/Linear[dense] <=> self.l_33
        # BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[11]/BertOutput[output]/Dropout[dropout] <=> self.l_34
        # BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[11]/BertOutput[output]/LayerNorm[LayerNorm] <=> self.l_35
        # BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[8]/prim::TupleConstruct_1130 <=> x0

        # moving inputs to current device no op if already on the correct device
        x0 = move_tensors((x0), self.device)
        t_0 = x0[0]
        t_1 = x0[1]
        t_2 = self.l_0(t_0)
        t_3 = self.l_1(t_0)
        t_4 = self.l_2(t_0)
        t_5 = t_2.size()
        t_6 = slice(None, -1, None)
        t_6 = t_5[t_6]
        t_5 = (16, 64)
        t_5 = t_6 + t_5
        t_6 = t_5[0]
        t_7 = t_5[1]
        t_8 = t_5[2]
        t_5 = t_5[3]
        t_5 = t_2.view(t_6, t_7, t_8, t_5)
        t_5 = t_5.permute(0, 2, 1, 3)
        t_8 = t_3.size()
        t_7 = slice(None, -1, None)
        t_7 = t_8[t_7]
        t_8 = (16, 64)
        t_8 = t_7 + t_8
        t_7 = t_8[0]
        t_6 = t_8[1]
        t_2 = t_8[2]
        t_8 = t_8[3]
        t_8 = t_3.view(t_7, t_6, t_2, t_8)
        t_8 = t_8.permute(0, 2, 1, 3)
        t_2 = t_4.size()
        t_6 = slice(None, -1, None)
        t_6 = t_2[t_6]
        t_2 = (16, 64)
        t_2 = t_6 + t_2
        t_6 = t_2[0]
        t_7 = t_2[1]
        t_3 = t_2[2]
        t_2 = t_2[3]
        t_2 = t_4.view(t_6, t_7, t_3, t_2)
        t_2 = t_2.permute(0, 2, 1, 3)
        t_8 = t_8.transpose(-1, -2)
        t_8 = torch.matmul(t_5, t_8)
        t_5 = math.sqrt(64)
        t_5 = t_8 / t_5
        t_5 = t_5 + t_1
        t_5 = self.l_3(t_5)
        t_5 = self.l_4(t_5)
        t_2 = torch.matmul(t_5, t_2)
        t_2 = t_2.permute(0, 2, 1, 3)
        t_2 = t_2.contiguous()
        t_5 = t_2.size()
        t_8 = slice(None, -2, None)
        t_8 = t_5[t_8]
        t_5 = (1024,)
        t_5 = t_8 + t_5
        t_8 = t_5[0]
        t_3 = t_5[1]
        t_5 = t_5[2]
        t_5 = t_2.view(t_8, t_3, t_5)
        t_5 = self.l_5(t_5)
        t_5 = self.l_6(t_5)
        t_0 = t_5 + t_0
        t_0 = self.l_7(t_0)
        t_5 = self.l_8(t_0)
        t_5 = torch.nn.functional.gelu(t_5)
        t_5 = self.l_9(t_5)
        t_5 = self.l_10(t_5)
        t_0 = t_5 + t_0
        t_0 = self.l_11(t_0)
        t_1 = (t_0, t_1)
        t_0 = t_1[0]
        t_1 = t_1[1]
        t_5 = self.l_12(t_0)
        t_3 = self.l_13(t_0)
        t_8 = self.l_14(t_0)
        t_2 = t_5.size()
        t_7 = slice(None, -1, None)
        t_7 = t_2[t_7]
        t_2 = (16, 64)
        t_2 = t_7 + t_2
        t_7 = t_2[0]
        t_6 = t_2[1]
        t_4 = t_2[2]
        t_2 = t_2[3]
        t_2 = t_5.view(t_7, t_6, t_4, t_2)
        t_2 = t_2.permute(0, 2, 1, 3)
        t_4 = t_3.size()
        t_6 = slice(None, -1, None)
        t_6 = t_4[t_6]
        t_4 = (16, 64)
        t_4 = t_6 + t_4
        t_6 = t_4[0]
        t_7 = t_4[1]
        t_5 = t_4[2]
        t_4 = t_4[3]
        t_4 = t_3.view(t_6, t_7, t_5, t_4)
        t_4 = t_4.permute(0, 2, 1, 3)
        t_5 = t_8.size()
        t_7 = slice(None, -1, None)
        t_7 = t_5[t_7]
        t_5 = (16, 64)
        t_5 = t_7 + t_5
        t_7 = t_5[0]
        t_6 = t_5[1]
        t_3 = t_5[2]
        t_5 = t_5[3]
        t_5 = t_8.view(t_7, t_6, t_3, t_5)
        t_5 = t_5.permute(0, 2, 1, 3)
        t_4 = t_4.transpose(-1, -2)
        t_4 = torch.matmul(t_2, t_4)
        t_2 = math.sqrt(64)
        t_2 = t_4 / t_2
        t_2 = t_2 + t_1
        t_2 = self.l_15(t_2)
        t_2 = self.l_16(t_2)
        t_5 = torch.matmul(t_2, t_5)
        t_5 = t_5.permute(0, 2, 1, 3)
        t_5 = t_5.contiguous()
        t_2 = t_5.size()
        t_4 = slice(None, -2, None)
        t_4 = t_2[t_4]
        t_2 = (1024,)
        t_2 = t_4 + t_2
        t_4 = t_2[0]
        t_3 = t_2[1]
        t_2 = t_2[2]
        t_2 = t_5.view(t_4, t_3, t_2)
        t_2 = self.l_17(t_2)
        t_2 = self.l_18(t_2)
        t_0 = t_2 + t_0
        t_0 = self.l_19(t_0)
        t_2 = self.l_20(t_0)
        t_2 = torch.nn.functional.gelu(t_2)
        t_2 = self.l_21(t_2)
        t_2 = self.l_22(t_2)
        t_0 = t_2 + t_0
        t_0 = self.l_23(t_0)
        t_1 = (t_0, t_1)
        t_0 = t_1[0]
        t_1 = t_1[1]
        t_2 = self.l_24(t_0)
        t_3 = self.l_25(t_0)
        t_4 = self.l_26(t_0)
        t_5 = t_2.size()
        t_6 = slice(None, -1, None)
        t_6 = t_5[t_6]
        t_5 = (16, 64)
        t_5 = t_6 + t_5
        t_6 = t_5[0]
        t_7 = t_5[1]
        t_8 = t_5[2]
        t_5 = t_5[3]
        t_5 = t_2.view(t_6, t_7, t_8, t_5)
        t_5 = t_5.permute(0, 2, 1, 3)
        t_8 = t_3.size()
        t_7 = slice(None, -1, None)
        t_7 = t_8[t_7]
        t_8 = (16, 64)
        t_8 = t_7 + t_8
        t_7 = t_8[0]
        t_6 = t_8[1]
        t_2 = t_8[2]
        t_8 = t_8[3]
        t_8 = t_3.view(t_7, t_6, t_2, t_8)
        t_8 = t_8.permute(0, 2, 1, 3)
        t_2 = t_4.size()
        t_6 = slice(None, -1, None)
        t_6 = t_2[t_6]
        t_2 = (16, 64)
        t_2 = t_6 + t_2
        t_6 = t_2[0]
        t_7 = t_2[1]
        t_3 = t_2[2]
        t_2 = t_2[3]
        t_2 = t_4.view(t_6, t_7, t_3, t_2)
        t_2 = t_2.permute(0, 2, 1, 3)
        t_8 = t_8.transpose(-1, -2)
        t_8 = torch.matmul(t_5, t_8)
        t_5 = math.sqrt(64)
        t_5 = t_8 / t_5
        t_5 = t_5 + t_1
        t_5 = self.l_27(t_5)
        t_5 = self.l_28(t_5)
        t_2 = torch.matmul(t_5, t_2)
        t_2 = t_2.permute(0, 2, 1, 3)
        t_2 = t_2.contiguous()
        t_5 = t_2.size()
        t_8 = slice(None, -2, None)
        t_8 = t_5[t_8]
        t_5 = (1024,)
        t_5 = t_8 + t_5
        t_8 = t_5[0]
        t_3 = t_5[1]
        t_5 = t_5[2]
        t_5 = t_2.view(t_8, t_3, t_5)
        t_5 = self.l_29(t_5)
        t_5 = self.l_30(t_5)
        t_0 = t_5 + t_0
        t_0 = self.l_31(t_0)
        t_5 = self.l_32(t_0)
        t_5 = torch.nn.functional.gelu(t_5)
        t_5 = self.l_33(t_5)
        t_5 = self.l_34(t_5)
        t_0 = t_5 + t_0
        t_0 = self.l_35(t_0)
        # returning:
        # BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/tuple::__getitem___1380
        # BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[11]/BertOutput[output]/LayerNorm[LayerNorm]
        return (t_1, t_0)

    def state_dict(self,device=None):
        # we return the state dict of this part as it should be in the original model
        return state_dict(self,device=device)

    def load_state_dict(self, state):
        return load_state_dict(self,state)

    def named_parameters(self,recurse=True):
        # we return the named parameters of this part as it should be in the original model
        return named_parameters(self,recurse=recurse)

    def named_buffers(self,recurse=True):
        # we return the named buffers of this part as it should be in the original model
        return named_buffers(self,recurse=recurse)

    def cpu(self):
        return cpu(self)

    def cuda(self,device=None):
        return cuda(self,device=device)

    def to(self, *args, **kwargs):
        return to(self,*args,**kwargs)


class Partition4(nn.Module):
    BASIC_BLOCKS=(
            Linear,
            Softmax,
            Dropout,
            LayerNorm,
        )
    LAYER_SCOPES=[
            'BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[12]/BertAttention[attention]/BertSelfAttention[self]/Linear[query]',
            'BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[12]/BertAttention[attention]/BertSelfAttention[self]/Linear[key]',
            'BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[12]/BertAttention[attention]/BertSelfAttention[self]/Linear[value]',
            'BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[12]/BertAttention[attention]/BertSelfAttention[self]/Softmax[softmax]',
            'BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[12]/BertAttention[attention]/BertSelfAttention[self]/Dropout[dropout]',
            'BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[12]/BertAttention[attention]/BertSelfOutput[output]/Linear[dense]',
            'BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[12]/BertAttention[attention]/BertSelfOutput[output]/Dropout[dropout]',
            'BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[12]/BertAttention[attention]/BertSelfOutput[output]/LayerNorm[LayerNorm]',
            'BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[12]/BertIntermediate[intermediate]/Linear[dense]',
            'BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[12]/BertOutput[output]/Linear[dense]',
            'BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[12]/BertOutput[output]/Dropout[dropout]',
            'BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[12]/BertOutput[output]/LayerNorm[LayerNorm]',
            'BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[13]/BertAttention[attention]/BertSelfAttention[self]/Linear[query]',
            'BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[13]/BertAttention[attention]/BertSelfAttention[self]/Linear[key]',
            'BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[13]/BertAttention[attention]/BertSelfAttention[self]/Linear[value]',
            'BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[13]/BertAttention[attention]/BertSelfAttention[self]/Softmax[softmax]',
            'BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[13]/BertAttention[attention]/BertSelfAttention[self]/Dropout[dropout]',
            'BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[13]/BertAttention[attention]/BertSelfOutput[output]/Linear[dense]',
            'BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[13]/BertAttention[attention]/BertSelfOutput[output]/Dropout[dropout]',
            'BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[13]/BertAttention[attention]/BertSelfOutput[output]/LayerNorm[LayerNorm]',
            'BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[13]/BertIntermediate[intermediate]/Linear[dense]',
            'BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[13]/BertOutput[output]/Linear[dense]',
            'BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[13]/BertOutput[output]/Dropout[dropout]',
            'BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[13]/BertOutput[output]/LayerNorm[LayerNorm]',
            'BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[14]/BertAttention[attention]/BertSelfAttention[self]/Linear[query]',
            'BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[14]/BertAttention[attention]/BertSelfAttention[self]/Linear[key]',
            'BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[14]/BertAttention[attention]/BertSelfAttention[self]/Linear[value]',
            'BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[14]/BertAttention[attention]/BertSelfAttention[self]/Softmax[softmax]',
            'BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[14]/BertAttention[attention]/BertSelfAttention[self]/Dropout[dropout]',
            'BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[14]/BertAttention[attention]/BertSelfOutput[output]/Linear[dense]',
            'BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[14]/BertAttention[attention]/BertSelfOutput[output]/Dropout[dropout]',
            'BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[14]/BertAttention[attention]/BertSelfOutput[output]/LayerNorm[LayerNorm]',
            'BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[14]/BertIntermediate[intermediate]/Linear[dense]',
            'BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[14]/BertOutput[output]/Linear[dense]',
            'BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[14]/BertOutput[output]/Dropout[dropout]',
        ]
    TENSORS=[
        ]
    def __init__(self, layers, tensors):
        super(Partition4, self).__init__()

        #initialize partition layers
        for idx,layer_scope in enumerate(self.LAYER_SCOPES):
            self.add_module(f'l_{idx}',layers[layer_scope])

        #initialize partition tensors
        b=p=0
        for tensor_scope in self.TENSORS:
            tensor=tensors[tensor_scope]
            if isinstance(tensor,nn.Parameter):
                self.register_parameter(f'p_{p}',tensor)
                p+=1
            else:
                self.register_buffer(f'b_{b}',tensor)
                b+=1

        self.device = torch.device('cuda:4')
        self.lookup = { 'l_0': 'bert.encoder.12.attention.self.query',
                        'l_1': 'bert.encoder.12.attention.self.key',
                        'l_2': 'bert.encoder.12.attention.self.value',
                        'l_3': 'bert.encoder.12.attention.self.softmax',
                        'l_4': 'bert.encoder.12.attention.self.dropout',
                        'l_5': 'bert.encoder.12.attention.output.dense',
                        'l_6': 'bert.encoder.12.attention.output.dropout',
                        'l_7': 'bert.encoder.12.attention.output.LayerNorm',
                        'l_8': 'bert.encoder.12.intermediate.dense',
                        'l_9': 'bert.encoder.12.output.dense',
                        'l_10': 'bert.encoder.12.output.dropout',
                        'l_11': 'bert.encoder.12.output.LayerNorm',
                        'l_12': 'bert.encoder.13.attention.self.query',
                        'l_13': 'bert.encoder.13.attention.self.key',
                        'l_14': 'bert.encoder.13.attention.self.value',
                        'l_15': 'bert.encoder.13.attention.self.softmax',
                        'l_16': 'bert.encoder.13.attention.self.dropout',
                        'l_17': 'bert.encoder.13.attention.output.dense',
                        'l_18': 'bert.encoder.13.attention.output.dropout',
                        'l_19': 'bert.encoder.13.attention.output.LayerNorm',
                        'l_20': 'bert.encoder.13.intermediate.dense',
                        'l_21': 'bert.encoder.13.output.dense',
                        'l_22': 'bert.encoder.13.output.dropout',
                        'l_23': 'bert.encoder.13.output.LayerNorm',
                        'l_24': 'bert.encoder.14.attention.self.query',
                        'l_25': 'bert.encoder.14.attention.self.key',
                        'l_26': 'bert.encoder.14.attention.self.value',
                        'l_27': 'bert.encoder.14.attention.self.softmax',
                        'l_28': 'bert.encoder.14.attention.self.dropout',
                        'l_29': 'bert.encoder.14.attention.output.dense',
                        'l_30': 'bert.encoder.14.attention.output.dropout',
                        'l_31': 'bert.encoder.14.attention.output.LayerNorm',
                        'l_32': 'bert.encoder.14.intermediate.dense',
                        'l_33': 'bert.encoder.14.output.dense',
                        'l_34': 'bert.encoder.14.output.dropout'}

    def forward(self, x0, x1):
        # BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[12]/BertAttention[attention]/BertSelfAttention[self]/Linear[query] <=> self.l_0
        # BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[12]/BertAttention[attention]/BertSelfAttention[self]/Linear[key] <=> self.l_1
        # BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[12]/BertAttention[attention]/BertSelfAttention[self]/Linear[value] <=> self.l_2
        # BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[12]/BertAttention[attention]/BertSelfAttention[self]/Softmax[softmax] <=> self.l_3
        # BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[12]/BertAttention[attention]/BertSelfAttention[self]/Dropout[dropout] <=> self.l_4
        # BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[12]/BertAttention[attention]/BertSelfOutput[output]/Linear[dense] <=> self.l_5
        # BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[12]/BertAttention[attention]/BertSelfOutput[output]/Dropout[dropout] <=> self.l_6
        # BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[12]/BertAttention[attention]/BertSelfOutput[output]/LayerNorm[LayerNorm] <=> self.l_7
        # BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[12]/BertIntermediate[intermediate]/Linear[dense] <=> self.l_8
        # BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[12]/BertOutput[output]/Linear[dense] <=> self.l_9
        # BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[12]/BertOutput[output]/Dropout[dropout] <=> self.l_10
        # BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[12]/BertOutput[output]/LayerNorm[LayerNorm] <=> self.l_11
        # BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[13]/BertAttention[attention]/BertSelfAttention[self]/Linear[query] <=> self.l_12
        # BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[13]/BertAttention[attention]/BertSelfAttention[self]/Linear[key] <=> self.l_13
        # BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[13]/BertAttention[attention]/BertSelfAttention[self]/Linear[value] <=> self.l_14
        # BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[13]/BertAttention[attention]/BertSelfAttention[self]/Softmax[softmax] <=> self.l_15
        # BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[13]/BertAttention[attention]/BertSelfAttention[self]/Dropout[dropout] <=> self.l_16
        # BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[13]/BertAttention[attention]/BertSelfOutput[output]/Linear[dense] <=> self.l_17
        # BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[13]/BertAttention[attention]/BertSelfOutput[output]/Dropout[dropout] <=> self.l_18
        # BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[13]/BertAttention[attention]/BertSelfOutput[output]/LayerNorm[LayerNorm] <=> self.l_19
        # BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[13]/BertIntermediate[intermediate]/Linear[dense] <=> self.l_20
        # BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[13]/BertOutput[output]/Linear[dense] <=> self.l_21
        # BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[13]/BertOutput[output]/Dropout[dropout] <=> self.l_22
        # BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[13]/BertOutput[output]/LayerNorm[LayerNorm] <=> self.l_23
        # BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[14]/BertAttention[attention]/BertSelfAttention[self]/Linear[query] <=> self.l_24
        # BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[14]/BertAttention[attention]/BertSelfAttention[self]/Linear[key] <=> self.l_25
        # BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[14]/BertAttention[attention]/BertSelfAttention[self]/Linear[value] <=> self.l_26
        # BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[14]/BertAttention[attention]/BertSelfAttention[self]/Softmax[softmax] <=> self.l_27
        # BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[14]/BertAttention[attention]/BertSelfAttention[self]/Dropout[dropout] <=> self.l_28
        # BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[14]/BertAttention[attention]/BertSelfOutput[output]/Linear[dense] <=> self.l_29
        # BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[14]/BertAttention[attention]/BertSelfOutput[output]/Dropout[dropout] <=> self.l_30
        # BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[14]/BertAttention[attention]/BertSelfOutput[output]/LayerNorm[LayerNorm] <=> self.l_31
        # BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[14]/BertIntermediate[intermediate]/Linear[dense] <=> self.l_32
        # BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[14]/BertOutput[output]/Linear[dense] <=> self.l_33
        # BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[14]/BertOutput[output]/Dropout[dropout] <=> self.l_34
        # BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/tuple::__getitem___1380 <=> x0
        # BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[11]/BertOutput[output]/LayerNorm[LayerNorm] <=> x1

        # moving inputs to current device no op if already on the correct device
        x0, x1 = move_tensors((x0, x1), self.device)
        t_0 = (x1, x0)
        t_1 = t_0[0]
        t_0 = t_0[1]
        t_2 = self.l_0(t_1)
        t_3 = self.l_1(t_1)
        t_4 = self.l_2(t_1)
        t_5 = t_2.size()
        t_6 = slice(None, -1, None)
        t_6 = t_5[t_6]
        t_5 = (16, 64)
        t_5 = t_6 + t_5
        t_6 = t_5[0]
        t_7 = t_5[1]
        t_8 = t_5[2]
        t_5 = t_5[3]
        t_5 = t_2.view(t_6, t_7, t_8, t_5)
        t_5 = t_5.permute(0, 2, 1, 3)
        t_8 = t_3.size()
        t_7 = slice(None, -1, None)
        t_7 = t_8[t_7]
        t_8 = (16, 64)
        t_8 = t_7 + t_8
        t_7 = t_8[0]
        t_6 = t_8[1]
        t_2 = t_8[2]
        t_8 = t_8[3]
        t_8 = t_3.view(t_7, t_6, t_2, t_8)
        t_8 = t_8.permute(0, 2, 1, 3)
        t_2 = t_4.size()
        t_6 = slice(None, -1, None)
        t_6 = t_2[t_6]
        t_2 = (16, 64)
        t_2 = t_6 + t_2
        t_6 = t_2[0]
        t_7 = t_2[1]
        t_3 = t_2[2]
        t_2 = t_2[3]
        t_2 = t_4.view(t_6, t_7, t_3, t_2)
        t_2 = t_2.permute(0, 2, 1, 3)
        t_8 = t_8.transpose(-1, -2)
        t_8 = torch.matmul(t_5, t_8)
        t_5 = math.sqrt(64)
        t_5 = t_8 / t_5
        t_5 = t_5 + t_0
        t_5 = self.l_3(t_5)
        t_5 = self.l_4(t_5)
        t_2 = torch.matmul(t_5, t_2)
        t_2 = t_2.permute(0, 2, 1, 3)
        t_2 = t_2.contiguous()
        t_5 = t_2.size()
        t_8 = slice(None, -2, None)
        t_8 = t_5[t_8]
        t_5 = (1024,)
        t_5 = t_8 + t_5
        t_8 = t_5[0]
        t_3 = t_5[1]
        t_5 = t_5[2]
        t_5 = t_2.view(t_8, t_3, t_5)
        t_5 = self.l_5(t_5)
        t_5 = self.l_6(t_5)
        t_1 = t_5 + t_1
        t_1 = self.l_7(t_1)
        t_5 = self.l_8(t_1)
        t_5 = torch.nn.functional.gelu(t_5)
        t_5 = self.l_9(t_5)
        t_5 = self.l_10(t_5)
        t_1 = t_5 + t_1
        t_1 = self.l_11(t_1)
        t_0 = (t_1, t_0)
        t_1 = t_0[0]
        t_0 = t_0[1]
        t_5 = self.l_12(t_1)
        t_3 = self.l_13(t_1)
        t_8 = self.l_14(t_1)
        t_2 = t_5.size()
        t_7 = slice(None, -1, None)
        t_7 = t_2[t_7]
        t_2 = (16, 64)
        t_2 = t_7 + t_2
        t_7 = t_2[0]
        t_6 = t_2[1]
        t_4 = t_2[2]
        t_2 = t_2[3]
        t_2 = t_5.view(t_7, t_6, t_4, t_2)
        t_2 = t_2.permute(0, 2, 1, 3)
        t_4 = t_3.size()
        t_6 = slice(None, -1, None)
        t_6 = t_4[t_6]
        t_4 = (16, 64)
        t_4 = t_6 + t_4
        t_6 = t_4[0]
        t_7 = t_4[1]
        t_5 = t_4[2]
        t_4 = t_4[3]
        t_4 = t_3.view(t_6, t_7, t_5, t_4)
        t_4 = t_4.permute(0, 2, 1, 3)
        t_5 = t_8.size()
        t_7 = slice(None, -1, None)
        t_7 = t_5[t_7]
        t_5 = (16, 64)
        t_5 = t_7 + t_5
        t_7 = t_5[0]
        t_6 = t_5[1]
        t_3 = t_5[2]
        t_5 = t_5[3]
        t_5 = t_8.view(t_7, t_6, t_3, t_5)
        t_5 = t_5.permute(0, 2, 1, 3)
        t_4 = t_4.transpose(-1, -2)
        t_4 = torch.matmul(t_2, t_4)
        t_2 = math.sqrt(64)
        t_2 = t_4 / t_2
        t_2 = t_2 + t_0
        t_2 = self.l_15(t_2)
        t_2 = self.l_16(t_2)
        t_5 = torch.matmul(t_2, t_5)
        t_5 = t_5.permute(0, 2, 1, 3)
        t_5 = t_5.contiguous()
        t_2 = t_5.size()
        t_4 = slice(None, -2, None)
        t_4 = t_2[t_4]
        t_2 = (1024,)
        t_2 = t_4 + t_2
        t_4 = t_2[0]
        t_3 = t_2[1]
        t_2 = t_2[2]
        t_2 = t_5.view(t_4, t_3, t_2)
        t_2 = self.l_17(t_2)
        t_2 = self.l_18(t_2)
        t_1 = t_2 + t_1
        t_1 = self.l_19(t_1)
        t_2 = self.l_20(t_1)
        t_2 = torch.nn.functional.gelu(t_2)
        t_2 = self.l_21(t_2)
        t_2 = self.l_22(t_2)
        t_1 = t_2 + t_1
        t_1 = self.l_23(t_1)
        t_0 = (t_1, t_0)
        t_1 = t_0[0]
        t_0 = t_0[1]
        t_2 = self.l_24(t_1)
        t_3 = self.l_25(t_1)
        t_4 = self.l_26(t_1)
        t_5 = t_2.size()
        t_6 = slice(None, -1, None)
        t_6 = t_5[t_6]
        t_5 = (16, 64)
        t_5 = t_6 + t_5
        t_6 = t_5[0]
        t_7 = t_5[1]
        t_8 = t_5[2]
        t_5 = t_5[3]
        t_5 = t_2.view(t_6, t_7, t_8, t_5)
        t_5 = t_5.permute(0, 2, 1, 3)
        t_8 = t_3.size()
        t_7 = slice(None, -1, None)
        t_7 = t_8[t_7]
        t_8 = (16, 64)
        t_8 = t_7 + t_8
        t_7 = t_8[0]
        t_6 = t_8[1]
        t_2 = t_8[2]
        t_8 = t_8[3]
        t_8 = t_3.view(t_7, t_6, t_2, t_8)
        t_8 = t_8.permute(0, 2, 1, 3)
        t_2 = t_4.size()
        t_6 = slice(None, -1, None)
        t_6 = t_2[t_6]
        t_2 = (16, 64)
        t_2 = t_6 + t_2
        t_6 = t_2[0]
        t_7 = t_2[1]
        t_3 = t_2[2]
        t_2 = t_2[3]
        t_2 = t_4.view(t_6, t_7, t_3, t_2)
        t_2 = t_2.permute(0, 2, 1, 3)
        t_8 = t_8.transpose(-1, -2)
        t_8 = torch.matmul(t_5, t_8)
        t_5 = math.sqrt(64)
        t_5 = t_8 / t_5
        t_5 = t_5 + t_0
        t_5 = self.l_27(t_5)
        t_5 = self.l_28(t_5)
        t_2 = torch.matmul(t_5, t_2)
        t_2 = t_2.permute(0, 2, 1, 3)
        t_2 = t_2.contiguous()
        t_5 = t_2.size()
        t_8 = slice(None, -2, None)
        t_8 = t_5[t_8]
        t_5 = (1024,)
        t_5 = t_8 + t_5
        t_8 = t_5[0]
        t_3 = t_5[1]
        t_5 = t_5[2]
        t_5 = t_2.view(t_8, t_3, t_5)
        t_5 = self.l_29(t_5)
        t_5 = self.l_30(t_5)
        t_1 = t_5 + t_1
        t_1 = self.l_31(t_1)
        t_5 = self.l_32(t_1)
        t_5 = torch.nn.functional.gelu(t_5)
        t_5 = self.l_33(t_5)
        t_5 = self.l_34(t_5)
        t_1 = t_5 + t_1
        # returning:
        # BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/tuple::__getitem___1749
        # BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[14]/BertOutput[output]/Tensor::__add___1866
        return (t_0, t_1)

    def state_dict(self,device=None):
        # we return the state dict of this part as it should be in the original model
        return state_dict(self,device=device)

    def load_state_dict(self, state):
        return load_state_dict(self,state)

    def named_parameters(self,recurse=True):
        # we return the named parameters of this part as it should be in the original model
        return named_parameters(self,recurse=recurse)

    def named_buffers(self,recurse=True):
        # we return the named buffers of this part as it should be in the original model
        return named_buffers(self,recurse=recurse)

    def cpu(self):
        return cpu(self)

    def cuda(self,device=None):
        return cuda(self,device=device)

    def to(self, *args, **kwargs):
        return to(self,*args,**kwargs)


class Partition5(nn.Module):
    BASIC_BLOCKS=(
            Linear,
            Softmax,
            Dropout,
            LayerNorm,
        )
    LAYER_SCOPES=[
            'BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[14]/BertOutput[output]/LayerNorm[LayerNorm]',
            'BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[15]/BertAttention[attention]/BertSelfAttention[self]/Linear[query]',
            'BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[15]/BertAttention[attention]/BertSelfAttention[self]/Linear[key]',
            'BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[15]/BertAttention[attention]/BertSelfAttention[self]/Linear[value]',
            'BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[15]/BertAttention[attention]/BertSelfAttention[self]/Softmax[softmax]',
            'BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[15]/BertAttention[attention]/BertSelfAttention[self]/Dropout[dropout]',
            'BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[15]/BertAttention[attention]/BertSelfOutput[output]/Linear[dense]',
            'BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[15]/BertAttention[attention]/BertSelfOutput[output]/Dropout[dropout]',
            'BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[15]/BertAttention[attention]/BertSelfOutput[output]/LayerNorm[LayerNorm]',
            'BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[15]/BertIntermediate[intermediate]/Linear[dense]',
            'BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[15]/BertOutput[output]/Linear[dense]',
            'BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[15]/BertOutput[output]/Dropout[dropout]',
            'BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[15]/BertOutput[output]/LayerNorm[LayerNorm]',
            'BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[16]/BertAttention[attention]/BertSelfAttention[self]/Linear[query]',
            'BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[16]/BertAttention[attention]/BertSelfAttention[self]/Linear[key]',
            'BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[16]/BertAttention[attention]/BertSelfAttention[self]/Linear[value]',
            'BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[16]/BertAttention[attention]/BertSelfAttention[self]/Softmax[softmax]',
            'BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[16]/BertAttention[attention]/BertSelfAttention[self]/Dropout[dropout]',
            'BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[16]/BertAttention[attention]/BertSelfOutput[output]/Linear[dense]',
            'BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[16]/BertAttention[attention]/BertSelfOutput[output]/Dropout[dropout]',
            'BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[16]/BertAttention[attention]/BertSelfOutput[output]/LayerNorm[LayerNorm]',
            'BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[16]/BertIntermediate[intermediate]/Linear[dense]',
            'BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[16]/BertOutput[output]/Linear[dense]',
            'BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[16]/BertOutput[output]/Dropout[dropout]',
            'BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[16]/BertOutput[output]/LayerNorm[LayerNorm]',
            'BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[17]/BertAttention[attention]/BertSelfAttention[self]/Linear[query]',
            'BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[17]/BertAttention[attention]/BertSelfAttention[self]/Linear[key]',
            'BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[17]/BertAttention[attention]/BertSelfAttention[self]/Linear[value]',
            'BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[17]/BertAttention[attention]/BertSelfAttention[self]/Softmax[softmax]',
            'BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[17]/BertAttention[attention]/BertSelfAttention[self]/Dropout[dropout]',
            'BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[17]/BertAttention[attention]/BertSelfOutput[output]/Linear[dense]',
            'BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[17]/BertAttention[attention]/BertSelfOutput[output]/Dropout[dropout]',
            'BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[17]/BertAttention[attention]/BertSelfOutput[output]/LayerNorm[LayerNorm]',
            'BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[17]/BertIntermediate[intermediate]/Linear[dense]',
            'BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[17]/BertOutput[output]/Linear[dense]',
            'BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[17]/BertOutput[output]/Dropout[dropout]',
        ]
    TENSORS=[
        ]
    def __init__(self, layers, tensors):
        super(Partition5, self).__init__()

        #initialize partition layers
        for idx,layer_scope in enumerate(self.LAYER_SCOPES):
            self.add_module(f'l_{idx}',layers[layer_scope])

        #initialize partition tensors
        b=p=0
        for tensor_scope in self.TENSORS:
            tensor=tensors[tensor_scope]
            if isinstance(tensor,nn.Parameter):
                self.register_parameter(f'p_{p}',tensor)
                p+=1
            else:
                self.register_buffer(f'b_{b}',tensor)
                b+=1

        self.device = torch.device('cuda:5')
        self.lookup = { 'l_0': 'bert.encoder.14.output.LayerNorm',
                        'l_1': 'bert.encoder.15.attention.self.query',
                        'l_2': 'bert.encoder.15.attention.self.key',
                        'l_3': 'bert.encoder.15.attention.self.value',
                        'l_4': 'bert.encoder.15.attention.self.softmax',
                        'l_5': 'bert.encoder.15.attention.self.dropout',
                        'l_6': 'bert.encoder.15.attention.output.dense',
                        'l_7': 'bert.encoder.15.attention.output.dropout',
                        'l_8': 'bert.encoder.15.attention.output.LayerNorm',
                        'l_9': 'bert.encoder.15.intermediate.dense',
                        'l_10': 'bert.encoder.15.output.dense',
                        'l_11': 'bert.encoder.15.output.dropout',
                        'l_12': 'bert.encoder.15.output.LayerNorm',
                        'l_13': 'bert.encoder.16.attention.self.query',
                        'l_14': 'bert.encoder.16.attention.self.key',
                        'l_15': 'bert.encoder.16.attention.self.value',
                        'l_16': 'bert.encoder.16.attention.self.softmax',
                        'l_17': 'bert.encoder.16.attention.self.dropout',
                        'l_18': 'bert.encoder.16.attention.output.dense',
                        'l_19': 'bert.encoder.16.attention.output.dropout',
                        'l_20': 'bert.encoder.16.attention.output.LayerNorm',
                        'l_21': 'bert.encoder.16.intermediate.dense',
                        'l_22': 'bert.encoder.16.output.dense',
                        'l_23': 'bert.encoder.16.output.dropout',
                        'l_24': 'bert.encoder.16.output.LayerNorm',
                        'l_25': 'bert.encoder.17.attention.self.query',
                        'l_26': 'bert.encoder.17.attention.self.key',
                        'l_27': 'bert.encoder.17.attention.self.value',
                        'l_28': 'bert.encoder.17.attention.self.softmax',
                        'l_29': 'bert.encoder.17.attention.self.dropout',
                        'l_30': 'bert.encoder.17.attention.output.dense',
                        'l_31': 'bert.encoder.17.attention.output.dropout',
                        'l_32': 'bert.encoder.17.attention.output.LayerNorm',
                        'l_33': 'bert.encoder.17.intermediate.dense',
                        'l_34': 'bert.encoder.17.output.dense',
                        'l_35': 'bert.encoder.17.output.dropout'}

    def forward(self, x0, x1):
        # BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[14]/BertOutput[output]/LayerNorm[LayerNorm] <=> self.l_0
        # BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[15]/BertAttention[attention]/BertSelfAttention[self]/Linear[query] <=> self.l_1
        # BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[15]/BertAttention[attention]/BertSelfAttention[self]/Linear[key] <=> self.l_2
        # BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[15]/BertAttention[attention]/BertSelfAttention[self]/Linear[value] <=> self.l_3
        # BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[15]/BertAttention[attention]/BertSelfAttention[self]/Softmax[softmax] <=> self.l_4
        # BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[15]/BertAttention[attention]/BertSelfAttention[self]/Dropout[dropout] <=> self.l_5
        # BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[15]/BertAttention[attention]/BertSelfOutput[output]/Linear[dense] <=> self.l_6
        # BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[15]/BertAttention[attention]/BertSelfOutput[output]/Dropout[dropout] <=> self.l_7
        # BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[15]/BertAttention[attention]/BertSelfOutput[output]/LayerNorm[LayerNorm] <=> self.l_8
        # BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[15]/BertIntermediate[intermediate]/Linear[dense] <=> self.l_9
        # BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[15]/BertOutput[output]/Linear[dense] <=> self.l_10
        # BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[15]/BertOutput[output]/Dropout[dropout] <=> self.l_11
        # BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[15]/BertOutput[output]/LayerNorm[LayerNorm] <=> self.l_12
        # BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[16]/BertAttention[attention]/BertSelfAttention[self]/Linear[query] <=> self.l_13
        # BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[16]/BertAttention[attention]/BertSelfAttention[self]/Linear[key] <=> self.l_14
        # BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[16]/BertAttention[attention]/BertSelfAttention[self]/Linear[value] <=> self.l_15
        # BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[16]/BertAttention[attention]/BertSelfAttention[self]/Softmax[softmax] <=> self.l_16
        # BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[16]/BertAttention[attention]/BertSelfAttention[self]/Dropout[dropout] <=> self.l_17
        # BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[16]/BertAttention[attention]/BertSelfOutput[output]/Linear[dense] <=> self.l_18
        # BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[16]/BertAttention[attention]/BertSelfOutput[output]/Dropout[dropout] <=> self.l_19
        # BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[16]/BertAttention[attention]/BertSelfOutput[output]/LayerNorm[LayerNorm] <=> self.l_20
        # BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[16]/BertIntermediate[intermediate]/Linear[dense] <=> self.l_21
        # BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[16]/BertOutput[output]/Linear[dense] <=> self.l_22
        # BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[16]/BertOutput[output]/Dropout[dropout] <=> self.l_23
        # BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[16]/BertOutput[output]/LayerNorm[LayerNorm] <=> self.l_24
        # BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[17]/BertAttention[attention]/BertSelfAttention[self]/Linear[query] <=> self.l_25
        # BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[17]/BertAttention[attention]/BertSelfAttention[self]/Linear[key] <=> self.l_26
        # BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[17]/BertAttention[attention]/BertSelfAttention[self]/Linear[value] <=> self.l_27
        # BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[17]/BertAttention[attention]/BertSelfAttention[self]/Softmax[softmax] <=> self.l_28
        # BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[17]/BertAttention[attention]/BertSelfAttention[self]/Dropout[dropout] <=> self.l_29
        # BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[17]/BertAttention[attention]/BertSelfOutput[output]/Linear[dense] <=> self.l_30
        # BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[17]/BertAttention[attention]/BertSelfOutput[output]/Dropout[dropout] <=> self.l_31
        # BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[17]/BertAttention[attention]/BertSelfOutput[output]/LayerNorm[LayerNorm] <=> self.l_32
        # BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[17]/BertIntermediate[intermediate]/Linear[dense] <=> self.l_33
        # BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[17]/BertOutput[output]/Linear[dense] <=> self.l_34
        # BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[17]/BertOutput[output]/Dropout[dropout] <=> self.l_35
        # BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/tuple::__getitem___1749 <=> x0
        # BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[14]/BertOutput[output]/Tensor::__add___1866 <=> x1

        # moving inputs to current device no op if already on the correct device
        x0, x1 = move_tensors((x0, x1), self.device)
        t_0 = self.l_0(x1)
        t_0 = (t_0, x0)
        t_1 = t_0[0]
        t_0 = t_0[1]
        t_2 = self.l_1(t_1)
        t_3 = self.l_2(t_1)
        t_4 = self.l_3(t_1)
        t_5 = t_2.size()
        t_6 = slice(None, -1, None)
        t_6 = t_5[t_6]
        t_5 = (16, 64)
        t_5 = t_6 + t_5
        t_6 = t_5[0]
        t_7 = t_5[1]
        t_8 = t_5[2]
        t_5 = t_5[3]
        t_5 = t_2.view(t_6, t_7, t_8, t_5)
        t_5 = t_5.permute(0, 2, 1, 3)
        t_8 = t_3.size()
        t_7 = slice(None, -1, None)
        t_7 = t_8[t_7]
        t_8 = (16, 64)
        t_8 = t_7 + t_8
        t_7 = t_8[0]
        t_6 = t_8[1]
        t_2 = t_8[2]
        t_8 = t_8[3]
        t_8 = t_3.view(t_7, t_6, t_2, t_8)
        t_8 = t_8.permute(0, 2, 1, 3)
        t_2 = t_4.size()
        t_6 = slice(None, -1, None)
        t_6 = t_2[t_6]
        t_2 = (16, 64)
        t_2 = t_6 + t_2
        t_6 = t_2[0]
        t_7 = t_2[1]
        t_3 = t_2[2]
        t_2 = t_2[3]
        t_2 = t_4.view(t_6, t_7, t_3, t_2)
        t_2 = t_2.permute(0, 2, 1, 3)
        t_8 = t_8.transpose(-1, -2)
        t_8 = torch.matmul(t_5, t_8)
        t_5 = math.sqrt(64)
        t_5 = t_8 / t_5
        t_5 = t_5 + t_0
        t_5 = self.l_4(t_5)
        t_5 = self.l_5(t_5)
        t_2 = torch.matmul(t_5, t_2)
        t_2 = t_2.permute(0, 2, 1, 3)
        t_2 = t_2.contiguous()
        t_5 = t_2.size()
        t_8 = slice(None, -2, None)
        t_8 = t_5[t_8]
        t_5 = (1024,)
        t_5 = t_8 + t_5
        t_8 = t_5[0]
        t_3 = t_5[1]
        t_5 = t_5[2]
        t_5 = t_2.view(t_8, t_3, t_5)
        t_5 = self.l_6(t_5)
        t_5 = self.l_7(t_5)
        t_1 = t_5 + t_1
        t_1 = self.l_8(t_1)
        t_5 = self.l_9(t_1)
        t_5 = torch.nn.functional.gelu(t_5)
        t_5 = self.l_10(t_5)
        t_5 = self.l_11(t_5)
        t_1 = t_5 + t_1
        t_1 = self.l_12(t_1)
        t_0 = (t_1, t_0)
        t_1 = t_0[0]
        t_0 = t_0[1]
        t_5 = self.l_13(t_1)
        t_3 = self.l_14(t_1)
        t_8 = self.l_15(t_1)
        t_2 = t_5.size()
        t_7 = slice(None, -1, None)
        t_7 = t_2[t_7]
        t_2 = (16, 64)
        t_2 = t_7 + t_2
        t_7 = t_2[0]
        t_6 = t_2[1]
        t_4 = t_2[2]
        t_2 = t_2[3]
        t_2 = t_5.view(t_7, t_6, t_4, t_2)
        t_2 = t_2.permute(0, 2, 1, 3)
        t_4 = t_3.size()
        t_6 = slice(None, -1, None)
        t_6 = t_4[t_6]
        t_4 = (16, 64)
        t_4 = t_6 + t_4
        t_6 = t_4[0]
        t_7 = t_4[1]
        t_5 = t_4[2]
        t_4 = t_4[3]
        t_4 = t_3.view(t_6, t_7, t_5, t_4)
        t_4 = t_4.permute(0, 2, 1, 3)
        t_5 = t_8.size()
        t_7 = slice(None, -1, None)
        t_7 = t_5[t_7]
        t_5 = (16, 64)
        t_5 = t_7 + t_5
        t_7 = t_5[0]
        t_6 = t_5[1]
        t_3 = t_5[2]
        t_5 = t_5[3]
        t_5 = t_8.view(t_7, t_6, t_3, t_5)
        t_5 = t_5.permute(0, 2, 1, 3)
        t_4 = t_4.transpose(-1, -2)
        t_4 = torch.matmul(t_2, t_4)
        t_2 = math.sqrt(64)
        t_2 = t_4 / t_2
        t_2 = t_2 + t_0
        t_2 = self.l_16(t_2)
        t_2 = self.l_17(t_2)
        t_5 = torch.matmul(t_2, t_5)
        t_5 = t_5.permute(0, 2, 1, 3)
        t_5 = t_5.contiguous()
        t_2 = t_5.size()
        t_4 = slice(None, -2, None)
        t_4 = t_2[t_4]
        t_2 = (1024,)
        t_2 = t_4 + t_2
        t_4 = t_2[0]
        t_3 = t_2[1]
        t_2 = t_2[2]
        t_2 = t_5.view(t_4, t_3, t_2)
        t_2 = self.l_18(t_2)
        t_2 = self.l_19(t_2)
        t_1 = t_2 + t_1
        t_1 = self.l_20(t_1)
        t_2 = self.l_21(t_1)
        t_2 = torch.nn.functional.gelu(t_2)
        t_2 = self.l_22(t_2)
        t_2 = self.l_23(t_2)
        t_1 = t_2 + t_1
        t_1 = self.l_24(t_1)
        t_0 = (t_1, t_0)
        t_1 = t_0[0]
        t_0 = t_0[1]
        t_2 = self.l_25(t_1)
        t_3 = self.l_26(t_1)
        t_4 = self.l_27(t_1)
        t_5 = t_2.size()
        t_6 = slice(None, -1, None)
        t_6 = t_5[t_6]
        t_5 = (16, 64)
        t_5 = t_6 + t_5
        t_6 = t_5[0]
        t_7 = t_5[1]
        t_8 = t_5[2]
        t_5 = t_5[3]
        t_5 = t_2.view(t_6, t_7, t_8, t_5)
        t_5 = t_5.permute(0, 2, 1, 3)
        t_8 = t_3.size()
        t_7 = slice(None, -1, None)
        t_7 = t_8[t_7]
        t_8 = (16, 64)
        t_8 = t_7 + t_8
        t_7 = t_8[0]
        t_6 = t_8[1]
        t_2 = t_8[2]
        t_8 = t_8[3]
        t_8 = t_3.view(t_7, t_6, t_2, t_8)
        t_8 = t_8.permute(0, 2, 1, 3)
        t_2 = t_4.size()
        t_6 = slice(None, -1, None)
        t_6 = t_2[t_6]
        t_2 = (16, 64)
        t_2 = t_6 + t_2
        t_6 = t_2[0]
        t_7 = t_2[1]
        t_3 = t_2[2]
        t_2 = t_2[3]
        t_2 = t_4.view(t_6, t_7, t_3, t_2)
        t_2 = t_2.permute(0, 2, 1, 3)
        t_8 = t_8.transpose(-1, -2)
        t_8 = torch.matmul(t_5, t_8)
        t_5 = math.sqrt(64)
        t_5 = t_8 / t_5
        t_5 = t_5 + t_0
        t_5 = self.l_28(t_5)
        t_5 = self.l_29(t_5)
        t_2 = torch.matmul(t_5, t_2)
        t_2 = t_2.permute(0, 2, 1, 3)
        t_2 = t_2.contiguous()
        t_5 = t_2.size()
        t_8 = slice(None, -2, None)
        t_8 = t_5[t_8]
        t_5 = (1024,)
        t_5 = t_8 + t_5
        t_8 = t_5[0]
        t_3 = t_5[1]
        t_5 = t_5[2]
        t_5 = t_2.view(t_8, t_3, t_5)
        t_5 = self.l_30(t_5)
        t_5 = self.l_31(t_5)
        t_1 = t_5 + t_1
        t_1 = self.l_32(t_1)
        t_5 = self.l_33(t_1)
        t_5 = torch.nn.functional.gelu(t_5)
        t_5 = self.l_34(t_5)
        t_5 = self.l_35(t_5)
        t_1 = t_5 + t_1
        # returning:
        # BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/tuple::__getitem___2118
        # BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[17]/BertOutput[output]/Tensor::__add___2235
        return (t_0, t_1)

    def state_dict(self,device=None):
        # we return the state dict of this part as it should be in the original model
        return state_dict(self,device=device)

    def load_state_dict(self, state):
        return load_state_dict(self,state)

    def named_parameters(self,recurse=True):
        # we return the named parameters of this part as it should be in the original model
        return named_parameters(self,recurse=recurse)

    def named_buffers(self,recurse=True):
        # we return the named buffers of this part as it should be in the original model
        return named_buffers(self,recurse=recurse)

    def cpu(self):
        return cpu(self)

    def cuda(self,device=None):
        return cuda(self,device=device)

    def to(self, *args, **kwargs):
        return to(self,*args,**kwargs)


class Partition6(nn.Module):
    BASIC_BLOCKS=(
            Linear,
            Softmax,
            Dropout,
            LayerNorm,
        )
    LAYER_SCOPES=[
            'BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[17]/BertOutput[output]/LayerNorm[LayerNorm]',
            'BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[18]/BertAttention[attention]/BertSelfAttention[self]/Linear[query]',
            'BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[18]/BertAttention[attention]/BertSelfAttention[self]/Linear[key]',
            'BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[18]/BertAttention[attention]/BertSelfAttention[self]/Linear[value]',
            'BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[18]/BertAttention[attention]/BertSelfAttention[self]/Softmax[softmax]',
            'BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[18]/BertAttention[attention]/BertSelfAttention[self]/Dropout[dropout]',
            'BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[18]/BertAttention[attention]/BertSelfOutput[output]/Linear[dense]',
            'BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[18]/BertAttention[attention]/BertSelfOutput[output]/Dropout[dropout]',
            'BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[18]/BertAttention[attention]/BertSelfOutput[output]/LayerNorm[LayerNorm]',
            'BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[18]/BertIntermediate[intermediate]/Linear[dense]',
            'BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[18]/BertOutput[output]/Linear[dense]',
            'BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[18]/BertOutput[output]/Dropout[dropout]',
            'BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[18]/BertOutput[output]/LayerNorm[LayerNorm]',
            'BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[19]/BertAttention[attention]/BertSelfAttention[self]/Linear[query]',
            'BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[19]/BertAttention[attention]/BertSelfAttention[self]/Linear[key]',
            'BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[19]/BertAttention[attention]/BertSelfAttention[self]/Linear[value]',
            'BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[19]/BertAttention[attention]/BertSelfAttention[self]/Softmax[softmax]',
            'BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[19]/BertAttention[attention]/BertSelfAttention[self]/Dropout[dropout]',
            'BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[19]/BertAttention[attention]/BertSelfOutput[output]/Linear[dense]',
            'BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[19]/BertAttention[attention]/BertSelfOutput[output]/Dropout[dropout]',
            'BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[19]/BertAttention[attention]/BertSelfOutput[output]/LayerNorm[LayerNorm]',
            'BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[19]/BertIntermediate[intermediate]/Linear[dense]',
            'BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[19]/BertOutput[output]/Linear[dense]',
            'BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[19]/BertOutput[output]/Dropout[dropout]',
            'BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[19]/BertOutput[output]/LayerNorm[LayerNorm]',
            'BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[20]/BertAttention[attention]/BertSelfAttention[self]/Linear[query]',
            'BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[20]/BertAttention[attention]/BertSelfAttention[self]/Linear[key]',
            'BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[20]/BertAttention[attention]/BertSelfAttention[self]/Linear[value]',
            'BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[20]/BertAttention[attention]/BertSelfAttention[self]/Softmax[softmax]',
            'BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[20]/BertAttention[attention]/BertSelfAttention[self]/Dropout[dropout]',
            'BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[20]/BertAttention[attention]/BertSelfOutput[output]/Linear[dense]',
            'BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[20]/BertAttention[attention]/BertSelfOutput[output]/Dropout[dropout]',
            'BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[20]/BertAttention[attention]/BertSelfOutput[output]/LayerNorm[LayerNorm]',
            'BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[20]/BertIntermediate[intermediate]/Linear[dense]',
            'BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[20]/BertOutput[output]/Linear[dense]',
            'BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[20]/BertOutput[output]/Dropout[dropout]',
            'BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[20]/BertOutput[output]/LayerNorm[LayerNorm]',
        ]
    TENSORS=[
        ]
    def __init__(self, layers, tensors):
        super(Partition6, self).__init__()

        #initialize partition layers
        for idx,layer_scope in enumerate(self.LAYER_SCOPES):
            self.add_module(f'l_{idx}',layers[layer_scope])

        #initialize partition tensors
        b=p=0
        for tensor_scope in self.TENSORS:
            tensor=tensors[tensor_scope]
            if isinstance(tensor,nn.Parameter):
                self.register_parameter(f'p_{p}',tensor)
                p+=1
            else:
                self.register_buffer(f'b_{b}',tensor)
                b+=1

        self.device = torch.device('cuda:6')
        self.lookup = { 'l_0': 'bert.encoder.17.output.LayerNorm',
                        'l_1': 'bert.encoder.18.attention.self.query',
                        'l_2': 'bert.encoder.18.attention.self.key',
                        'l_3': 'bert.encoder.18.attention.self.value',
                        'l_4': 'bert.encoder.18.attention.self.softmax',
                        'l_5': 'bert.encoder.18.attention.self.dropout',
                        'l_6': 'bert.encoder.18.attention.output.dense',
                        'l_7': 'bert.encoder.18.attention.output.dropout',
                        'l_8': 'bert.encoder.18.attention.output.LayerNorm',
                        'l_9': 'bert.encoder.18.intermediate.dense',
                        'l_10': 'bert.encoder.18.output.dense',
                        'l_11': 'bert.encoder.18.output.dropout',
                        'l_12': 'bert.encoder.18.output.LayerNorm',
                        'l_13': 'bert.encoder.19.attention.self.query',
                        'l_14': 'bert.encoder.19.attention.self.key',
                        'l_15': 'bert.encoder.19.attention.self.value',
                        'l_16': 'bert.encoder.19.attention.self.softmax',
                        'l_17': 'bert.encoder.19.attention.self.dropout',
                        'l_18': 'bert.encoder.19.attention.output.dense',
                        'l_19': 'bert.encoder.19.attention.output.dropout',
                        'l_20': 'bert.encoder.19.attention.output.LayerNorm',
                        'l_21': 'bert.encoder.19.intermediate.dense',
                        'l_22': 'bert.encoder.19.output.dense',
                        'l_23': 'bert.encoder.19.output.dropout',
                        'l_24': 'bert.encoder.19.output.LayerNorm',
                        'l_25': 'bert.encoder.20.attention.self.query',
                        'l_26': 'bert.encoder.20.attention.self.key',
                        'l_27': 'bert.encoder.20.attention.self.value',
                        'l_28': 'bert.encoder.20.attention.self.softmax',
                        'l_29': 'bert.encoder.20.attention.self.dropout',
                        'l_30': 'bert.encoder.20.attention.output.dense',
                        'l_31': 'bert.encoder.20.attention.output.dropout',
                        'l_32': 'bert.encoder.20.attention.output.LayerNorm',
                        'l_33': 'bert.encoder.20.intermediate.dense',
                        'l_34': 'bert.encoder.20.output.dense',
                        'l_35': 'bert.encoder.20.output.dropout',
                        'l_36': 'bert.encoder.20.output.LayerNorm'}

    def forward(self, x0, x1):
        # BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[17]/BertOutput[output]/LayerNorm[LayerNorm] <=> self.l_0
        # BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[18]/BertAttention[attention]/BertSelfAttention[self]/Linear[query] <=> self.l_1
        # BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[18]/BertAttention[attention]/BertSelfAttention[self]/Linear[key] <=> self.l_2
        # BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[18]/BertAttention[attention]/BertSelfAttention[self]/Linear[value] <=> self.l_3
        # BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[18]/BertAttention[attention]/BertSelfAttention[self]/Softmax[softmax] <=> self.l_4
        # BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[18]/BertAttention[attention]/BertSelfAttention[self]/Dropout[dropout] <=> self.l_5
        # BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[18]/BertAttention[attention]/BertSelfOutput[output]/Linear[dense] <=> self.l_6
        # BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[18]/BertAttention[attention]/BertSelfOutput[output]/Dropout[dropout] <=> self.l_7
        # BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[18]/BertAttention[attention]/BertSelfOutput[output]/LayerNorm[LayerNorm] <=> self.l_8
        # BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[18]/BertIntermediate[intermediate]/Linear[dense] <=> self.l_9
        # BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[18]/BertOutput[output]/Linear[dense] <=> self.l_10
        # BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[18]/BertOutput[output]/Dropout[dropout] <=> self.l_11
        # BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[18]/BertOutput[output]/LayerNorm[LayerNorm] <=> self.l_12
        # BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[19]/BertAttention[attention]/BertSelfAttention[self]/Linear[query] <=> self.l_13
        # BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[19]/BertAttention[attention]/BertSelfAttention[self]/Linear[key] <=> self.l_14
        # BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[19]/BertAttention[attention]/BertSelfAttention[self]/Linear[value] <=> self.l_15
        # BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[19]/BertAttention[attention]/BertSelfAttention[self]/Softmax[softmax] <=> self.l_16
        # BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[19]/BertAttention[attention]/BertSelfAttention[self]/Dropout[dropout] <=> self.l_17
        # BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[19]/BertAttention[attention]/BertSelfOutput[output]/Linear[dense] <=> self.l_18
        # BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[19]/BertAttention[attention]/BertSelfOutput[output]/Dropout[dropout] <=> self.l_19
        # BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[19]/BertAttention[attention]/BertSelfOutput[output]/LayerNorm[LayerNorm] <=> self.l_20
        # BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[19]/BertIntermediate[intermediate]/Linear[dense] <=> self.l_21
        # BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[19]/BertOutput[output]/Linear[dense] <=> self.l_22
        # BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[19]/BertOutput[output]/Dropout[dropout] <=> self.l_23
        # BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[19]/BertOutput[output]/LayerNorm[LayerNorm] <=> self.l_24
        # BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[20]/BertAttention[attention]/BertSelfAttention[self]/Linear[query] <=> self.l_25
        # BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[20]/BertAttention[attention]/BertSelfAttention[self]/Linear[key] <=> self.l_26
        # BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[20]/BertAttention[attention]/BertSelfAttention[self]/Linear[value] <=> self.l_27
        # BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[20]/BertAttention[attention]/BertSelfAttention[self]/Softmax[softmax] <=> self.l_28
        # BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[20]/BertAttention[attention]/BertSelfAttention[self]/Dropout[dropout] <=> self.l_29
        # BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[20]/BertAttention[attention]/BertSelfOutput[output]/Linear[dense] <=> self.l_30
        # BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[20]/BertAttention[attention]/BertSelfOutput[output]/Dropout[dropout] <=> self.l_31
        # BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[20]/BertAttention[attention]/BertSelfOutput[output]/LayerNorm[LayerNorm] <=> self.l_32
        # BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[20]/BertIntermediate[intermediate]/Linear[dense] <=> self.l_33
        # BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[20]/BertOutput[output]/Linear[dense] <=> self.l_34
        # BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[20]/BertOutput[output]/Dropout[dropout] <=> self.l_35
        # BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[20]/BertOutput[output]/LayerNorm[LayerNorm] <=> self.l_36
        # BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/tuple::__getitem___2118 <=> x0
        # BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[17]/BertOutput[output]/Tensor::__add___2235 <=> x1

        # moving inputs to current device no op if already on the correct device
        x0, x1 = move_tensors((x0, x1), self.device)
        t_0 = self.l_0(x1)
        t_0 = (t_0, x0)
        t_1 = t_0[0]
        t_0 = t_0[1]
        t_2 = self.l_1(t_1)
        t_3 = self.l_2(t_1)
        t_4 = self.l_3(t_1)
        t_5 = t_2.size()
        t_6 = slice(None, -1, None)
        t_6 = t_5[t_6]
        t_5 = (16, 64)
        t_5 = t_6 + t_5
        t_6 = t_5[0]
        t_7 = t_5[1]
        t_8 = t_5[2]
        t_5 = t_5[3]
        t_5 = t_2.view(t_6, t_7, t_8, t_5)
        t_5 = t_5.permute(0, 2, 1, 3)
        t_8 = t_3.size()
        t_7 = slice(None, -1, None)
        t_7 = t_8[t_7]
        t_8 = (16, 64)
        t_8 = t_7 + t_8
        t_7 = t_8[0]
        t_6 = t_8[1]
        t_2 = t_8[2]
        t_8 = t_8[3]
        t_8 = t_3.view(t_7, t_6, t_2, t_8)
        t_8 = t_8.permute(0, 2, 1, 3)
        t_2 = t_4.size()
        t_6 = slice(None, -1, None)
        t_6 = t_2[t_6]
        t_2 = (16, 64)
        t_2 = t_6 + t_2
        t_6 = t_2[0]
        t_7 = t_2[1]
        t_3 = t_2[2]
        t_2 = t_2[3]
        t_2 = t_4.view(t_6, t_7, t_3, t_2)
        t_2 = t_2.permute(0, 2, 1, 3)
        t_8 = t_8.transpose(-1, -2)
        t_8 = torch.matmul(t_5, t_8)
        t_5 = math.sqrt(64)
        t_5 = t_8 / t_5
        t_5 = t_5 + t_0
        t_5 = self.l_4(t_5)
        t_5 = self.l_5(t_5)
        t_2 = torch.matmul(t_5, t_2)
        t_2 = t_2.permute(0, 2, 1, 3)
        t_2 = t_2.contiguous()
        t_5 = t_2.size()
        t_8 = slice(None, -2, None)
        t_8 = t_5[t_8]
        t_5 = (1024,)
        t_5 = t_8 + t_5
        t_8 = t_5[0]
        t_3 = t_5[1]
        t_5 = t_5[2]
        t_5 = t_2.view(t_8, t_3, t_5)
        t_5 = self.l_6(t_5)
        t_5 = self.l_7(t_5)
        t_1 = t_5 + t_1
        t_1 = self.l_8(t_1)
        t_5 = self.l_9(t_1)
        t_5 = torch.nn.functional.gelu(t_5)
        t_5 = self.l_10(t_5)
        t_5 = self.l_11(t_5)
        t_1 = t_5 + t_1
        t_1 = self.l_12(t_1)
        t_0 = (t_1, t_0)
        t_1 = t_0[0]
        t_0 = t_0[1]
        t_5 = self.l_13(t_1)
        t_3 = self.l_14(t_1)
        t_8 = self.l_15(t_1)
        t_2 = t_5.size()
        t_7 = slice(None, -1, None)
        t_7 = t_2[t_7]
        t_2 = (16, 64)
        t_2 = t_7 + t_2
        t_7 = t_2[0]
        t_6 = t_2[1]
        t_4 = t_2[2]
        t_2 = t_2[3]
        t_2 = t_5.view(t_7, t_6, t_4, t_2)
        t_2 = t_2.permute(0, 2, 1, 3)
        t_4 = t_3.size()
        t_6 = slice(None, -1, None)
        t_6 = t_4[t_6]
        t_4 = (16, 64)
        t_4 = t_6 + t_4
        t_6 = t_4[0]
        t_7 = t_4[1]
        t_5 = t_4[2]
        t_4 = t_4[3]
        t_4 = t_3.view(t_6, t_7, t_5, t_4)
        t_4 = t_4.permute(0, 2, 1, 3)
        t_5 = t_8.size()
        t_7 = slice(None, -1, None)
        t_7 = t_5[t_7]
        t_5 = (16, 64)
        t_5 = t_7 + t_5
        t_7 = t_5[0]
        t_6 = t_5[1]
        t_3 = t_5[2]
        t_5 = t_5[3]
        t_5 = t_8.view(t_7, t_6, t_3, t_5)
        t_5 = t_5.permute(0, 2, 1, 3)
        t_4 = t_4.transpose(-1, -2)
        t_4 = torch.matmul(t_2, t_4)
        t_2 = math.sqrt(64)
        t_2 = t_4 / t_2
        t_2 = t_2 + t_0
        t_2 = self.l_16(t_2)
        t_2 = self.l_17(t_2)
        t_5 = torch.matmul(t_2, t_5)
        t_5 = t_5.permute(0, 2, 1, 3)
        t_5 = t_5.contiguous()
        t_2 = t_5.size()
        t_4 = slice(None, -2, None)
        t_4 = t_2[t_4]
        t_2 = (1024,)
        t_2 = t_4 + t_2
        t_4 = t_2[0]
        t_3 = t_2[1]
        t_2 = t_2[2]
        t_2 = t_5.view(t_4, t_3, t_2)
        t_2 = self.l_18(t_2)
        t_2 = self.l_19(t_2)
        t_1 = t_2 + t_1
        t_1 = self.l_20(t_1)
        t_2 = self.l_21(t_1)
        t_2 = torch.nn.functional.gelu(t_2)
        t_2 = self.l_22(t_2)
        t_2 = self.l_23(t_2)
        t_1 = t_2 + t_1
        t_1 = self.l_24(t_1)
        t_0 = (t_1, t_0)
        t_1 = t_0[0]
        t_0 = t_0[1]
        t_2 = self.l_25(t_1)
        t_3 = self.l_26(t_1)
        t_4 = self.l_27(t_1)
        t_5 = t_2.size()
        t_6 = slice(None, -1, None)
        t_6 = t_5[t_6]
        t_5 = (16, 64)
        t_5 = t_6 + t_5
        t_6 = t_5[0]
        t_7 = t_5[1]
        t_8 = t_5[2]
        t_5 = t_5[3]
        t_5 = t_2.view(t_6, t_7, t_8, t_5)
        t_5 = t_5.permute(0, 2, 1, 3)
        t_8 = t_3.size()
        t_7 = slice(None, -1, None)
        t_7 = t_8[t_7]
        t_8 = (16, 64)
        t_8 = t_7 + t_8
        t_7 = t_8[0]
        t_6 = t_8[1]
        t_2 = t_8[2]
        t_8 = t_8[3]
        t_8 = t_3.view(t_7, t_6, t_2, t_8)
        t_8 = t_8.permute(0, 2, 1, 3)
        t_2 = t_4.size()
        t_6 = slice(None, -1, None)
        t_6 = t_2[t_6]
        t_2 = (16, 64)
        t_2 = t_6 + t_2
        t_6 = t_2[0]
        t_7 = t_2[1]
        t_3 = t_2[2]
        t_2 = t_2[3]
        t_2 = t_4.view(t_6, t_7, t_3, t_2)
        t_2 = t_2.permute(0, 2, 1, 3)
        t_8 = t_8.transpose(-1, -2)
        t_8 = torch.matmul(t_5, t_8)
        t_5 = math.sqrt(64)
        t_5 = t_8 / t_5
        t_5 = t_5 + t_0
        t_5 = self.l_28(t_5)
        t_5 = self.l_29(t_5)
        t_2 = torch.matmul(t_5, t_2)
        t_2 = t_2.permute(0, 2, 1, 3)
        t_2 = t_2.contiguous()
        t_5 = t_2.size()
        t_8 = slice(None, -2, None)
        t_8 = t_5[t_8]
        t_5 = (1024,)
        t_5 = t_8 + t_5
        t_8 = t_5[0]
        t_3 = t_5[1]
        t_5 = t_5[2]
        t_5 = t_2.view(t_8, t_3, t_5)
        t_5 = self.l_30(t_5)
        t_5 = self.l_31(t_5)
        t_1 = t_5 + t_1
        t_1 = self.l_32(t_1)
        t_5 = self.l_33(t_1)
        t_5 = torch.nn.functional.gelu(t_5)
        t_5 = self.l_34(t_5)
        t_5 = self.l_35(t_5)
        t_1 = t_5 + t_1
        t_1 = self.l_36(t_1)
        # returning:
        # BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/tuple::__getitem___2487
        # BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[20]/BertOutput[output]/LayerNorm[LayerNorm]
        return (t_0, t_1)

    def state_dict(self,device=None):
        # we return the state dict of this part as it should be in the original model
        return state_dict(self,device=device)

    def load_state_dict(self, state):
        return load_state_dict(self,state)

    def named_parameters(self,recurse=True):
        # we return the named parameters of this part as it should be in the original model
        return named_parameters(self,recurse=recurse)

    def named_buffers(self,recurse=True):
        # we return the named buffers of this part as it should be in the original model
        return named_buffers(self,recurse=recurse)

    def cpu(self):
        return cpu(self)

    def cuda(self,device=None):
        return cuda(self,device=device)

    def to(self, *args, **kwargs):
        return to(self,*args,**kwargs)


class Partition7(nn.Module):
    BASIC_BLOCKS=(
            Dropout,
            Linear,
            LayerNorm,
            Softmax,
            Tanh,
        )
    LAYER_SCOPES=[
            'BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[21]/BertAttention[attention]/BertSelfAttention[self]/Linear[query]',
            'BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[21]/BertAttention[attention]/BertSelfAttention[self]/Linear[key]',
            'BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[21]/BertAttention[attention]/BertSelfAttention[self]/Linear[value]',
            'BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[21]/BertAttention[attention]/BertSelfAttention[self]/Softmax[softmax]',
            'BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[21]/BertAttention[attention]/BertSelfAttention[self]/Dropout[dropout]',
            'BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[21]/BertAttention[attention]/BertSelfOutput[output]/Linear[dense]',
            'BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[21]/BertAttention[attention]/BertSelfOutput[output]/Dropout[dropout]',
            'BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[21]/BertAttention[attention]/BertSelfOutput[output]/LayerNorm[LayerNorm]',
            'BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[21]/BertIntermediate[intermediate]/Linear[dense]',
            'BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[21]/BertOutput[output]/Linear[dense]',
            'BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[21]/BertOutput[output]/Dropout[dropout]',
            'BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[21]/BertOutput[output]/LayerNorm[LayerNorm]',
            'BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[22]/BertAttention[attention]/BertSelfAttention[self]/Linear[query]',
            'BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[22]/BertAttention[attention]/BertSelfAttention[self]/Linear[key]',
            'BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[22]/BertAttention[attention]/BertSelfAttention[self]/Linear[value]',
            'BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[22]/BertAttention[attention]/BertSelfAttention[self]/Softmax[softmax]',
            'BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[22]/BertAttention[attention]/BertSelfAttention[self]/Dropout[dropout]',
            'BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[22]/BertAttention[attention]/BertSelfOutput[output]/Linear[dense]',
            'BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[22]/BertAttention[attention]/BertSelfOutput[output]/Dropout[dropout]',
            'BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[22]/BertAttention[attention]/BertSelfOutput[output]/LayerNorm[LayerNorm]',
            'BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[22]/BertIntermediate[intermediate]/Linear[dense]',
            'BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[22]/BertOutput[output]/Linear[dense]',
            'BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[22]/BertOutput[output]/Dropout[dropout]',
            'BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[22]/BertOutput[output]/LayerNorm[LayerNorm]',
            'BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[23]/BertAttention[attention]/BertSelfAttention[self]/Linear[query]',
            'BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[23]/BertAttention[attention]/BertSelfAttention[self]/Linear[key]',
            'BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[23]/BertAttention[attention]/BertSelfAttention[self]/Linear[value]',
            'BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[23]/BertAttention[attention]/BertSelfAttention[self]/Softmax[softmax]',
            'BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[23]/BertAttention[attention]/BertSelfAttention[self]/Dropout[dropout]',
            'BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[23]/BertAttention[attention]/BertSelfOutput[output]/Linear[dense]',
            'BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[23]/BertAttention[attention]/BertSelfOutput[output]/Dropout[dropout]',
            'BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[23]/BertAttention[attention]/BertSelfOutput[output]/LayerNorm[LayerNorm]',
            'BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[23]/BertIntermediate[intermediate]/Linear[dense]',
            'BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[23]/BertOutput[output]/Linear[dense]',
            'BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[23]/BertOutput[output]/Dropout[dropout]',
            'BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[23]/BertOutput[output]/LayerNorm[LayerNorm]',
            'BertForSequenceClassification/BertModel[bert]/BertPooler[pooler]/Linear[dense]',
            'BertForSequenceClassification/BertModel[bert]/BertPooler[pooler]/Tanh[activation]',
            'BertForSequenceClassification/Dropout[dropout]',
            'BertForSequenceClassification/Linear[classifier]',
        ]
    TENSORS=[
        ]
    def __init__(self, layers, tensors):
        super(Partition7, self).__init__()

        #initialize partition layers
        for idx,layer_scope in enumerate(self.LAYER_SCOPES):
            self.add_module(f'l_{idx}',layers[layer_scope])

        #initialize partition tensors
        b=p=0
        for tensor_scope in self.TENSORS:
            tensor=tensors[tensor_scope]
            if isinstance(tensor,nn.Parameter):
                self.register_parameter(f'p_{p}',tensor)
                p+=1
            else:
                self.register_buffer(f'b_{b}',tensor)
                b+=1

        self.device = torch.device('cuda:7')
        self.lookup = { 'l_0': 'bert.encoder.21.attention.self.query',
                        'l_1': 'bert.encoder.21.attention.self.key',
                        'l_2': 'bert.encoder.21.attention.self.value',
                        'l_3': 'bert.encoder.21.attention.self.softmax',
                        'l_4': 'bert.encoder.21.attention.self.dropout',
                        'l_5': 'bert.encoder.21.attention.output.dense',
                        'l_6': 'bert.encoder.21.attention.output.dropout',
                        'l_7': 'bert.encoder.21.attention.output.LayerNorm',
                        'l_8': 'bert.encoder.21.intermediate.dense',
                        'l_9': 'bert.encoder.21.output.dense',
                        'l_10': 'bert.encoder.21.output.dropout',
                        'l_11': 'bert.encoder.21.output.LayerNorm',
                        'l_12': 'bert.encoder.22.attention.self.query',
                        'l_13': 'bert.encoder.22.attention.self.key',
                        'l_14': 'bert.encoder.22.attention.self.value',
                        'l_15': 'bert.encoder.22.attention.self.softmax',
                        'l_16': 'bert.encoder.22.attention.self.dropout',
                        'l_17': 'bert.encoder.22.attention.output.dense',
                        'l_18': 'bert.encoder.22.attention.output.dropout',
                        'l_19': 'bert.encoder.22.attention.output.LayerNorm',
                        'l_20': 'bert.encoder.22.intermediate.dense',
                        'l_21': 'bert.encoder.22.output.dense',
                        'l_22': 'bert.encoder.22.output.dropout',
                        'l_23': 'bert.encoder.22.output.LayerNorm',
                        'l_24': 'bert.encoder.23.attention.self.query',
                        'l_25': 'bert.encoder.23.attention.self.key',
                        'l_26': 'bert.encoder.23.attention.self.value',
                        'l_27': 'bert.encoder.23.attention.self.softmax',
                        'l_28': 'bert.encoder.23.attention.self.dropout',
                        'l_29': 'bert.encoder.23.attention.output.dense',
                        'l_30': 'bert.encoder.23.attention.output.dropout',
                        'l_31': 'bert.encoder.23.attention.output.LayerNorm',
                        'l_32': 'bert.encoder.23.intermediate.dense',
                        'l_33': 'bert.encoder.23.output.dense',
                        'l_34': 'bert.encoder.23.output.dropout',
                        'l_35': 'bert.encoder.23.output.LayerNorm',
                        'l_36': 'bert.pooler.dense',
                        'l_37': 'bert.pooler.activation',
                        'l_38': 'dropout',
                        'l_39': 'classifier'}

    def forward(self, x0, x1):
        # BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[21]/BertAttention[attention]/BertSelfAttention[self]/Linear[query] <=> self.l_0
        # BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[21]/BertAttention[attention]/BertSelfAttention[self]/Linear[key] <=> self.l_1
        # BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[21]/BertAttention[attention]/BertSelfAttention[self]/Linear[value] <=> self.l_2
        # BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[21]/BertAttention[attention]/BertSelfAttention[self]/Softmax[softmax] <=> self.l_3
        # BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[21]/BertAttention[attention]/BertSelfAttention[self]/Dropout[dropout] <=> self.l_4
        # BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[21]/BertAttention[attention]/BertSelfOutput[output]/Linear[dense] <=> self.l_5
        # BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[21]/BertAttention[attention]/BertSelfOutput[output]/Dropout[dropout] <=> self.l_6
        # BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[21]/BertAttention[attention]/BertSelfOutput[output]/LayerNorm[LayerNorm] <=> self.l_7
        # BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[21]/BertIntermediate[intermediate]/Linear[dense] <=> self.l_8
        # BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[21]/BertOutput[output]/Linear[dense] <=> self.l_9
        # BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[21]/BertOutput[output]/Dropout[dropout] <=> self.l_10
        # BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[21]/BertOutput[output]/LayerNorm[LayerNorm] <=> self.l_11
        # BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[22]/BertAttention[attention]/BertSelfAttention[self]/Linear[query] <=> self.l_12
        # BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[22]/BertAttention[attention]/BertSelfAttention[self]/Linear[key] <=> self.l_13
        # BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[22]/BertAttention[attention]/BertSelfAttention[self]/Linear[value] <=> self.l_14
        # BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[22]/BertAttention[attention]/BertSelfAttention[self]/Softmax[softmax] <=> self.l_15
        # BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[22]/BertAttention[attention]/BertSelfAttention[self]/Dropout[dropout] <=> self.l_16
        # BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[22]/BertAttention[attention]/BertSelfOutput[output]/Linear[dense] <=> self.l_17
        # BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[22]/BertAttention[attention]/BertSelfOutput[output]/Dropout[dropout] <=> self.l_18
        # BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[22]/BertAttention[attention]/BertSelfOutput[output]/LayerNorm[LayerNorm] <=> self.l_19
        # BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[22]/BertIntermediate[intermediate]/Linear[dense] <=> self.l_20
        # BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[22]/BertOutput[output]/Linear[dense] <=> self.l_21
        # BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[22]/BertOutput[output]/Dropout[dropout] <=> self.l_22
        # BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[22]/BertOutput[output]/LayerNorm[LayerNorm] <=> self.l_23
        # BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[23]/BertAttention[attention]/BertSelfAttention[self]/Linear[query] <=> self.l_24
        # BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[23]/BertAttention[attention]/BertSelfAttention[self]/Linear[key] <=> self.l_25
        # BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[23]/BertAttention[attention]/BertSelfAttention[self]/Linear[value] <=> self.l_26
        # BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[23]/BertAttention[attention]/BertSelfAttention[self]/Softmax[softmax] <=> self.l_27
        # BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[23]/BertAttention[attention]/BertSelfAttention[self]/Dropout[dropout] <=> self.l_28
        # BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[23]/BertAttention[attention]/BertSelfOutput[output]/Linear[dense] <=> self.l_29
        # BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[23]/BertAttention[attention]/BertSelfOutput[output]/Dropout[dropout] <=> self.l_30
        # BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[23]/BertAttention[attention]/BertSelfOutput[output]/LayerNorm[LayerNorm] <=> self.l_31
        # BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[23]/BertIntermediate[intermediate]/Linear[dense] <=> self.l_32
        # BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[23]/BertOutput[output]/Linear[dense] <=> self.l_33
        # BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[23]/BertOutput[output]/Dropout[dropout] <=> self.l_34
        # BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[23]/BertOutput[output]/LayerNorm[LayerNorm] <=> self.l_35
        # BertForSequenceClassification/BertModel[bert]/BertPooler[pooler]/Linear[dense] <=> self.l_36
        # BertForSequenceClassification/BertModel[bert]/BertPooler[pooler]/Tanh[activation] <=> self.l_37
        # BertForSequenceClassification/Dropout[dropout] <=> self.l_38
        # BertForSequenceClassification/Linear[classifier] <=> self.l_39
        # BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/tuple::__getitem___2487 <=> x0
        # BertForSequenceClassification/BertModel[bert]/BertEncoder[encoder]/BertLayer[20]/BertOutput[output]/LayerNorm[LayerNorm] <=> x1

        # moving inputs to current device no op if already on the correct device
        x0, x1 = move_tensors((x0, x1), self.device)
        t_0 = (x1, x0)
        t_1 = t_0[0]
        t_0 = t_0[1]
        t_2 = self.l_0(t_1)
        t_3 = self.l_1(t_1)
        t_4 = self.l_2(t_1)
        t_5 = t_2.size()
        t_6 = slice(None, -1, None)
        t_6 = t_5[t_6]
        t_5 = (16, 64)
        t_5 = t_6 + t_5
        t_6 = t_5[0]
        t_7 = t_5[1]
        t_8 = t_5[2]
        t_5 = t_5[3]
        t_5 = t_2.view(t_6, t_7, t_8, t_5)
        t_5 = t_5.permute(0, 2, 1, 3)
        t_8 = t_3.size()
        t_7 = slice(None, -1, None)
        t_7 = t_8[t_7]
        t_8 = (16, 64)
        t_8 = t_7 + t_8
        t_7 = t_8[0]
        t_6 = t_8[1]
        t_2 = t_8[2]
        t_8 = t_8[3]
        t_8 = t_3.view(t_7, t_6, t_2, t_8)
        t_8 = t_8.permute(0, 2, 1, 3)
        t_2 = t_4.size()
        t_6 = slice(None, -1, None)
        t_6 = t_2[t_6]
        t_2 = (16, 64)
        t_2 = t_6 + t_2
        t_6 = t_2[0]
        t_7 = t_2[1]
        t_3 = t_2[2]
        t_2 = t_2[3]
        t_2 = t_4.view(t_6, t_7, t_3, t_2)
        t_2 = t_2.permute(0, 2, 1, 3)
        t_8 = t_8.transpose(-1, -2)
        t_8 = torch.matmul(t_5, t_8)
        t_5 = math.sqrt(64)
        t_5 = t_8 / t_5
        t_5 = t_5 + t_0
        t_5 = self.l_3(t_5)
        t_5 = self.l_4(t_5)
        t_2 = torch.matmul(t_5, t_2)
        t_2 = t_2.permute(0, 2, 1, 3)
        t_2 = t_2.contiguous()
        t_5 = t_2.size()
        t_8 = slice(None, -2, None)
        t_8 = t_5[t_8]
        t_5 = (1024,)
        t_5 = t_8 + t_5
        t_8 = t_5[0]
        t_3 = t_5[1]
        t_5 = t_5[2]
        t_5 = t_2.view(t_8, t_3, t_5)
        t_5 = self.l_5(t_5)
        t_5 = self.l_6(t_5)
        t_1 = t_5 + t_1
        t_1 = self.l_7(t_1)
        t_5 = self.l_8(t_1)
        t_5 = torch.nn.functional.gelu(t_5)
        t_5 = self.l_9(t_5)
        t_5 = self.l_10(t_5)
        t_1 = t_5 + t_1
        t_1 = self.l_11(t_1)
        t_0 = (t_1, t_0)
        t_1 = t_0[0]
        t_0 = t_0[1]
        t_5 = self.l_12(t_1)
        t_3 = self.l_13(t_1)
        t_8 = self.l_14(t_1)
        t_2 = t_5.size()
        t_7 = slice(None, -1, None)
        t_7 = t_2[t_7]
        t_2 = (16, 64)
        t_2 = t_7 + t_2
        t_7 = t_2[0]
        t_6 = t_2[1]
        t_4 = t_2[2]
        t_2 = t_2[3]
        t_2 = t_5.view(t_7, t_6, t_4, t_2)
        t_2 = t_2.permute(0, 2, 1, 3)
        t_4 = t_3.size()
        t_6 = slice(None, -1, None)
        t_6 = t_4[t_6]
        t_4 = (16, 64)
        t_4 = t_6 + t_4
        t_6 = t_4[0]
        t_7 = t_4[1]
        t_5 = t_4[2]
        t_4 = t_4[3]
        t_4 = t_3.view(t_6, t_7, t_5, t_4)
        t_4 = t_4.permute(0, 2, 1, 3)
        t_5 = t_8.size()
        t_7 = slice(None, -1, None)
        t_7 = t_5[t_7]
        t_5 = (16, 64)
        t_5 = t_7 + t_5
        t_7 = t_5[0]
        t_6 = t_5[1]
        t_3 = t_5[2]
        t_5 = t_5[3]
        t_5 = t_8.view(t_7, t_6, t_3, t_5)
        t_5 = t_5.permute(0, 2, 1, 3)
        t_4 = t_4.transpose(-1, -2)
        t_4 = torch.matmul(t_2, t_4)
        t_2 = math.sqrt(64)
        t_2 = t_4 / t_2
        t_2 = t_2 + t_0
        t_2 = self.l_15(t_2)
        t_2 = self.l_16(t_2)
        t_5 = torch.matmul(t_2, t_5)
        t_5 = t_5.permute(0, 2, 1, 3)
        t_5 = t_5.contiguous()
        t_2 = t_5.size()
        t_4 = slice(None, -2, None)
        t_4 = t_2[t_4]
        t_2 = (1024,)
        t_2 = t_4 + t_2
        t_4 = t_2[0]
        t_3 = t_2[1]
        t_2 = t_2[2]
        t_2 = t_5.view(t_4, t_3, t_2)
        t_2 = self.l_17(t_2)
        t_2 = self.l_18(t_2)
        t_1 = t_2 + t_1
        t_1 = self.l_19(t_1)
        t_2 = self.l_20(t_1)
        t_2 = torch.nn.functional.gelu(t_2)
        t_2 = self.l_21(t_2)
        t_2 = self.l_22(t_2)
        t_1 = t_2 + t_1
        t_1 = self.l_23(t_1)
        t_0 = (t_1, t_0)
        t_1 = t_0[0]
        t_0 = t_0[1]
        t_2 = self.l_24(t_1)
        t_3 = self.l_25(t_1)
        t_4 = self.l_26(t_1)
        t_5 = t_2.size()
        t_6 = slice(None, -1, None)
        t_6 = t_5[t_6]
        t_5 = (16, 64)
        t_5 = t_6 + t_5
        t_6 = t_5[0]
        t_7 = t_5[1]
        t_8 = t_5[2]
        t_5 = t_5[3]
        t_5 = t_2.view(t_6, t_7, t_8, t_5)
        t_5 = t_5.permute(0, 2, 1, 3)
        t_8 = t_3.size()
        t_7 = slice(None, -1, None)
        t_7 = t_8[t_7]
        t_8 = (16, 64)
        t_8 = t_7 + t_8
        t_7 = t_8[0]
        t_6 = t_8[1]
        t_2 = t_8[2]
        t_8 = t_8[3]
        t_8 = t_3.view(t_7, t_6, t_2, t_8)
        t_8 = t_8.permute(0, 2, 1, 3)
        t_2 = t_4.size()
        t_6 = slice(None, -1, None)
        t_6 = t_2[t_6]
        t_2 = (16, 64)
        t_2 = t_6 + t_2
        t_6 = t_2[0]
        t_7 = t_2[1]
        t_3 = t_2[2]
        t_2 = t_2[3]
        t_2 = t_4.view(t_6, t_7, t_3, t_2)
        t_2 = t_2.permute(0, 2, 1, 3)
        t_8 = t_8.transpose(-1, -2)
        t_8 = torch.matmul(t_5, t_8)
        t_5 = math.sqrt(64)
        t_5 = t_8 / t_5
        t_5 = t_5 + t_0
        t_5 = self.l_27(t_5)
        t_5 = self.l_28(t_5)
        t_2 = torch.matmul(t_5, t_2)
        t_2 = t_2.permute(0, 2, 1, 3)
        t_2 = t_2.contiguous()
        t_5 = t_2.size()
        t_8 = slice(None, -2, None)
        t_8 = t_5[t_8]
        t_5 = (1024,)
        t_5 = t_8 + t_5
        t_8 = t_5[0]
        t_3 = t_5[1]
        t_5 = t_5[2]
        t_5 = t_2.view(t_8, t_3, t_5)
        t_5 = self.l_29(t_5)
        t_5 = self.l_30(t_5)
        t_1 = t_5 + t_1
        t_1 = self.l_31(t_1)
        t_5 = self.l_32(t_1)
        t_5 = torch.nn.functional.gelu(t_5)
        t_5 = self.l_33(t_5)
        t_5 = self.l_34(t_5)
        t_1 = t_5 + t_1
        t_1 = self.l_35(t_1)
        t_0 = (t_1, t_0)
        t_1 = t_0[0]
        t_0 = t_0[1]
        t_5 = slice(None, None, None)
        t_5 = (t_5, 0)
        t_5 = t_1[t_5]
        t_5 = self.l_36(t_5)
        t_5 = self.l_37(t_5)
        t_5 = (t_1, t_5)
        t_5 = t_5[1]
        t_5 = self.l_38(t_5)
        t_5 = self.l_39(t_5)
        # returning:
        # BertForSequenceClassification/Linear[classifier]
        return (t_5,)

    def state_dict(self,device=None):
        # we return the state dict of this part as it should be in the original model
        return state_dict(self,device=device)

    def load_state_dict(self, state):
        return load_state_dict(self,state)

    def named_parameters(self,recurse=True):
        # we return the named parameters of this part as it should be in the original model
        return named_parameters(self,recurse=recurse)

    def named_buffers(self,recurse=True):
        # we return the named buffers of this part as it should be in the original model
        return named_buffers(self,recurse=recurse)

    def cpu(self):
        return cpu(self)

    def cuda(self,device=None):
        return cuda(self,device=device)

    def to(self, *args, **kwargs):
        return to(self,*args,**kwargs)


def traverse_model(module: nn.Module, depth: int, prefix: Optional[str] = None,
                   basic_blocks: Tuple[nn.Module] = (), full: bool = False) -> Iterator[Tuple[nn.Module, str, nn.Module]]:
    '''
    iterate over model layers yielding the layer,layer_scope,encasing_module
    Parameters:
    -----------
    model:
        the model to iterate over
    depth:
        how far down in the model tree to go
    basic_blocks:
        a list of modules that if encountered will not be broken down
    full:
        whether to yield only layers specified by the depth and basick_block options or to yield all layers
    '''
    if prefix is None:
        prefix = type(module).__name__

    for name, sub_module in module.named_children():
        scope = prefix + "/" + type(sub_module).__name__ + f"[{name}]"
        if len(list(sub_module.children())) == 0 or isinstance(sub_module, tuple(basic_blocks)) or depth == 0:
            if full:
                yield sub_module, scope, module, True
            else:
                yield sub_module, scope, module
        else:
            if full:
                yield sub_module, scope, module, False
            yield from traverse_model(sub_module, depth - 1, scope, basic_blocks, full)


def layerDict(model: nn.Module, depth=1000, basic_blocks=()) -> Dict[str, nn.Module]:
    return {s: l for l, s, _ in traverse_model(model, depth, basic_blocks=basic_blocks)}


def traverse_params_buffs(module: nn.Module, prefix: Optional[str] = None) -> Iterator[Tuple[torch.tensor, str]]:
    '''
    iterate over model's buffers and parameters yielding obj,obj_scope

    Parameters:
    -----------
    model:
        the model to iterate over
    '''
    if prefix is None:
        prefix = type(module).__name__

    # params
    for param_name, param in module.named_parameters(recurse=False):
        param_scope = f"{prefix}/{type(param).__name__}[{param_name}]"
        yield param, param_scope

    # buffs
    for buffer_name, buffer in module.named_buffers(recurse=False):
        buffer_scope = f"{prefix}/{type(buffer).__name__}[{buffer_name}]"
        yield buffer, buffer_scope

    # recurse
    for name, sub_module in module.named_children():
        yield from traverse_params_buffs(sub_module, prefix + "/" + type(sub_module).__name__ + f"[{name}]")


def tensorDict(model: nn.Module) -> OrderedDict[str, Tensor]:
    return collections.OrderedDict((s, t)for t, s in traverse_params_buffs(model))


def move_tensors(ts, device):
    def move(t):
        if isinstance(t, (nn.Module, Tensor)):
            return t.to(device)
        return t

    return nested_map(move, ts)


def nested_map(func, ts,full=False):
    if isinstance(ts, torch.Size):
        # size is inheriting from tuple which is stupid
        return func(ts)
    elif isinstance(ts, (list, tuple, set)):
        return type(ts)(nested_map(func, t,full=full) for t in ts)
    elif isinstance(ts, dict):
        return {k: nested_map(func, v,full=full) for k, v in ts.items()}
    elif isinstance(ts, slice) and full:
        start = nested_map(func, ts.start,full=full)
        stop = nested_map(func, ts.stop,full=full)
        step = nested_map(func, ts.step,full=full)
        return slice(start, stop, step)
    return func(ts)


def state_dict(partition, device=None):
    # we return the state dict of this part as it should be in the original model
    state = nn.Module.state_dict(partition)
    lookup = partition.lookup
    result = dict()
    for k, v in state.items():
        if k in lookup:
            result[lookup[k]] = v if device is None else v.to(device)
        else:
            assert '.' in k
            split_idx = k.find('.')
            new_k = lookup[k[:split_idx]] + k[split_idx:]
            result[new_k] = v if device is None else v.to(device)
    return result


def load_state_dict(partition, state):
    reverse_lookup = {v: k for k, v in partition.lookup.items()}
    device = partition.device
    keys = list(partition.state_dict(None).keys())
    new_state = dict()
    for k in keys:
        if k in reverse_lookup:
            new_state[reverse_lookup[k]] = state[k].to(device)
            continue
        idx = k.rfind(".")
        to_replace = k[:idx]
        if to_replace in reverse_lookup:
            key = reverse_lookup[to_replace] + k[idx:]
            new_state[key] = state[k].to(device)
    nn.Module.load_state_dict(partition, new_state, strict=True)


def named_buffers(partition, recurse=True):
    # we return the named buffers of this part as it should be in the original model
    params = nn.Module.named_buffers(partition, recurse=recurse)
    lookup = partition.lookup
    for k, v in params:
        if k in lookup:
            yield (lookup[k], v)
        else:
            assert '.' in k
            split_idx = k.find('.')
            new_k = lookup[k[:split_idx]] + k[split_idx:]
            yield (new_k, v)


def named_parameters(partition, recurse=True):
    # we return the named parameters of this part as it should be in the original model
    params = nn.Module.named_parameters(partition, recurse=recurse)
    lookup = partition.lookup
    for k, v in params:
        if k in lookup:
            yield (lookup[k], v)
        else:
            assert '.' in k
            split_idx = k.find('.')
            new_k = lookup[k[:split_idx]] + k[split_idx:]
            yield (new_k, v)


def cpu(partition):
    partition.device = torch.device('cpu')
    return nn.Module.cpu(partition)


def cuda(partition, device=None):
    if device is None:
        device = torch.cuda.current_device()
    partition.device = torch.device(device)
    return nn.Module.cuda(partition, partition.device)


def to(partition, *args, **kwargs):
    device = None
    if 'device' in kwargs:
        device = kwargs['device']
    elif 'tensor' in kwargs:
        device = kwargs['tensor'].device
    if args:
        if isinstance(args[0], (torch.device, int, str)):
            device = args[0]
        if torch.is_tensor(args[0]):
            device = args[0].device
    if not (device is None):
        partition.device = torch.device(device)
    return nn.Module.to(partition, *args, **kwargs)

"""analysis summary
-I- Printing Report
Number of stages: 8
cutting edges are edges between partitions
number of cutting edges: 15

backward times include recomputation
Analysis for async_pipeline=True: last partition will not do recomputation.

real times are based on real measurements of execution time of generated partitions ms
forward {0: 2.21, 1: 2.35, 2: 2.07, 3: 2.41, 4: 2.25, 5: 2.07, 6: 2.24, 7: 4.47}
backward {0: 10.25, 1: 11.3, 2: 10.86, 3: 10.73, 4: 10.54, 5: 10.0, 6: 10.44, 7: 9.02}

balance is ratio of computation time between fastest and slowest parts. (between 0 and 1 higher is better)

real balance:
forward 0.464
backward 0.798

Assuming bandwidth of 11.0 GBps between GPUs

communication volumes size of activations of each partition
0: input size:'0.00 MB', recieve_time:'0.00 ms', out:'0.52 MB', send time:'0.05 ms'
1: input size:'0.52 MB', recieve_time:'0.05 ms', out:'1.05 MB', send time:'0.10 ms'
2: input size:'1.05 MB', recieve_time:'0.10 ms', out:'0.52 MB', send time:'0.05 ms'
3: input size:'0.52 MB', recieve_time:'0.05 ms', out:'0.52 MB', send time:'0.05 ms'
4: input size:'0.52 MB', recieve_time:'0.05 ms', out:'0.52 MB', send time:'0.05 ms'
5: input size:'0.52 MB', recieve_time:'0.05 ms', out:'0.52 MB', send time:'0.05 ms'
6: input size:'0.52 MB', recieve_time:'0.05 ms', out:'0.52 MB', send time:'0.05 ms'
7: input size:'0.52 MB', recieve_time:'0.05 ms', out:'0.00 MB', send time:'0.00 ms'

Compuatation Communication ratio (comp/(comp+comm)):
forward {0: 0.98, 1: 0.96, 2: 0.98, 3: 0.98, 4: 0.98, 5: 0.98, 6: 0.98, 7: 1.0} 
backward {0: 1.0, 1: 1.0, 2: 0.99, 3: 1.0, 4: 1.0, 5: 1.0, 6: 1.0, 7: 0.99}

Pipeline Slowdown: (compared to sequential executation with no communication, and same recompute policy)
forward 1.816
backward 1.092

Expected utilization by partition
forward {0: 0.48, 1: 0.51, 2: 0.45, 3: 0.53, 4: 0.49, 5: 0.45, 6: 0.49, 7: 1.0}
backward {0: 0.91, 1: 1.0, 2: 0.95, 3: 0.95, 4: 0.93, 5: 0.89, 6: 0.92, 7: 0.8}

worstcase: bwd: 11.299 fwd: 4.466
expected_speedup_compared_to_seq_no_recomp_no_comm: 5.868
Expected speedup for 8 partitions is: 6.168
"""