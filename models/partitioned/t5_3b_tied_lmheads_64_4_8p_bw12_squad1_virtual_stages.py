"""AutoGenerated with:
python partitioning_script.py t5 --model_name_or_path t5-3b --t5_task squad1 --lmhead --n_iter 10 --analysis_batch_size 32 --partitioning_batch_size 32 --precompute_masks --stateless_tied --lmhead --n_partitions 8 --max_seq_length 64 --answer_max_seq_length 4 --basic_blocks T5Block --partitioning_method 2DBIN --n_clusters 2 --save_memory_mode
"""
import torch
import math
import torch.functional
import torch.nn.functional
from torch import Tensor
import torch.nn as nn
from itertools import chain
from typing import Optional, Tuple, Iterator, Iterable, OrderedDict, Dict
import collections

from torch.nn.modules.loss import CrossEntropyLoss
from models.normal.NLP_models.modeling_t5 import T5LayerNorm
from models.normal.NLP_models.stateless import StatelessEmbedding
from torch.nn.modules.dropout import Dropout
from models.normal.NLP_models.modeling_t5 import T5Block
from torch.nn.modules.linear import Linear
# this is an auto generated file do not edit unless you know what you are doing


# partition adjacency
# model inputs {1, 2, 3, 4, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21}
# partition 0 {'inputs': set(), 'outputs': {3, 15}}
# partition 1 {'inputs': {'decoder_input_ids'}, 'outputs': {15}}
# partition 2 {'inputs': {'input_ids'}, 'outputs': {3}}
# partition 3 {'inputs': {0, 2, 'input_ids'}, 'outputs': {4}}
# partition 4 {'inputs': {'attention_mask', 3}, 'outputs': {5, 6}}
# partition 5 {'inputs': {4}, 'outputs': {7}}
# partition 6 {'inputs': {4}, 'outputs': {7, 8, 9, 10, 11, 12, 13, 14}}
# partition 7 {'inputs': {'attention_mask', 5, 6}, 'outputs': {8}}
# partition 8 {'inputs': {'attention_mask', 6, 7}, 'outputs': {9}}
# partition 9 {'inputs': {'attention_mask', 8, 6}, 'outputs': {10}}
# partition 10 {'inputs': {'attention_mask', 9, 6}, 'outputs': {11}}
# partition 11 {'inputs': {'attention_mask', 10, 6}, 'outputs': {12}}
# partition 12 {'inputs': {'attention_mask', 11, 6}, 'outputs': {13}}
# partition 13 {'inputs': {'attention_mask', 12, 6}, 'outputs': {14}}
# partition 14 {'inputs': {'attention_mask', 13, 6}, 'outputs': {15}}
# partition 15 {'inputs': {'decoder_attention_mask', 0, 1, 'decoder_input_ids', 14, 'inverted_encoder_attention_mask'}, 'outputs': {16, 17, 18, 19, 20}}
# partition 16 {'inputs': {'decoder_attention_mask', 'inverted_encoder_attention_mask', 15}, 'outputs': {17, 18, 19, 20}}
# partition 17 {'inputs': {'decoder_attention_mask', 16, 'inverted_encoder_attention_mask', 15}, 'outputs': {18}}
# partition 18 {'inputs': {'decoder_attention_mask', 15, 16, 17, 'inverted_encoder_attention_mask'}, 'outputs': {19}}
# partition 19 {'inputs': {'decoder_attention_mask', 15, 16, 18, 'inverted_encoder_attention_mask'}, 'outputs': {20}}
# partition 20 {'inputs': {'decoder_attention_mask', 15, 16, 19, 'inverted_encoder_attention_mask'}, 'outputs': {21}}
# partition 21 {'inputs': {20, 'lm_labels'}, 'outputs': {'output'}}
# model outputs {21}


def create_pipeline_configuration(DEBUG=False, batch_size=32):
    config = {
        'batch_dim': 0,
        'depth': 10000,
        'basic_blocks': (CrossEntropyLoss,T5LayerNorm,StatelessEmbedding,Dropout,T5Block,Linear),
        'model_inputs': {
            'attention_mask': {
                'shape': torch.Size([32, 1, 1, 64]),
                'dtype': torch.float32,
                'is_batched': True,
                'used_by': [4, 7, 8, 9, 10, 11, 12, 13, 14]},
            'decoder_attention_mask': {
                'shape': torch.Size([32, 1, 4, 4]),
                'dtype': torch.float32,
                'is_batched': True,
                'used_by': [15, 16, 17, 18, 19, 20]},
            'decoder_input_ids': {
                'shape': torch.Size([32, 4]),
                'dtype': torch.int64,
                'is_batched': True,
                'used_by': [1, 15]},
            'input_ids': {
                'shape': torch.Size([32, 64]),
                'dtype': torch.int64,
                'is_batched': True,
                'used_by': [2, 3]},
            'inverted_encoder_attention_mask': {
                'shape': torch.Size([32, 1, 1, 64]),
                'dtype': torch.float32,
                'is_batched': True,
                'used_by': [15, 16, 17, 18, 19, 20]},
            'lm_labels': {
                'shape': torch.Size([32, 4]),
                'dtype': torch.int64,
                'is_batched': True,
                'used_by': [21]}},
        'model_outputs': {
            'T5ForConditionalGeneration/CrossEntropyLoss[lm_loss]': {
                'shape': torch.Size([1]),
                'dtype': torch.float32,
                'is_batched': False,
                'created_by': 21}},
        'stages': {
            0: {
                'stage_cls': Partition0,
                'inputs': {
                    },
                'outputs': {
                    'T5ForConditionalGeneration/Parameter[shared_embed_weight]_3': {
                        'shape': torch.Size([32128, 1024]),
                        'dtype': torch.float32,
                        'req_grad': True,
                        'is_batched': False,
                        'used_by': [3]}},
                'devices': ['cpu' if DEBUG else 'cuda:0']},
            1: {
                'stage_cls': Partition1,
                'inputs': {
                    'decoder_input_ids': {
                        'shape': torch.Size([32, 4]),
                        'dtype': torch.int64,
                        'req_grad': False,
                        'is_batched': True,
                        'created_by': -1}},
                'outputs': {
                    'T5ForConditionalGeneration/T5Stack[decoder]/Tensor::size_117': {
                        'shape': torch.Size([2]),
                        'dtype': torch.Size,
                        'req_grad': False,
                        'is_batched': False,
                        'used_by': [15]}},
                'devices': ['cpu' if DEBUG else 'cuda:1']},
            2: {
                'stage_cls': Partition2,
                'inputs': {
                    'input_ids': {
                        'shape': torch.Size([32, 64]),
                        'dtype': torch.int64,
                        'req_grad': False,
                        'is_batched': True,
                        'created_by': -1}},
                'outputs': {
                    'T5ForConditionalGeneration/T5Stack[encoder]/Tensor::size_7': {
                        'shape': torch.Size([2]),
                        'dtype': torch.Size,
                        'req_grad': False,
                        'is_batched': False,
                        'used_by': [3]}},
                'devices': ['cpu' if DEBUG else 'cuda:2']},
            3: {
                'stage_cls': Partition3,
                'inputs': {
                    'input_ids': {
                        'shape': torch.Size([32, 64]),
                        'dtype': torch.int64,
                        'req_grad': False,
                        'is_batched': True,
                        'created_by': -1},
                    'T5ForConditionalGeneration/T5Stack[encoder]/Tensor::size_7': {
                        'shape': torch.Size([2]),
                        'dtype': torch.Size,
                        'req_grad': False,
                        'is_batched': False,
                        'created_by': 2},
                    'T5ForConditionalGeneration/Parameter[shared_embed_weight]_3': {
                        'shape': torch.Size([32128, 1024]),
                        'dtype': torch.float32,
                        'req_grad': True,
                        'is_batched': False,
                        'created_by': 0}},
                'outputs': {
                    'T5ForConditionalGeneration/Parameter[shared_embed_weight]_15': {
                        'shape': torch.Size([32128, 1024]),
                        'dtype': torch.float32,
                        'req_grad': True,
                        'is_batched': False,
                        'used_by': [15]},
                    'T5ForConditionalGeneration/T5Stack[encoder]/Dropout[dropout]': {
                        'shape': torch.Size([32, 64, 1024]),
                        'dtype': torch.float32,
                        'req_grad': True,
                        'is_batched': True,
                        'used_by': [4]}},
                'devices': ['cpu' if DEBUG else 'cuda:3']},
            4: {
                'stage_cls': Partition4,
                'inputs': {
                    'attention_mask': {
                        'shape': torch.Size([32, 1, 1, 64]),
                        'dtype': torch.float32,
                        'req_grad': False,
                        'is_batched': True,
                        'created_by': -1},
                    'T5ForConditionalGeneration/T5Stack[encoder]/Dropout[dropout]': {
                        'shape': torch.Size([32, 64, 1024]),
                        'dtype': torch.float32,
                        'req_grad': True,
                        'is_batched': True,
                        'created_by': 3}},
                'outputs': {
                    'T5ForConditionalGeneration/T5Stack[encoder]/T5Block[0]_5_0': {
                        'shape': torch.Size([32, 64, 1024]),
                        'dtype': torch.float32,
                        'req_grad': True,
                        'is_batched': True,
                        'used_by': [5]},
                    'T5ForConditionalGeneration/T5Stack[encoder]/T5Block[0]_5_1': {
                        'shape': torch.Size([32, 32, 64, 64]),
                        'dtype': torch.float32,
                        'req_grad': True,
                        'is_batched': True,
                        'used_by': [5]}},
                'devices': ['cpu' if DEBUG else 'cuda:4']},
            5: {
                'stage_cls': Partition5,
                'inputs': {
                    'T5ForConditionalGeneration/T5Stack[encoder]/T5Block[0]_5_0': {
                        'shape': torch.Size([32, 64, 1024]),
                        'dtype': torch.float32,
                        'req_grad': True,
                        'is_batched': True,
                        'created_by': 4},
                    'T5ForConditionalGeneration/T5Stack[encoder]/T5Block[0]_5_1': {
                        'shape': torch.Size([32, 32, 64, 64]),
                        'dtype': torch.float32,
                        'req_grad': True,
                        'is_batched': True,
                        'created_by': 4}},
                'outputs': {
                    'T5ForConditionalGeneration/T5Stack[encoder]/T5Block[0]_6_0': {
                        'shape': torch.Size([32, 64, 1024]),
                        'dtype': torch.float32,
                        'req_grad': True,
                        'is_batched': True,
                        'used_by': [6]},
                    'T5ForConditionalGeneration/T5Stack[encoder]/T5Block[0]_6_1': {
                        'shape': torch.Size([32, 32, 64, 64]),
                        'dtype': torch.float32,
                        'req_grad': True,
                        'is_batched': True,
                        'used_by': [6]},
                    'T5ForConditionalGeneration/T5Stack[encoder]/tuple::__getitem___20': {
                        'shape': torch.Size([32, 64, 1024]),
                        'dtype': torch.float32,
                        'req_grad': True,
                        'is_batched': True,
                        'used_by': [7]}},
                'devices': ['cpu' if DEBUG else 'cuda:5']},
            6: {
                'stage_cls': Partition6,
                'inputs': {
                    'T5ForConditionalGeneration/T5Stack[encoder]/T5Block[0]_6_0': {
                        'shape': torch.Size([32, 64, 1024]),
                        'dtype': torch.float32,
                        'req_grad': True,
                        'is_batched': True,
                        'created_by': 5},
                    'T5ForConditionalGeneration/T5Stack[encoder]/T5Block[0]_6_1': {
                        'shape': torch.Size([32, 32, 64, 64]),
                        'dtype': torch.float32,
                        'req_grad': True,
                        'is_batched': True,
                        'created_by': 5}},
                'outputs': {
                    'T5ForConditionalGeneration/T5Stack[encoder]/tuple::__getitem___22_7': {
                        'shape': torch.Size([32, 32, 64, 64]),
                        'dtype': torch.float32,
                        'req_grad': True,
                        'is_batched': True,
                        'used_by': [7]}},
                'devices': ['cpu' if DEBUG else 'cuda:6']},
            7: {
                'stage_cls': Partition7,
                'inputs': {
                    'attention_mask': {
                        'shape': torch.Size([32, 1, 1, 64]),
                        'dtype': torch.float32,
                        'req_grad': False,
                        'is_batched': True,
                        'created_by': -1},
                    'T5ForConditionalGeneration/T5Stack[encoder]/tuple::__getitem___20': {
                        'shape': torch.Size([32, 64, 1024]),
                        'dtype': torch.float32,
                        'req_grad': True,
                        'is_batched': True,
                        'created_by': 5},
                    'T5ForConditionalGeneration/T5Stack[encoder]/tuple::__getitem___22_7': {
                        'shape': torch.Size([32, 32, 64, 64]),
                        'dtype': torch.float32,
                        'req_grad': True,
                        'is_batched': True,
                        'created_by': 6}},
                'outputs': {
                    'T5ForConditionalGeneration/T5Stack[encoder]/tuple::__getitem___22_8': {
                        'shape': torch.Size([32, 32, 64, 64]),
                        'dtype': torch.float32,
                        'req_grad': True,
                        'is_batched': True,
                        'used_by': [8]},
                    'T5ForConditionalGeneration/T5Stack[encoder]/T5Block[2]': {
                        'shape': torch.Size([32, 64, 1024]),
                        'dtype': torch.float32,
                        'req_grad': True,
                        'is_batched': True,
                        'used_by': [8]}},
                'devices': ['cpu' if DEBUG else 'cuda:7']},
            8: {
                'stage_cls': Partition8,
                'inputs': {
                    'attention_mask': {
                        'shape': torch.Size([32, 1, 1, 64]),
                        'dtype': torch.float32,
                        'req_grad': False,
                        'is_batched': True,
                        'created_by': -1},
                    'T5ForConditionalGeneration/T5Stack[encoder]/tuple::__getitem___22_8': {
                        'shape': torch.Size([32, 32, 64, 64]),
                        'dtype': torch.float32,
                        'req_grad': True,
                        'is_batched': True,
                        'created_by': 7},
                    'T5ForConditionalGeneration/T5Stack[encoder]/T5Block[2]': {
                        'shape': torch.Size([32, 64, 1024]),
                        'dtype': torch.float32,
                        'req_grad': True,
                        'is_batched': True,
                        'created_by': 7}},
                'outputs': {
                    'T5ForConditionalGeneration/T5Stack[encoder]/tuple::__getitem___22_9': {
                        'shape': torch.Size([32, 32, 64, 64]),
                        'dtype': torch.float32,
                        'req_grad': True,
                        'is_batched': True,
                        'used_by': [9]},
                    'T5ForConditionalGeneration/T5Stack[encoder]/T5Block[5]': {
                        'shape': torch.Size([32, 64, 1024]),
                        'dtype': torch.float32,
                        'req_grad': True,
                        'is_batched': True,
                        'used_by': [9]}},
                'devices': ['cpu' if DEBUG else 'cuda:8']},
            9: {
                'stage_cls': Partition9,
                'inputs': {
                    'attention_mask': {
                        'shape': torch.Size([32, 1, 1, 64]),
                        'dtype': torch.float32,
                        'req_grad': False,
                        'is_batched': True,
                        'created_by': -1},
                    'T5ForConditionalGeneration/T5Stack[encoder]/tuple::__getitem___22_9': {
                        'shape': torch.Size([32, 32, 64, 64]),
                        'dtype': torch.float32,
                        'req_grad': True,
                        'is_batched': True,
                        'created_by': 8},
                    'T5ForConditionalGeneration/T5Stack[encoder]/T5Block[5]': {
                        'shape': torch.Size([32, 64, 1024]),
                        'dtype': torch.float32,
                        'req_grad': True,
                        'is_batched': True,
                        'created_by': 8}},
                'outputs': {
                    'T5ForConditionalGeneration/T5Stack[encoder]/tuple::__getitem___22_10': {
                        'shape': torch.Size([32, 32, 64, 64]),
                        'dtype': torch.float32,
                        'req_grad': True,
                        'is_batched': True,
                        'used_by': [10]},
                    'T5ForConditionalGeneration/T5Stack[encoder]/T5Block[8]': {
                        'shape': torch.Size([32, 64, 1024]),
                        'dtype': torch.float32,
                        'req_grad': True,
                        'is_batched': True,
                        'used_by': [10]}},
                'devices': ['cpu' if DEBUG else 'cuda:9']},
            10: {
                'stage_cls': Partition10,
                'inputs': {
                    'attention_mask': {
                        'shape': torch.Size([32, 1, 1, 64]),
                        'dtype': torch.float32,
                        'req_grad': False,
                        'is_batched': True,
                        'created_by': -1},
                    'T5ForConditionalGeneration/T5Stack[encoder]/tuple::__getitem___22_10': {
                        'shape': torch.Size([32, 32, 64, 64]),
                        'dtype': torch.float32,
                        'req_grad': True,
                        'is_batched': True,
                        'created_by': 9},
                    'T5ForConditionalGeneration/T5Stack[encoder]/T5Block[8]': {
                        'shape': torch.Size([32, 64, 1024]),
                        'dtype': torch.float32,
                        'req_grad': True,
                        'is_batched': True,
                        'created_by': 9}},
                'outputs': {
                    'T5ForConditionalGeneration/T5Stack[encoder]/tuple::__getitem___22_11': {
                        'shape': torch.Size([32, 32, 64, 64]),
                        'dtype': torch.float32,
                        'req_grad': True,
                        'is_batched': True,
                        'used_by': [11]},
                    'T5ForConditionalGeneration/T5Stack[encoder]/T5Block[11]': {
                        'shape': torch.Size([32, 64, 1024]),
                        'dtype': torch.float32,
                        'req_grad': True,
                        'is_batched': True,
                        'used_by': [11]}},
                'devices': ['cpu' if DEBUG else 'cuda:10']},
            11: {
                'stage_cls': Partition11,
                'inputs': {
                    'attention_mask': {
                        'shape': torch.Size([32, 1, 1, 64]),
                        'dtype': torch.float32,
                        'req_grad': False,
                        'is_batched': True,
                        'created_by': -1},
                    'T5ForConditionalGeneration/T5Stack[encoder]/tuple::__getitem___22_11': {
                        'shape': torch.Size([32, 32, 64, 64]),
                        'dtype': torch.float32,
                        'req_grad': True,
                        'is_batched': True,
                        'created_by': 10},
                    'T5ForConditionalGeneration/T5Stack[encoder]/T5Block[11]': {
                        'shape': torch.Size([32, 64, 1024]),
                        'dtype': torch.float32,
                        'req_grad': True,
                        'is_batched': True,
                        'created_by': 10}},
                'outputs': {
                    'T5ForConditionalGeneration/T5Stack[encoder]/tuple::__getitem___22_12': {
                        'shape': torch.Size([32, 32, 64, 64]),
                        'dtype': torch.float32,
                        'req_grad': True,
                        'is_batched': True,
                        'used_by': [12]},
                    'T5ForConditionalGeneration/T5Stack[encoder]/T5Block[14]': {
                        'shape': torch.Size([32, 64, 1024]),
                        'dtype': torch.float32,
                        'req_grad': True,
                        'is_batched': True,
                        'used_by': [12]}},
                'devices': ['cpu' if DEBUG else 'cuda:11']},
            12: {
                'stage_cls': Partition12,
                'inputs': {
                    'attention_mask': {
                        'shape': torch.Size([32, 1, 1, 64]),
                        'dtype': torch.float32,
                        'req_grad': False,
                        'is_batched': True,
                        'created_by': -1},
                    'T5ForConditionalGeneration/T5Stack[encoder]/tuple::__getitem___22_12': {
                        'shape': torch.Size([32, 32, 64, 64]),
                        'dtype': torch.float32,
                        'req_grad': True,
                        'is_batched': True,
                        'created_by': 11},
                    'T5ForConditionalGeneration/T5Stack[encoder]/T5Block[14]': {
                        'shape': torch.Size([32, 64, 1024]),
                        'dtype': torch.float32,
                        'req_grad': True,
                        'is_batched': True,
                        'created_by': 11}},
                'outputs': {
                    'T5ForConditionalGeneration/T5Stack[encoder]/tuple::__getitem___22_13': {
                        'shape': torch.Size([32, 32, 64, 64]),
                        'dtype': torch.float32,
                        'req_grad': True,
                        'is_batched': True,
                        'used_by': [13]},
                    'T5ForConditionalGeneration/T5Stack[encoder]/T5Block[17]': {
                        'shape': torch.Size([32, 64, 1024]),
                        'dtype': torch.float32,
                        'req_grad': True,
                        'is_batched': True,
                        'used_by': [13]}},
                'devices': ['cpu' if DEBUG else 'cuda:12']},
            13: {
                'stage_cls': Partition13,
                'inputs': {
                    'attention_mask': {
                        'shape': torch.Size([32, 1, 1, 64]),
                        'dtype': torch.float32,
                        'req_grad': False,
                        'is_batched': True,
                        'created_by': -1},
                    'T5ForConditionalGeneration/T5Stack[encoder]/tuple::__getitem___22_13': {
                        'shape': torch.Size([32, 32, 64, 64]),
                        'dtype': torch.float32,
                        'req_grad': True,
                        'is_batched': True,
                        'created_by': 12},
                    'T5ForConditionalGeneration/T5Stack[encoder]/T5Block[17]': {
                        'shape': torch.Size([32, 64, 1024]),
                        'dtype': torch.float32,
                        'req_grad': True,
                        'is_batched': True,
                        'created_by': 12}},
                'outputs': {
                    'T5ForConditionalGeneration/T5Stack[encoder]/tuple::__getitem___22_14': {
                        'shape': torch.Size([32, 32, 64, 64]),
                        'dtype': torch.float32,
                        'req_grad': True,
                        'is_batched': True,
                        'used_by': [14]},
                    'T5ForConditionalGeneration/T5Stack[encoder]/T5Block[20]': {
                        'shape': torch.Size([32, 64, 1024]),
                        'dtype': torch.float32,
                        'req_grad': True,
                        'is_batched': True,
                        'used_by': [14]}},
                'devices': ['cpu' if DEBUG else 'cuda:13']},
            14: {
                'stage_cls': Partition14,
                'inputs': {
                    'attention_mask': {
                        'shape': torch.Size([32, 1, 1, 64]),
                        'dtype': torch.float32,
                        'req_grad': False,
                        'is_batched': True,
                        'created_by': -1},
                    'T5ForConditionalGeneration/T5Stack[encoder]/tuple::__getitem___22_14': {
                        'shape': torch.Size([32, 32, 64, 64]),
                        'dtype': torch.float32,
                        'req_grad': True,
                        'is_batched': True,
                        'created_by': 13},
                    'T5ForConditionalGeneration/T5Stack[encoder]/T5Block[20]': {
                        'shape': torch.Size([32, 64, 1024]),
                        'dtype': torch.float32,
                        'req_grad': True,
                        'is_batched': True,
                        'created_by': 13}},
                'outputs': {
                    'T5ForConditionalGeneration/T5Stack[encoder]/T5LayerNorm[final_layer_norm]': {
                        'shape': torch.Size([32, 64, 1024]),
                        'dtype': torch.float32,
                        'req_grad': True,
                        'is_batched': True,
                        'used_by': [15]}},
                'devices': ['cpu' if DEBUG else 'cuda:14']},
            15: {
                'stage_cls': Partition15,
                'inputs': {
                    'decoder_attention_mask': {
                        'shape': torch.Size([32, 1, 4, 4]),
                        'dtype': torch.float32,
                        'req_grad': False,
                        'is_batched': True,
                        'created_by': -1},
                    'decoder_input_ids': {
                        'shape': torch.Size([32, 4]),
                        'dtype': torch.int64,
                        'req_grad': False,
                        'is_batched': True,
                        'created_by': -1},
                    'T5ForConditionalGeneration/T5Stack[decoder]/Tensor::size_117': {
                        'shape': torch.Size([2]),
                        'dtype': torch.Size,
                        'req_grad': False,
                        'is_batched': False,
                        'created_by': 1},
                    'inverted_encoder_attention_mask': {
                        'shape': torch.Size([32, 1, 1, 64]),
                        'dtype': torch.float32,
                        'req_grad': False,
                        'is_batched': True,
                        'created_by': -1},
                    'T5ForConditionalGeneration/Parameter[shared_embed_weight]_15': {
                        'shape': torch.Size([32128, 1024]),
                        'dtype': torch.float32,
                        'req_grad': True,
                        'is_batched': False,
                        'created_by': 3},
                    'T5ForConditionalGeneration/T5Stack[encoder]/T5LayerNorm[final_layer_norm]': {
                        'shape': torch.Size([32, 64, 1024]),
                        'dtype': torch.float32,
                        'req_grad': True,
                        'is_batched': True,
                        'created_by': 14}},
                'outputs': {
                    'T5ForConditionalGeneration/T5Stack[encoder]/Dropout[dropout]_16': {
                        'shape': torch.Size([32, 64, 1024]),
                        'dtype': torch.float32,
                        'req_grad': True,
                        'is_batched': True,
                        'used_by': [16]},
                    'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[0]_0': {
                        'shape': torch.Size([32, 4, 1024]),
                        'dtype': torch.float32,
                        'req_grad': True,
                        'is_batched': True,
                        'used_by': [16]},
                    'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[0]_1': {
                        'shape': torch.Size([32, 32, 4, 4]),
                        'dtype': torch.float32,
                        'req_grad': True,
                        'is_batched': True,
                        'used_by': [16]},
                    'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[0]_2': {
                        'shape': torch.Size([32, 32, 4, 64]),
                        'dtype': torch.float32,
                        'req_grad': True,
                        'is_batched': True,
                        'used_by': [16]},
                    'T5ForConditionalGeneration/T5Stack[decoder]/tuple::__getitem___128': {
                        'shape': torch.Size([32, 4, 1024]),
                        'dtype': torch.float32,
                        'req_grad': True,
                        'is_batched': True,
                        'used_by': [16]}},
                'devices': ['cpu' if DEBUG else 'cuda:15']},
            16: {
                'stage_cls': Partition16,
                'inputs': {
                    'decoder_attention_mask': {
                        'shape': torch.Size([32, 1, 4, 4]),
                        'dtype': torch.float32,
                        'req_grad': False,
                        'is_batched': True,
                        'created_by': -1},
                    'inverted_encoder_attention_mask': {
                        'shape': torch.Size([32, 1, 1, 64]),
                        'dtype': torch.float32,
                        'req_grad': False,
                        'is_batched': True,
                        'created_by': -1},
                    'T5ForConditionalGeneration/T5Stack[encoder]/Dropout[dropout]_16': {
                        'shape': torch.Size([32, 64, 1024]),
                        'dtype': torch.float32,
                        'req_grad': True,
                        'is_batched': True,
                        'created_by': 15},
                    'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[0]_0': {
                        'shape': torch.Size([32, 4, 1024]),
                        'dtype': torch.float32,
                        'req_grad': True,
                        'is_batched': True,
                        'created_by': 15},
                    'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[0]_1': {
                        'shape': torch.Size([32, 32, 4, 4]),
                        'dtype': torch.float32,
                        'req_grad': True,
                        'is_batched': True,
                        'created_by': 15},
                    'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[0]_2': {
                        'shape': torch.Size([32, 32, 4, 64]),
                        'dtype': torch.float32,
                        'req_grad': True,
                        'is_batched': True,
                        'created_by': 15},
                    'T5ForConditionalGeneration/T5Stack[decoder]/tuple::__getitem___128': {
                        'shape': torch.Size([32, 4, 1024]),
                        'dtype': torch.float32,
                        'req_grad': True,
                        'is_batched': True,
                        'created_by': 15}},
                'outputs': {
                    'T5ForConditionalGeneration/T5Stack[encoder]/Dropout[dropout]_17': {
                        'shape': torch.Size([32, 64, 1024]),
                        'dtype': torch.float32,
                        'req_grad': True,
                        'is_batched': True,
                        'used_by': [17]},
                    'T5ForConditionalGeneration/T5Stack[decoder]/tuple::__getitem___130_17': {
                        'shape': torch.Size([32, 32, 4, 4]),
                        'dtype': torch.float32,
                        'req_grad': True,
                        'is_batched': True,
                        'used_by': [17]},
                    'T5ForConditionalGeneration/T5Stack[decoder]/tuple::__getitem___132_17': {
                        'shape': torch.Size([32, 32, 4, 64]),
                        'dtype': torch.float32,
                        'req_grad': True,
                        'is_batched': True,
                        'used_by': [17]},
                    'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[3]': {
                        'shape': torch.Size([32, 4, 1024]),
                        'dtype': torch.float32,
                        'req_grad': True,
                        'is_batched': True,
                        'used_by': [17]}},
                'devices': ['cpu' if DEBUG else 'cuda:16']},
            17: {
                'stage_cls': Partition17,
                'inputs': {
                    'decoder_attention_mask': {
                        'shape': torch.Size([32, 1, 4, 4]),
                        'dtype': torch.float32,
                        'req_grad': False,
                        'is_batched': True,
                        'created_by': -1},
                    'inverted_encoder_attention_mask': {
                        'shape': torch.Size([32, 1, 1, 64]),
                        'dtype': torch.float32,
                        'req_grad': False,
                        'is_batched': True,
                        'created_by': -1},
                    'T5ForConditionalGeneration/T5Stack[encoder]/Dropout[dropout]_17': {
                        'shape': torch.Size([32, 64, 1024]),
                        'dtype': torch.float32,
                        'req_grad': True,
                        'is_batched': True,
                        'created_by': 16},
                    'T5ForConditionalGeneration/T5Stack[decoder]/tuple::__getitem___130_17': {
                        'shape': torch.Size([32, 32, 4, 4]),
                        'dtype': torch.float32,
                        'req_grad': True,
                        'is_batched': True,
                        'created_by': 16},
                    'T5ForConditionalGeneration/T5Stack[decoder]/tuple::__getitem___132_17': {
                        'shape': torch.Size([32, 32, 4, 64]),
                        'dtype': torch.float32,
                        'req_grad': True,
                        'is_batched': True,
                        'created_by': 16},
                    'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[3]': {
                        'shape': torch.Size([32, 4, 1024]),
                        'dtype': torch.float32,
                        'req_grad': True,
                        'is_batched': True,
                        'created_by': 16}},
                'outputs': {
                    'T5ForConditionalGeneration/T5Stack[encoder]/Dropout[dropout]_18': {
                        'shape': torch.Size([32, 64, 1024]),
                        'dtype': torch.float32,
                        'req_grad': True,
                        'is_batched': True,
                        'used_by': [18]},
                    'T5ForConditionalGeneration/T5Stack[decoder]/tuple::__getitem___130_18': {
                        'shape': torch.Size([32, 32, 4, 4]),
                        'dtype': torch.float32,
                        'req_grad': True,
                        'is_batched': True,
                        'used_by': [18]},
                    'T5ForConditionalGeneration/T5Stack[decoder]/tuple::__getitem___132_18': {
                        'shape': torch.Size([32, 32, 4, 64]),
                        'dtype': torch.float32,
                        'req_grad': True,
                        'is_batched': True,
                        'used_by': [18]},
                    'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[8]': {
                        'shape': torch.Size([32, 4, 1024]),
                        'dtype': torch.float32,
                        'req_grad': True,
                        'is_batched': True,
                        'used_by': [18]}},
                'devices': ['cpu' if DEBUG else 'cuda:17']},
            18: {
                'stage_cls': Partition18,
                'inputs': {
                    'decoder_attention_mask': {
                        'shape': torch.Size([32, 1, 4, 4]),
                        'dtype': torch.float32,
                        'req_grad': False,
                        'is_batched': True,
                        'created_by': -1},
                    'inverted_encoder_attention_mask': {
                        'shape': torch.Size([32, 1, 1, 64]),
                        'dtype': torch.float32,
                        'req_grad': False,
                        'is_batched': True,
                        'created_by': -1},
                    'T5ForConditionalGeneration/T5Stack[encoder]/Dropout[dropout]_18': {
                        'shape': torch.Size([32, 64, 1024]),
                        'dtype': torch.float32,
                        'req_grad': True,
                        'is_batched': True,
                        'created_by': 17},
                    'T5ForConditionalGeneration/T5Stack[decoder]/tuple::__getitem___130_18': {
                        'shape': torch.Size([32, 32, 4, 4]),
                        'dtype': torch.float32,
                        'req_grad': True,
                        'is_batched': True,
                        'created_by': 17},
                    'T5ForConditionalGeneration/T5Stack[decoder]/tuple::__getitem___132_18': {
                        'shape': torch.Size([32, 32, 4, 64]),
                        'dtype': torch.float32,
                        'req_grad': True,
                        'is_batched': True,
                        'created_by': 17},
                    'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[8]': {
                        'shape': torch.Size([32, 4, 1024]),
                        'dtype': torch.float32,
                        'req_grad': True,
                        'is_batched': True,
                        'created_by': 17}},
                'outputs': {
                    'T5ForConditionalGeneration/T5Stack[encoder]/Dropout[dropout]_19': {
                        'shape': torch.Size([32, 64, 1024]),
                        'dtype': torch.float32,
                        'req_grad': True,
                        'is_batched': True,
                        'used_by': [19]},
                    'T5ForConditionalGeneration/T5Stack[decoder]/tuple::__getitem___130_19': {
                        'shape': torch.Size([32, 32, 4, 4]),
                        'dtype': torch.float32,
                        'req_grad': True,
                        'is_batched': True,
                        'used_by': [19]},
                    'T5ForConditionalGeneration/T5Stack[decoder]/tuple::__getitem___132_19': {
                        'shape': torch.Size([32, 32, 4, 64]),
                        'dtype': torch.float32,
                        'req_grad': True,
                        'is_batched': True,
                        'used_by': [19]},
                    'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[13]': {
                        'shape': torch.Size([32, 4, 1024]),
                        'dtype': torch.float32,
                        'req_grad': True,
                        'is_batched': True,
                        'used_by': [19]}},
                'devices': ['cpu' if DEBUG else 'cuda:18']},
            19: {
                'stage_cls': Partition19,
                'inputs': {
                    'decoder_attention_mask': {
                        'shape': torch.Size([32, 1, 4, 4]),
                        'dtype': torch.float32,
                        'req_grad': False,
                        'is_batched': True,
                        'created_by': -1},
                    'inverted_encoder_attention_mask': {
                        'shape': torch.Size([32, 1, 1, 64]),
                        'dtype': torch.float32,
                        'req_grad': False,
                        'is_batched': True,
                        'created_by': -1},
                    'T5ForConditionalGeneration/T5Stack[encoder]/Dropout[dropout]_19': {
                        'shape': torch.Size([32, 64, 1024]),
                        'dtype': torch.float32,
                        'req_grad': True,
                        'is_batched': True,
                        'created_by': 18},
                    'T5ForConditionalGeneration/T5Stack[decoder]/tuple::__getitem___130_19': {
                        'shape': torch.Size([32, 32, 4, 4]),
                        'dtype': torch.float32,
                        'req_grad': True,
                        'is_batched': True,
                        'created_by': 18},
                    'T5ForConditionalGeneration/T5Stack[decoder]/tuple::__getitem___132_19': {
                        'shape': torch.Size([32, 32, 4, 64]),
                        'dtype': torch.float32,
                        'req_grad': True,
                        'is_batched': True,
                        'created_by': 18},
                    'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[13]': {
                        'shape': torch.Size([32, 4, 1024]),
                        'dtype': torch.float32,
                        'req_grad': True,
                        'is_batched': True,
                        'created_by': 18}},
                'outputs': {
                    'T5ForConditionalGeneration/T5Stack[encoder]/Dropout[dropout]_20': {
                        'shape': torch.Size([32, 64, 1024]),
                        'dtype': torch.float32,
                        'req_grad': True,
                        'is_batched': True,
                        'used_by': [20]},
                    'T5ForConditionalGeneration/T5Stack[decoder]/tuple::__getitem___130_20': {
                        'shape': torch.Size([32, 32, 4, 4]),
                        'dtype': torch.float32,
                        'req_grad': True,
                        'is_batched': True,
                        'used_by': [20]},
                    'T5ForConditionalGeneration/T5Stack[decoder]/tuple::__getitem___132_20': {
                        'shape': torch.Size([32, 32, 4, 64]),
                        'dtype': torch.float32,
                        'req_grad': True,
                        'is_batched': True,
                        'used_by': [20]},
                    'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[18]': {
                        'shape': torch.Size([32, 4, 1024]),
                        'dtype': torch.float32,
                        'req_grad': True,
                        'is_batched': True,
                        'used_by': [20]}},
                'devices': ['cpu' if DEBUG else 'cuda:19']},
            20: {
                'stage_cls': Partition20,
                'inputs': {
                    'decoder_attention_mask': {
                        'shape': torch.Size([32, 1, 4, 4]),
                        'dtype': torch.float32,
                        'req_grad': False,
                        'is_batched': True,
                        'created_by': -1},
                    'inverted_encoder_attention_mask': {
                        'shape': torch.Size([32, 1, 1, 64]),
                        'dtype': torch.float32,
                        'req_grad': False,
                        'is_batched': True,
                        'created_by': -1},
                    'T5ForConditionalGeneration/T5Stack[encoder]/Dropout[dropout]_20': {
                        'shape': torch.Size([32, 64, 1024]),
                        'dtype': torch.float32,
                        'req_grad': True,
                        'is_batched': True,
                        'created_by': 19},
                    'T5ForConditionalGeneration/T5Stack[decoder]/tuple::__getitem___130_20': {
                        'shape': torch.Size([32, 32, 4, 4]),
                        'dtype': torch.float32,
                        'req_grad': True,
                        'is_batched': True,
                        'created_by': 19},
                    'T5ForConditionalGeneration/T5Stack[decoder]/tuple::__getitem___132_20': {
                        'shape': torch.Size([32, 32, 4, 64]),
                        'dtype': torch.float32,
                        'req_grad': True,
                        'is_batched': True,
                        'created_by': 19},
                    'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[18]': {
                        'shape': torch.Size([32, 4, 1024]),
                        'dtype': torch.float32,
                        'req_grad': True,
                        'is_batched': True,
                        'created_by': 19}},
                'outputs': {
                    'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[23]': {
                        'shape': torch.Size([32, 4, 1024]),
                        'dtype': torch.float32,
                        'req_grad': True,
                        'is_batched': True,
                        'used_by': [21]}},
                'devices': ['cpu' if DEBUG else 'cuda:20']},
            21: {
                'stage_cls': Partition21,
                'inputs': {
                    'lm_labels': {
                        'shape': torch.Size([32, 4]),
                        'dtype': torch.int64,
                        'req_grad': False,
                        'is_batched': True,
                        'created_by': -1},
                    'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[23]': {
                        'shape': torch.Size([32, 4, 1024]),
                        'dtype': torch.float32,
                        'req_grad': True,
                        'is_batched': True,
                        'created_by': 20}},
                'outputs': {
                    'T5ForConditionalGeneration/CrossEntropyLoss[lm_loss]': {
                        'shape': torch.Size([1]),
                        'dtype': torch.float32,
                        'req_grad': True,
                        'is_batched': False,
                        'used_by': [-1]}},
                'devices': ['cpu' if DEBUG else 'cuda:21']}}}
    
    
    # switching batch size
    batch_dim = config['batch_dim']
    for d in chain(config['model_inputs'].values(),config['model_outputs'].values()):
        if d['is_batched']:
            shape = d['shape']
            d['shape'] = torch.Size(shape[:batch_dim] + (batch_size,) + shape[batch_dim+1:])
    
    for s in config['stages'].values():
        for d in chain(s['inputs'].values(),s['outputs'].values()):
            if d['is_batched']:
                shape = d['shape']
                d['shape'] = torch.Size(shape[:batch_dim] + (batch_size,) + shape[batch_dim+1:])
    
    return config

class Partition0(nn.Module):
    LAYER_SCOPES=[
        ]
    TENSORS=[
            'T5ForConditionalGeneration/Parameter[shared_embed_weight]',
        ]
    def __init__(self, layers, tensors, device='cuda:0'):
        super().__init__()

        #initialize partition layers
        for idx,layer_scope in enumerate(self.LAYER_SCOPES):
            self.add_module(f'l_{idx}',layers[layer_scope])

        #initialize partition tensors
        b=p=0
        for tensor_scope in self.TENSORS:
            tensor=tensors[tensor_scope]
            if isinstance(tensor,nn.Parameter):
                self.register_parameter(f'p_{p}',tensor)
                p+=1
            else:
                self.register_buffer(f'b_{b}',tensor)
                b+=1

        self.device = torch.device(device)
        self.input_structure = []
        self.lookup = { 'p_0': 'shared_embed_weight'}
        self.to(self.device)

    def forward(self, *args):
        # T5ForConditionalGeneration/Parameter[shared_embed_weight] <=> self.p_0

        # returning:
        # T5ForConditionalGeneration/Parameter[shared_embed_weight]
        return (self.p_0,)

    def state_dict(self,*args,**kwargs):
        # we return the state dict of this part as it should be in the original model
        return state_dict(self,*args,**kwargs)

    def load_state_dict(self, state):
        return load_state_dict(self,state)

    def named_parameters(self,recurse=True):
        # we return the named parameters of this part as it should be in the original model
        return named_parameters(self,recurse=recurse)

    def named_buffers(self,recurse=True):
        # we return the named buffers of this part as it should be in the original model
        return named_buffers(self,recurse=recurse)

    def cpu(self):
        return cpu(self)

    def cuda(self,device=None):
        return cuda(self,device=device)

    def to(self, *args, **kwargs):
        return to(self,*args,**kwargs)


class Partition1(nn.Module):
    LAYER_SCOPES=[
        ]
    TENSORS=[
        ]
    def __init__(self, layers, tensors, device='cuda:1'):
        super().__init__()

        #initialize partition layers
        for idx,layer_scope in enumerate(self.LAYER_SCOPES):
            self.add_module(f'l_{idx}',layers[layer_scope])

        #initialize partition tensors
        b=p=0
        for tensor_scope in self.TENSORS:
            tensor=tensors[tensor_scope]
            if isinstance(tensor,nn.Parameter):
                self.register_parameter(f'p_{p}',tensor)
                p+=1
            else:
                self.register_buffer(f'b_{b}',tensor)
                b+=1

        self.device = torch.device(device)
        self.input_structure = [1]
        self.lookup = { }
        self.to(self.device)

    def forward(self, *args):
        # input2 <=> decoder_input_ids
        decoder_input_ids = unflatten(args,self.input_structure)[0]
        t_0 = decoder_input_ids.size()
        # returning:
        # T5ForConditionalGeneration/T5Stack[decoder]/Tensor::size_117
        return (t_0,)

    def state_dict(self,*args,**kwargs):
        # we return the state dict of this part as it should be in the original model
        return state_dict(self,*args,**kwargs)

    def load_state_dict(self, state):
        return load_state_dict(self,state)

    def named_parameters(self,recurse=True):
        # we return the named parameters of this part as it should be in the original model
        return named_parameters(self,recurse=recurse)

    def named_buffers(self,recurse=True):
        # we return the named buffers of this part as it should be in the original model
        return named_buffers(self,recurse=recurse)

    def cpu(self):
        return cpu(self)

    def cuda(self,device=None):
        return cuda(self,device=device)

    def to(self, *args, **kwargs):
        return to(self,*args,**kwargs)


class Partition2(nn.Module):
    LAYER_SCOPES=[
        ]
    TENSORS=[
        ]
    def __init__(self, layers, tensors, device='cuda:2'):
        super().__init__()

        #initialize partition layers
        for idx,layer_scope in enumerate(self.LAYER_SCOPES):
            self.add_module(f'l_{idx}',layers[layer_scope])

        #initialize partition tensors
        b=p=0
        for tensor_scope in self.TENSORS:
            tensor=tensors[tensor_scope]
            if isinstance(tensor,nn.Parameter):
                self.register_parameter(f'p_{p}',tensor)
                p+=1
            else:
                self.register_buffer(f'b_{b}',tensor)
                b+=1

        self.device = torch.device(device)
        self.input_structure = [1]
        self.lookup = { }
        self.to(self.device)

    def forward(self, *args):
        # input3 <=> input_ids
        input_ids = unflatten(args,self.input_structure)[0]
        t_0 = input_ids.size()
        # returning:
        # T5ForConditionalGeneration/T5Stack[encoder]/Tensor::size_7
        return (t_0,)

    def state_dict(self,*args,**kwargs):
        # we return the state dict of this part as it should be in the original model
        return state_dict(self,*args,**kwargs)

    def load_state_dict(self, state):
        return load_state_dict(self,state)

    def named_parameters(self,recurse=True):
        # we return the named parameters of this part as it should be in the original model
        return named_parameters(self,recurse=recurse)

    def named_buffers(self,recurse=True):
        # we return the named buffers of this part as it should be in the original model
        return named_buffers(self,recurse=recurse)

    def cpu(self):
        return cpu(self)

    def cuda(self,device=None):
        return cuda(self,device=device)

    def to(self, *args, **kwargs):
        return to(self,*args,**kwargs)


class Partition3(nn.Module):
    LAYER_SCOPES=[
            'T5ForConditionalGeneration/T5Stack[encoder]/StatelessEmbedding[embed_tokens]',
            'T5ForConditionalGeneration/T5Stack[encoder]/Dropout[dropout]',
        ]
    TENSORS=[
        ]
    def __init__(self, layers, tensors, device='cuda:3'):
        super().__init__()

        #initialize partition layers
        for idx,layer_scope in enumerate(self.LAYER_SCOPES):
            self.add_module(f'l_{idx}',layers[layer_scope])

        #initialize partition tensors
        b=p=0
        for tensor_scope in self.TENSORS:
            tensor=tensors[tensor_scope]
            if isinstance(tensor,nn.Parameter):
                self.register_parameter(f'p_{p}',tensor)
                p+=1
            else:
                self.register_buffer(f'b_{b}',tensor)
                b+=1

        self.device = torch.device(device)
        self.input_structure = [1, 1, 1]
        self.lookup = { 'l_0': 'encoder.embed_tokens',
                        'l_1': 'encoder.dropout'}
        self.to(self.device)

    def forward(self, *args):
        # T5ForConditionalGeneration/T5Stack[encoder]/StatelessEmbedding[embed_tokens] <=> self.l_0
        # T5ForConditionalGeneration/T5Stack[encoder]/Dropout[dropout] <=> self.l_1
        # input3 <=> input_ids
        # T5ForConditionalGeneration/T5Stack[encoder]/Tensor::size_7 <=> x0
        # T5ForConditionalGeneration/Parameter[shared_embed_weight] <=> x1
        input_ids, x0, x1 = unflatten(args,self.input_structure)
        t_0 = x0[-1]
        t_0 = input_ids.view(-1, t_0)
        t_0 = self.l_0(x1, t_0)
        t_0 = self.l_1(t_0)
        # returning:
        # T5ForConditionalGeneration/Parameter[shared_embed_weight]
        # T5ForConditionalGeneration/T5Stack[encoder]/Dropout[dropout]
        return list(flatten((x1, t_0)))

    def state_dict(self,*args,**kwargs):
        # we return the state dict of this part as it should be in the original model
        return state_dict(self,*args,**kwargs)

    def load_state_dict(self, state):
        return load_state_dict(self,state)

    def named_parameters(self,recurse=True):
        # we return the named parameters of this part as it should be in the original model
        return named_parameters(self,recurse=recurse)

    def named_buffers(self,recurse=True):
        # we return the named buffers of this part as it should be in the original model
        return named_buffers(self,recurse=recurse)

    def cpu(self):
        return cpu(self)

    def cuda(self,device=None):
        return cuda(self,device=device)

    def to(self, *args, **kwargs):
        return to(self,*args,**kwargs)


class Partition4(nn.Module):
    LAYER_SCOPES=[
            'T5ForConditionalGeneration/T5Stack[encoder]/T5Block[0]',
        ]
    TENSORS=[
        ]
    def __init__(self, layers, tensors, device='cuda:4'):
        super().__init__()

        #initialize partition layers
        for idx,layer_scope in enumerate(self.LAYER_SCOPES):
            self.add_module(f'l_{idx}',layers[layer_scope])

        #initialize partition tensors
        b=p=0
        for tensor_scope in self.TENSORS:
            tensor=tensors[tensor_scope]
            if isinstance(tensor,nn.Parameter):
                self.register_parameter(f'p_{p}',tensor)
                p+=1
            else:
                self.register_buffer(f'b_{b}',tensor)
                b+=1

        self.device = torch.device(device)
        self.input_structure = [1, 1]
        self.lookup = { 'l_0': 'encoder.0'}
        self.to(self.device)

    def forward(self, *args):
        # T5ForConditionalGeneration/T5Stack[encoder]/T5Block[0] <=> self.l_0
        # input0 <=> attention_mask
        # T5ForConditionalGeneration/T5Stack[encoder]/Dropout[dropout] <=> x0
        attention_mask, x0 = unflatten(args,self.input_structure)
        t_0 = self.l_0(x0, attention_mask=attention_mask, position_bias=None, encoder_hidden_states=None, encoder_attention_mask=None, encoder_decoder_position_bias=None)
        # returning:
        # T5ForConditionalGeneration/T5Stack[encoder]/T5Block[0]
        return list(flatten(t_0))

    def state_dict(self,*args,**kwargs):
        # we return the state dict of this part as it should be in the original model
        return state_dict(self,*args,**kwargs)

    def load_state_dict(self, state):
        return load_state_dict(self,state)

    def named_parameters(self,recurse=True):
        # we return the named parameters of this part as it should be in the original model
        return named_parameters(self,recurse=recurse)

    def named_buffers(self,recurse=True):
        # we return the named buffers of this part as it should be in the original model
        return named_buffers(self,recurse=recurse)

    def cpu(self):
        return cpu(self)

    def cuda(self,device=None):
        return cuda(self,device=device)

    def to(self, *args, **kwargs):
        return to(self,*args,**kwargs)


class Partition5(nn.Module):
    LAYER_SCOPES=[
        ]
    TENSORS=[
        ]
    def __init__(self, layers, tensors, device='cuda:5'):
        super().__init__()

        #initialize partition layers
        for idx,layer_scope in enumerate(self.LAYER_SCOPES):
            self.add_module(f'l_{idx}',layers[layer_scope])

        #initialize partition tensors
        b=p=0
        for tensor_scope in self.TENSORS:
            tensor=tensors[tensor_scope]
            if isinstance(tensor,nn.Parameter):
                self.register_parameter(f'p_{p}',tensor)
                p+=1
            else:
                self.register_buffer(f'b_{b}',tensor)
                b+=1

        self.device = torch.device(device)
        self.input_structure = [(1, 1)]
        self.lookup = { }
        self.to(self.device)

    def forward(self, *args):
        # T5ForConditionalGeneration/T5Stack[encoder]/T5Block[0] <=> x0
        x0 = unflatten(args,self.input_structure)[0]
        t_0 = x0[0]
        # returning:
        # T5ForConditionalGeneration/T5Stack[encoder]/T5Block[0]
        # T5ForConditionalGeneration/T5Stack[encoder]/tuple::__getitem___20
        return list(flatten((x0, t_0)))

    def state_dict(self,*args,**kwargs):
        # we return the state dict of this part as it should be in the original model
        return state_dict(self,*args,**kwargs)

    def load_state_dict(self, state):
        return load_state_dict(self,state)

    def named_parameters(self,recurse=True):
        # we return the named parameters of this part as it should be in the original model
        return named_parameters(self,recurse=recurse)

    def named_buffers(self,recurse=True):
        # we return the named buffers of this part as it should be in the original model
        return named_buffers(self,recurse=recurse)

    def cpu(self):
        return cpu(self)

    def cuda(self,device=None):
        return cuda(self,device=device)

    def to(self, *args, **kwargs):
        return to(self,*args,**kwargs)


class Partition6(nn.Module):
    LAYER_SCOPES=[
        ]
    TENSORS=[
        ]
    def __init__(self, layers, tensors, device='cuda:6'):
        super().__init__()

        #initialize partition layers
        for idx,layer_scope in enumerate(self.LAYER_SCOPES):
            self.add_module(f'l_{idx}',layers[layer_scope])

        #initialize partition tensors
        b=p=0
        for tensor_scope in self.TENSORS:
            tensor=tensors[tensor_scope]
            if isinstance(tensor,nn.Parameter):
                self.register_parameter(f'p_{p}',tensor)
                p+=1
            else:
                self.register_buffer(f'b_{b}',tensor)
                b+=1

        self.device = torch.device(device)
        self.input_structure = [(1, 1)]
        self.lookup = { }
        self.to(self.device)

    def forward(self, *args):
        # T5ForConditionalGeneration/T5Stack[encoder]/T5Block[0] <=> x0
        x0 = unflatten(args,self.input_structure)[0]
        t_0 = x0[1]
        # returning:
        # T5ForConditionalGeneration/T5Stack[encoder]/tuple::__getitem___22
        return (t_0,)

    def state_dict(self,*args,**kwargs):
        # we return the state dict of this part as it should be in the original model
        return state_dict(self,*args,**kwargs)

    def load_state_dict(self, state):
        return load_state_dict(self,state)

    def named_parameters(self,recurse=True):
        # we return the named parameters of this part as it should be in the original model
        return named_parameters(self,recurse=recurse)

    def named_buffers(self,recurse=True):
        # we return the named buffers of this part as it should be in the original model
        return named_buffers(self,recurse=recurse)

    def cpu(self):
        return cpu(self)

    def cuda(self,device=None):
        return cuda(self,device=device)

    def to(self, *args, **kwargs):
        return to(self,*args,**kwargs)


class Partition7(nn.Module):
    LAYER_SCOPES=[
            'T5ForConditionalGeneration/T5Stack[encoder]/T5Block[1]',
            'T5ForConditionalGeneration/T5Stack[encoder]/T5Block[2]',
        ]
    TENSORS=[
        ]
    def __init__(self, layers, tensors, device='cuda:7'):
        super().__init__()

        #initialize partition layers
        for idx,layer_scope in enumerate(self.LAYER_SCOPES):
            self.add_module(f'l_{idx}',layers[layer_scope])

        #initialize partition tensors
        b=p=0
        for tensor_scope in self.TENSORS:
            tensor=tensors[tensor_scope]
            if isinstance(tensor,nn.Parameter):
                self.register_parameter(f'p_{p}',tensor)
                p+=1
            else:
                self.register_buffer(f'b_{b}',tensor)
                b+=1

        self.device = torch.device(device)
        self.input_structure = [1, 1, 1]
        self.lookup = { 'l_0': 'encoder.1',
                        'l_1': 'encoder.2'}
        self.to(self.device)

    def forward(self, *args):
        # T5ForConditionalGeneration/T5Stack[encoder]/T5Block[1] <=> self.l_0
        # T5ForConditionalGeneration/T5Stack[encoder]/T5Block[2] <=> self.l_1
        # input0 <=> attention_mask
        # T5ForConditionalGeneration/T5Stack[encoder]/tuple::__getitem___20 <=> x0
        # T5ForConditionalGeneration/T5Stack[encoder]/tuple::__getitem___22 <=> x1
        attention_mask, x0, x1 = unflatten(args,self.input_structure)
        t_0 = self.l_0(x0, attention_mask=attention_mask, position_bias=x1, encoder_hidden_states=None, encoder_attention_mask=None, encoder_decoder_position_bias=None)
        t_0 = self.l_1(t_0, attention_mask=attention_mask, position_bias=x1, encoder_hidden_states=None, encoder_attention_mask=None, encoder_decoder_position_bias=None)
        # returning:
        # T5ForConditionalGeneration/T5Stack[encoder]/tuple::__getitem___22
        # T5ForConditionalGeneration/T5Stack[encoder]/T5Block[2]
        return list(flatten((x1, t_0)))

    def state_dict(self,*args,**kwargs):
        # we return the state dict of this part as it should be in the original model
        return state_dict(self,*args,**kwargs)

    def load_state_dict(self, state):
        return load_state_dict(self,state)

    def named_parameters(self,recurse=True):
        # we return the named parameters of this part as it should be in the original model
        return named_parameters(self,recurse=recurse)

    def named_buffers(self,recurse=True):
        # we return the named buffers of this part as it should be in the original model
        return named_buffers(self,recurse=recurse)

    def cpu(self):
        return cpu(self)

    def cuda(self,device=None):
        return cuda(self,device=device)

    def to(self, *args, **kwargs):
        return to(self,*args,**kwargs)


class Partition8(nn.Module):
    LAYER_SCOPES=[
            'T5ForConditionalGeneration/T5Stack[encoder]/T5Block[3]',
            'T5ForConditionalGeneration/T5Stack[encoder]/T5Block[4]',
            'T5ForConditionalGeneration/T5Stack[encoder]/T5Block[5]',
        ]
    TENSORS=[
        ]
    def __init__(self, layers, tensors, device='cuda:8'):
        super().__init__()

        #initialize partition layers
        for idx,layer_scope in enumerate(self.LAYER_SCOPES):
            self.add_module(f'l_{idx}',layers[layer_scope])

        #initialize partition tensors
        b=p=0
        for tensor_scope in self.TENSORS:
            tensor=tensors[tensor_scope]
            if isinstance(tensor,nn.Parameter):
                self.register_parameter(f'p_{p}',tensor)
                p+=1
            else:
                self.register_buffer(f'b_{b}',tensor)
                b+=1

        self.device = torch.device(device)
        self.input_structure = [1, 1, 1]
        self.lookup = { 'l_0': 'encoder.3',
                        'l_1': 'encoder.4',
                        'l_2': 'encoder.5'}
        self.to(self.device)

    def forward(self, *args):
        # T5ForConditionalGeneration/T5Stack[encoder]/T5Block[3] <=> self.l_0
        # T5ForConditionalGeneration/T5Stack[encoder]/T5Block[4] <=> self.l_1
        # T5ForConditionalGeneration/T5Stack[encoder]/T5Block[5] <=> self.l_2
        # input0 <=> attention_mask
        # T5ForConditionalGeneration/T5Stack[encoder]/tuple::__getitem___22 <=> x0
        # T5ForConditionalGeneration/T5Stack[encoder]/T5Block[2] <=> x1
        attention_mask, x0, x1 = unflatten(args,self.input_structure)
        t_0 = self.l_0(x1, attention_mask=attention_mask, position_bias=x0, encoder_hidden_states=None, encoder_attention_mask=None, encoder_decoder_position_bias=None)
        t_0 = self.l_1(t_0, attention_mask=attention_mask, position_bias=x0, encoder_hidden_states=None, encoder_attention_mask=None, encoder_decoder_position_bias=None)
        t_0 = self.l_2(t_0, attention_mask=attention_mask, position_bias=x0, encoder_hidden_states=None, encoder_attention_mask=None, encoder_decoder_position_bias=None)
        # returning:
        # T5ForConditionalGeneration/T5Stack[encoder]/tuple::__getitem___22
        # T5ForConditionalGeneration/T5Stack[encoder]/T5Block[5]
        return list(flatten((x0, t_0)))

    def state_dict(self,*args,**kwargs):
        # we return the state dict of this part as it should be in the original model
        return state_dict(self,*args,**kwargs)

    def load_state_dict(self, state):
        return load_state_dict(self,state)

    def named_parameters(self,recurse=True):
        # we return the named parameters of this part as it should be in the original model
        return named_parameters(self,recurse=recurse)

    def named_buffers(self,recurse=True):
        # we return the named buffers of this part as it should be in the original model
        return named_buffers(self,recurse=recurse)

    def cpu(self):
        return cpu(self)

    def cuda(self,device=None):
        return cuda(self,device=device)

    def to(self, *args, **kwargs):
        return to(self,*args,**kwargs)


class Partition9(nn.Module):
    LAYER_SCOPES=[
            'T5ForConditionalGeneration/T5Stack[encoder]/T5Block[6]',
            'T5ForConditionalGeneration/T5Stack[encoder]/T5Block[7]',
            'T5ForConditionalGeneration/T5Stack[encoder]/T5Block[8]',
        ]
    TENSORS=[
        ]
    def __init__(self, layers, tensors, device='cuda:9'):
        super().__init__()

        #initialize partition layers
        for idx,layer_scope in enumerate(self.LAYER_SCOPES):
            self.add_module(f'l_{idx}',layers[layer_scope])

        #initialize partition tensors
        b=p=0
        for tensor_scope in self.TENSORS:
            tensor=tensors[tensor_scope]
            if isinstance(tensor,nn.Parameter):
                self.register_parameter(f'p_{p}',tensor)
                p+=1
            else:
                self.register_buffer(f'b_{b}',tensor)
                b+=1

        self.device = torch.device(device)
        self.input_structure = [1, 1, 1]
        self.lookup = { 'l_0': 'encoder.6',
                        'l_1': 'encoder.7',
                        'l_2': 'encoder.8'}
        self.to(self.device)

    def forward(self, *args):
        # T5ForConditionalGeneration/T5Stack[encoder]/T5Block[6] <=> self.l_0
        # T5ForConditionalGeneration/T5Stack[encoder]/T5Block[7] <=> self.l_1
        # T5ForConditionalGeneration/T5Stack[encoder]/T5Block[8] <=> self.l_2
        # input0 <=> attention_mask
        # T5ForConditionalGeneration/T5Stack[encoder]/tuple::__getitem___22 <=> x0
        # T5ForConditionalGeneration/T5Stack[encoder]/T5Block[5] <=> x1
        attention_mask, x0, x1 = unflatten(args,self.input_structure)
        t_0 = self.l_0(x1, attention_mask=attention_mask, position_bias=x0, encoder_hidden_states=None, encoder_attention_mask=None, encoder_decoder_position_bias=None)
        t_0 = self.l_1(t_0, attention_mask=attention_mask, position_bias=x0, encoder_hidden_states=None, encoder_attention_mask=None, encoder_decoder_position_bias=None)
        t_0 = self.l_2(t_0, attention_mask=attention_mask, position_bias=x0, encoder_hidden_states=None, encoder_attention_mask=None, encoder_decoder_position_bias=None)
        # returning:
        # T5ForConditionalGeneration/T5Stack[encoder]/tuple::__getitem___22
        # T5ForConditionalGeneration/T5Stack[encoder]/T5Block[8]
        return list(flatten((x0, t_0)))

    def state_dict(self,*args,**kwargs):
        # we return the state dict of this part as it should be in the original model
        return state_dict(self,*args,**kwargs)

    def load_state_dict(self, state):
        return load_state_dict(self,state)

    def named_parameters(self,recurse=True):
        # we return the named parameters of this part as it should be in the original model
        return named_parameters(self,recurse=recurse)

    def named_buffers(self,recurse=True):
        # we return the named buffers of this part as it should be in the original model
        return named_buffers(self,recurse=recurse)

    def cpu(self):
        return cpu(self)

    def cuda(self,device=None):
        return cuda(self,device=device)

    def to(self, *args, **kwargs):
        return to(self,*args,**kwargs)


class Partition10(nn.Module):
    LAYER_SCOPES=[
            'T5ForConditionalGeneration/T5Stack[encoder]/T5Block[9]',
            'T5ForConditionalGeneration/T5Stack[encoder]/T5Block[10]',
            'T5ForConditionalGeneration/T5Stack[encoder]/T5Block[11]',
        ]
    TENSORS=[
        ]
    def __init__(self, layers, tensors, device='cuda:10'):
        super().__init__()

        #initialize partition layers
        for idx,layer_scope in enumerate(self.LAYER_SCOPES):
            self.add_module(f'l_{idx}',layers[layer_scope])

        #initialize partition tensors
        b=p=0
        for tensor_scope in self.TENSORS:
            tensor=tensors[tensor_scope]
            if isinstance(tensor,nn.Parameter):
                self.register_parameter(f'p_{p}',tensor)
                p+=1
            else:
                self.register_buffer(f'b_{b}',tensor)
                b+=1

        self.device = torch.device(device)
        self.input_structure = [1, 1, 1]
        self.lookup = { 'l_0': 'encoder.9',
                        'l_1': 'encoder.10',
                        'l_2': 'encoder.11'}
        self.to(self.device)

    def forward(self, *args):
        # T5ForConditionalGeneration/T5Stack[encoder]/T5Block[9] <=> self.l_0
        # T5ForConditionalGeneration/T5Stack[encoder]/T5Block[10] <=> self.l_1
        # T5ForConditionalGeneration/T5Stack[encoder]/T5Block[11] <=> self.l_2
        # input0 <=> attention_mask
        # T5ForConditionalGeneration/T5Stack[encoder]/tuple::__getitem___22 <=> x0
        # T5ForConditionalGeneration/T5Stack[encoder]/T5Block[8] <=> x1
        attention_mask, x0, x1 = unflatten(args,self.input_structure)
        t_0 = self.l_0(x1, attention_mask=attention_mask, position_bias=x0, encoder_hidden_states=None, encoder_attention_mask=None, encoder_decoder_position_bias=None)
        t_0 = self.l_1(t_0, attention_mask=attention_mask, position_bias=x0, encoder_hidden_states=None, encoder_attention_mask=None, encoder_decoder_position_bias=None)
        t_0 = self.l_2(t_0, attention_mask=attention_mask, position_bias=x0, encoder_hidden_states=None, encoder_attention_mask=None, encoder_decoder_position_bias=None)
        # returning:
        # T5ForConditionalGeneration/T5Stack[encoder]/tuple::__getitem___22
        # T5ForConditionalGeneration/T5Stack[encoder]/T5Block[11]
        return list(flatten((x0, t_0)))

    def state_dict(self,*args,**kwargs):
        # we return the state dict of this part as it should be in the original model
        return state_dict(self,*args,**kwargs)

    def load_state_dict(self, state):
        return load_state_dict(self,state)

    def named_parameters(self,recurse=True):
        # we return the named parameters of this part as it should be in the original model
        return named_parameters(self,recurse=recurse)

    def named_buffers(self,recurse=True):
        # we return the named buffers of this part as it should be in the original model
        return named_buffers(self,recurse=recurse)

    def cpu(self):
        return cpu(self)

    def cuda(self,device=None):
        return cuda(self,device=device)

    def to(self, *args, **kwargs):
        return to(self,*args,**kwargs)


class Partition11(nn.Module):
    LAYER_SCOPES=[
            'T5ForConditionalGeneration/T5Stack[encoder]/T5Block[12]',
            'T5ForConditionalGeneration/T5Stack[encoder]/T5Block[13]',
            'T5ForConditionalGeneration/T5Stack[encoder]/T5Block[14]',
        ]
    TENSORS=[
        ]
    def __init__(self, layers, tensors, device='cuda:11'):
        super().__init__()

        #initialize partition layers
        for idx,layer_scope in enumerate(self.LAYER_SCOPES):
            self.add_module(f'l_{idx}',layers[layer_scope])

        #initialize partition tensors
        b=p=0
        for tensor_scope in self.TENSORS:
            tensor=tensors[tensor_scope]
            if isinstance(tensor,nn.Parameter):
                self.register_parameter(f'p_{p}',tensor)
                p+=1
            else:
                self.register_buffer(f'b_{b}',tensor)
                b+=1

        self.device = torch.device(device)
        self.input_structure = [1, 1, 1]
        self.lookup = { 'l_0': 'encoder.12',
                        'l_1': 'encoder.13',
                        'l_2': 'encoder.14'}
        self.to(self.device)

    def forward(self, *args):
        # T5ForConditionalGeneration/T5Stack[encoder]/T5Block[12] <=> self.l_0
        # T5ForConditionalGeneration/T5Stack[encoder]/T5Block[13] <=> self.l_1
        # T5ForConditionalGeneration/T5Stack[encoder]/T5Block[14] <=> self.l_2
        # input0 <=> attention_mask
        # T5ForConditionalGeneration/T5Stack[encoder]/tuple::__getitem___22 <=> x0
        # T5ForConditionalGeneration/T5Stack[encoder]/T5Block[11] <=> x1
        attention_mask, x0, x1 = unflatten(args,self.input_structure)
        t_0 = self.l_0(x1, attention_mask=attention_mask, position_bias=x0, encoder_hidden_states=None, encoder_attention_mask=None, encoder_decoder_position_bias=None)
        t_0 = self.l_1(t_0, attention_mask=attention_mask, position_bias=x0, encoder_hidden_states=None, encoder_attention_mask=None, encoder_decoder_position_bias=None)
        t_0 = self.l_2(t_0, attention_mask=attention_mask, position_bias=x0, encoder_hidden_states=None, encoder_attention_mask=None, encoder_decoder_position_bias=None)
        # returning:
        # T5ForConditionalGeneration/T5Stack[encoder]/tuple::__getitem___22
        # T5ForConditionalGeneration/T5Stack[encoder]/T5Block[14]
        return list(flatten((x0, t_0)))

    def state_dict(self,*args,**kwargs):
        # we return the state dict of this part as it should be in the original model
        return state_dict(self,*args,**kwargs)

    def load_state_dict(self, state):
        return load_state_dict(self,state)

    def named_parameters(self,recurse=True):
        # we return the named parameters of this part as it should be in the original model
        return named_parameters(self,recurse=recurse)

    def named_buffers(self,recurse=True):
        # we return the named buffers of this part as it should be in the original model
        return named_buffers(self,recurse=recurse)

    def cpu(self):
        return cpu(self)

    def cuda(self,device=None):
        return cuda(self,device=device)

    def to(self, *args, **kwargs):
        return to(self,*args,**kwargs)


class Partition12(nn.Module):
    LAYER_SCOPES=[
            'T5ForConditionalGeneration/T5Stack[encoder]/T5Block[15]',
            'T5ForConditionalGeneration/T5Stack[encoder]/T5Block[16]',
            'T5ForConditionalGeneration/T5Stack[encoder]/T5Block[17]',
        ]
    TENSORS=[
        ]
    def __init__(self, layers, tensors, device='cuda:12'):
        super().__init__()

        #initialize partition layers
        for idx,layer_scope in enumerate(self.LAYER_SCOPES):
            self.add_module(f'l_{idx}',layers[layer_scope])

        #initialize partition tensors
        b=p=0
        for tensor_scope in self.TENSORS:
            tensor=tensors[tensor_scope]
            if isinstance(tensor,nn.Parameter):
                self.register_parameter(f'p_{p}',tensor)
                p+=1
            else:
                self.register_buffer(f'b_{b}',tensor)
                b+=1

        self.device = torch.device(device)
        self.input_structure = [1, 1, 1]
        self.lookup = { 'l_0': 'encoder.15',
                        'l_1': 'encoder.16',
                        'l_2': 'encoder.17'}
        self.to(self.device)

    def forward(self, *args):
        # T5ForConditionalGeneration/T5Stack[encoder]/T5Block[15] <=> self.l_0
        # T5ForConditionalGeneration/T5Stack[encoder]/T5Block[16] <=> self.l_1
        # T5ForConditionalGeneration/T5Stack[encoder]/T5Block[17] <=> self.l_2
        # input0 <=> attention_mask
        # T5ForConditionalGeneration/T5Stack[encoder]/tuple::__getitem___22 <=> x0
        # T5ForConditionalGeneration/T5Stack[encoder]/T5Block[14] <=> x1
        attention_mask, x0, x1 = unflatten(args,self.input_structure)
        t_0 = self.l_0(x1, attention_mask=attention_mask, position_bias=x0, encoder_hidden_states=None, encoder_attention_mask=None, encoder_decoder_position_bias=None)
        t_0 = self.l_1(t_0, attention_mask=attention_mask, position_bias=x0, encoder_hidden_states=None, encoder_attention_mask=None, encoder_decoder_position_bias=None)
        t_0 = self.l_2(t_0, attention_mask=attention_mask, position_bias=x0, encoder_hidden_states=None, encoder_attention_mask=None, encoder_decoder_position_bias=None)
        # returning:
        # T5ForConditionalGeneration/T5Stack[encoder]/tuple::__getitem___22
        # T5ForConditionalGeneration/T5Stack[encoder]/T5Block[17]
        return list(flatten((x0, t_0)))

    def state_dict(self,*args,**kwargs):
        # we return the state dict of this part as it should be in the original model
        return state_dict(self,*args,**kwargs)

    def load_state_dict(self, state):
        return load_state_dict(self,state)

    def named_parameters(self,recurse=True):
        # we return the named parameters of this part as it should be in the original model
        return named_parameters(self,recurse=recurse)

    def named_buffers(self,recurse=True):
        # we return the named buffers of this part as it should be in the original model
        return named_buffers(self,recurse=recurse)

    def cpu(self):
        return cpu(self)

    def cuda(self,device=None):
        return cuda(self,device=device)

    def to(self, *args, **kwargs):
        return to(self,*args,**kwargs)


class Partition13(nn.Module):
    LAYER_SCOPES=[
            'T5ForConditionalGeneration/T5Stack[encoder]/T5Block[18]',
            'T5ForConditionalGeneration/T5Stack[encoder]/T5Block[19]',
            'T5ForConditionalGeneration/T5Stack[encoder]/T5Block[20]',
        ]
    TENSORS=[
        ]
    def __init__(self, layers, tensors, device='cuda:13'):
        super().__init__()

        #initialize partition layers
        for idx,layer_scope in enumerate(self.LAYER_SCOPES):
            self.add_module(f'l_{idx}',layers[layer_scope])

        #initialize partition tensors
        b=p=0
        for tensor_scope in self.TENSORS:
            tensor=tensors[tensor_scope]
            if isinstance(tensor,nn.Parameter):
                self.register_parameter(f'p_{p}',tensor)
                p+=1
            else:
                self.register_buffer(f'b_{b}',tensor)
                b+=1

        self.device = torch.device(device)
        self.input_structure = [1, 1, 1]
        self.lookup = { 'l_0': 'encoder.18',
                        'l_1': 'encoder.19',
                        'l_2': 'encoder.20'}
        self.to(self.device)

    def forward(self, *args):
        # T5ForConditionalGeneration/T5Stack[encoder]/T5Block[18] <=> self.l_0
        # T5ForConditionalGeneration/T5Stack[encoder]/T5Block[19] <=> self.l_1
        # T5ForConditionalGeneration/T5Stack[encoder]/T5Block[20] <=> self.l_2
        # input0 <=> attention_mask
        # T5ForConditionalGeneration/T5Stack[encoder]/tuple::__getitem___22 <=> x0
        # T5ForConditionalGeneration/T5Stack[encoder]/T5Block[17] <=> x1
        attention_mask, x0, x1 = unflatten(args,self.input_structure)
        t_0 = self.l_0(x1, attention_mask=attention_mask, position_bias=x0, encoder_hidden_states=None, encoder_attention_mask=None, encoder_decoder_position_bias=None)
        t_0 = self.l_1(t_0, attention_mask=attention_mask, position_bias=x0, encoder_hidden_states=None, encoder_attention_mask=None, encoder_decoder_position_bias=None)
        t_0 = self.l_2(t_0, attention_mask=attention_mask, position_bias=x0, encoder_hidden_states=None, encoder_attention_mask=None, encoder_decoder_position_bias=None)
        # returning:
        # T5ForConditionalGeneration/T5Stack[encoder]/tuple::__getitem___22
        # T5ForConditionalGeneration/T5Stack[encoder]/T5Block[20]
        return list(flatten((x0, t_0)))

    def state_dict(self,*args,**kwargs):
        # we return the state dict of this part as it should be in the original model
        return state_dict(self,*args,**kwargs)

    def load_state_dict(self, state):
        return load_state_dict(self,state)

    def named_parameters(self,recurse=True):
        # we return the named parameters of this part as it should be in the original model
        return named_parameters(self,recurse=recurse)

    def named_buffers(self,recurse=True):
        # we return the named buffers of this part as it should be in the original model
        return named_buffers(self,recurse=recurse)

    def cpu(self):
        return cpu(self)

    def cuda(self,device=None):
        return cuda(self,device=device)

    def to(self, *args, **kwargs):
        return to(self,*args,**kwargs)


class Partition14(nn.Module):
    LAYER_SCOPES=[
            'T5ForConditionalGeneration/T5Stack[encoder]/T5Block[21]',
            'T5ForConditionalGeneration/T5Stack[encoder]/T5Block[22]',
            'T5ForConditionalGeneration/T5Stack[encoder]/T5Block[23]',
            'T5ForConditionalGeneration/T5Stack[encoder]/T5LayerNorm[final_layer_norm]',
        ]
    TENSORS=[
        ]
    def __init__(self, layers, tensors, device='cuda:14'):
        super().__init__()

        #initialize partition layers
        for idx,layer_scope in enumerate(self.LAYER_SCOPES):
            self.add_module(f'l_{idx}',layers[layer_scope])

        #initialize partition tensors
        b=p=0
        for tensor_scope in self.TENSORS:
            tensor=tensors[tensor_scope]
            if isinstance(tensor,nn.Parameter):
                self.register_parameter(f'p_{p}',tensor)
                p+=1
            else:
                self.register_buffer(f'b_{b}',tensor)
                b+=1

        self.device = torch.device(device)
        self.input_structure = [1, 1, 1]
        self.lookup = { 'l_0': 'encoder.21',
                        'l_1': 'encoder.22',
                        'l_2': 'encoder.23',
                        'l_3': 'encoder.final_layer_norm'}
        self.to(self.device)

    def forward(self, *args):
        # T5ForConditionalGeneration/T5Stack[encoder]/T5Block[21] <=> self.l_0
        # T5ForConditionalGeneration/T5Stack[encoder]/T5Block[22] <=> self.l_1
        # T5ForConditionalGeneration/T5Stack[encoder]/T5Block[23] <=> self.l_2
        # T5ForConditionalGeneration/T5Stack[encoder]/T5LayerNorm[final_layer_norm] <=> self.l_3
        # input0 <=> attention_mask
        # T5ForConditionalGeneration/T5Stack[encoder]/tuple::__getitem___22 <=> x0
        # T5ForConditionalGeneration/T5Stack[encoder]/T5Block[20] <=> x1
        attention_mask, x0, x1 = unflatten(args,self.input_structure)
        t_0 = self.l_0(x1, attention_mask=attention_mask, position_bias=x0, encoder_hidden_states=None, encoder_attention_mask=None, encoder_decoder_position_bias=None)
        t_0 = self.l_1(t_0, attention_mask=attention_mask, position_bias=x0, encoder_hidden_states=None, encoder_attention_mask=None, encoder_decoder_position_bias=None)
        t_0 = self.l_2(t_0, attention_mask=attention_mask, position_bias=x0, encoder_hidden_states=None, encoder_attention_mask=None, encoder_decoder_position_bias=None)
        t_0 = self.l_3(t_0)
        # returning:
        # T5ForConditionalGeneration/T5Stack[encoder]/T5LayerNorm[final_layer_norm]
        return (t_0,)

    def state_dict(self,*args,**kwargs):
        # we return the state dict of this part as it should be in the original model
        return state_dict(self,*args,**kwargs)

    def load_state_dict(self, state):
        return load_state_dict(self,state)

    def named_parameters(self,recurse=True):
        # we return the named parameters of this part as it should be in the original model
        return named_parameters(self,recurse=recurse)

    def named_buffers(self,recurse=True):
        # we return the named buffers of this part as it should be in the original model
        return named_buffers(self,recurse=recurse)

    def cpu(self):
        return cpu(self)

    def cuda(self,device=None):
        return cuda(self,device=device)

    def to(self, *args, **kwargs):
        return to(self,*args,**kwargs)


class Partition15(nn.Module):
    LAYER_SCOPES=[
            'T5ForConditionalGeneration/T5Stack[encoder]/Dropout[dropout]',
            'T5ForConditionalGeneration/T5Stack[decoder]/StatelessEmbedding[embed_tokens]',
            'T5ForConditionalGeneration/T5Stack[decoder]/Dropout[dropout]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[0]',
        ]
    TENSORS=[
        ]
    def __init__(self, layers, tensors, device='cuda:15'):
        super().__init__()

        #initialize partition layers
        for idx,layer_scope in enumerate(self.LAYER_SCOPES):
            self.add_module(f'l_{idx}',layers[layer_scope])

        #initialize partition tensors
        b=p=0
        for tensor_scope in self.TENSORS:
            tensor=tensors[tensor_scope]
            if isinstance(tensor,nn.Parameter):
                self.register_parameter(f'p_{p}',tensor)
                p+=1
            else:
                self.register_buffer(f'b_{b}',tensor)
                b+=1

        self.device = torch.device(device)
        self.input_structure = [1, 1, 1, 1, 1, 1]
        self.lookup = { 'l_0': 'encoder.dropout',
                        'l_1': 'decoder.embed_tokens',
                        'l_2': 'decoder.dropout',
                        'l_3': 'decoder.0'}
        self.to(self.device)

    def forward(self, *args):
        # T5ForConditionalGeneration/T5Stack[encoder]/Dropout[dropout] <=> self.l_0
        # T5ForConditionalGeneration/T5Stack[decoder]/StatelessEmbedding[embed_tokens] <=> self.l_1
        # T5ForConditionalGeneration/T5Stack[decoder]/Dropout[dropout] <=> self.l_2
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[0] <=> self.l_3
        # input1 <=> decoder_attention_mask
        # input2 <=> decoder_input_ids
        # T5ForConditionalGeneration/T5Stack[decoder]/Tensor::size_117 <=> x0
        # input4 <=> inverted_encoder_attention_mask
        # T5ForConditionalGeneration/Parameter[shared_embed_weight] <=> x1
        # T5ForConditionalGeneration/T5Stack[encoder]/T5LayerNorm[final_layer_norm] <=> x2
        decoder_attention_mask, decoder_input_ids, x0, inverted_encoder_attention_mask, x1, x2 = unflatten(args,self.input_structure)
        t_0 = self.l_0(x2)
        t_1 = x0[-1]
        t_1 = decoder_input_ids.view(-1, t_1)
        t_1 = self.l_1(x1, t_1)
        t_1 = self.l_2(t_1)
        t_1 = self.l_3(t_1, attention_mask=decoder_attention_mask, position_bias=None, encoder_hidden_states=t_0, encoder_attention_mask=inverted_encoder_attention_mask, encoder_decoder_position_bias=None)
        t_2 = t_1[0]
        # returning:
        # T5ForConditionalGeneration/T5Stack[encoder]/Dropout[dropout]
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[0]
        # T5ForConditionalGeneration/T5Stack[decoder]/tuple::__getitem___128
        return list(flatten((t_0, t_1, t_2)))

    def state_dict(self,*args,**kwargs):
        # we return the state dict of this part as it should be in the original model
        return state_dict(self,*args,**kwargs)

    def load_state_dict(self, state):
        return load_state_dict(self,state)

    def named_parameters(self,recurse=True):
        # we return the named parameters of this part as it should be in the original model
        return named_parameters(self,recurse=recurse)

    def named_buffers(self,recurse=True):
        # we return the named buffers of this part as it should be in the original model
        return named_buffers(self,recurse=recurse)

    def cpu(self):
        return cpu(self)

    def cuda(self,device=None):
        return cuda(self,device=device)

    def to(self, *args, **kwargs):
        return to(self,*args,**kwargs)


class Partition16(nn.Module):
    LAYER_SCOPES=[
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[1]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[2]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[3]',
        ]
    TENSORS=[
        ]
    def __init__(self, layers, tensors, device='cuda:16'):
        super().__init__()

        #initialize partition layers
        for idx,layer_scope in enumerate(self.LAYER_SCOPES):
            self.add_module(f'l_{idx}',layers[layer_scope])

        #initialize partition tensors
        b=p=0
        for tensor_scope in self.TENSORS:
            tensor=tensors[tensor_scope]
            if isinstance(tensor,nn.Parameter):
                self.register_parameter(f'p_{p}',tensor)
                p+=1
            else:
                self.register_buffer(f'b_{b}',tensor)
                b+=1

        self.device = torch.device(device)
        self.input_structure = [1, 1, 1, (1, 1, 1), 1]
        self.lookup = { 'l_0': 'decoder.1',
                        'l_1': 'decoder.2',
                        'l_2': 'decoder.3'}
        self.to(self.device)

    def forward(self, *args):
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[1] <=> self.l_0
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[2] <=> self.l_1
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[3] <=> self.l_2
        # input1 <=> decoder_attention_mask
        # input4 <=> inverted_encoder_attention_mask
        # T5ForConditionalGeneration/T5Stack[encoder]/Dropout[dropout] <=> x0
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[0] <=> x1
        # T5ForConditionalGeneration/T5Stack[decoder]/tuple::__getitem___128 <=> x2
        decoder_attention_mask, inverted_encoder_attention_mask, x0, x1, x2 = unflatten(args,self.input_structure)
        t_0 = x1[1]
        t_1 = x1[2]
        t_2 = self.l_0(x2, attention_mask=decoder_attention_mask, position_bias=t_0, encoder_hidden_states=x0, encoder_attention_mask=inverted_encoder_attention_mask, encoder_decoder_position_bias=t_1)
        t_2 = self.l_1(t_2, attention_mask=decoder_attention_mask, position_bias=t_0, encoder_hidden_states=x0, encoder_attention_mask=inverted_encoder_attention_mask, encoder_decoder_position_bias=t_1)
        t_2 = self.l_2(t_2, attention_mask=decoder_attention_mask, position_bias=t_0, encoder_hidden_states=x0, encoder_attention_mask=inverted_encoder_attention_mask, encoder_decoder_position_bias=t_1)
        # returning:
        # T5ForConditionalGeneration/T5Stack[encoder]/Dropout[dropout]
        # T5ForConditionalGeneration/T5Stack[decoder]/tuple::__getitem___130
        # T5ForConditionalGeneration/T5Stack[decoder]/tuple::__getitem___132
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[3]
        return list(flatten((x0, t_0, t_1, t_2)))

    def state_dict(self,*args,**kwargs):
        # we return the state dict of this part as it should be in the original model
        return state_dict(self,*args,**kwargs)

    def load_state_dict(self, state):
        return load_state_dict(self,state)

    def named_parameters(self,recurse=True):
        # we return the named parameters of this part as it should be in the original model
        return named_parameters(self,recurse=recurse)

    def named_buffers(self,recurse=True):
        # we return the named buffers of this part as it should be in the original model
        return named_buffers(self,recurse=recurse)

    def cpu(self):
        return cpu(self)

    def cuda(self,device=None):
        return cuda(self,device=device)

    def to(self, *args, **kwargs):
        return to(self,*args,**kwargs)


class Partition17(nn.Module):
    LAYER_SCOPES=[
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[4]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[5]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[6]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[7]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[8]',
        ]
    TENSORS=[
        ]
    def __init__(self, layers, tensors, device='cuda:17'):
        super().__init__()

        #initialize partition layers
        for idx,layer_scope in enumerate(self.LAYER_SCOPES):
            self.add_module(f'l_{idx}',layers[layer_scope])

        #initialize partition tensors
        b=p=0
        for tensor_scope in self.TENSORS:
            tensor=tensors[tensor_scope]
            if isinstance(tensor,nn.Parameter):
                self.register_parameter(f'p_{p}',tensor)
                p+=1
            else:
                self.register_buffer(f'b_{b}',tensor)
                b+=1

        self.device = torch.device(device)
        self.input_structure = [1, 1, 1, 1, 1, 1]
        self.lookup = { 'l_0': 'decoder.4',
                        'l_1': 'decoder.5',
                        'l_2': 'decoder.6',
                        'l_3': 'decoder.7',
                        'l_4': 'decoder.8'}
        self.to(self.device)

    def forward(self, *args):
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[4] <=> self.l_0
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[5] <=> self.l_1
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[6] <=> self.l_2
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[7] <=> self.l_3
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[8] <=> self.l_4
        # input1 <=> decoder_attention_mask
        # input4 <=> inverted_encoder_attention_mask
        # T5ForConditionalGeneration/T5Stack[encoder]/Dropout[dropout] <=> x0
        # T5ForConditionalGeneration/T5Stack[decoder]/tuple::__getitem___130 <=> x1
        # T5ForConditionalGeneration/T5Stack[decoder]/tuple::__getitem___132 <=> x2
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[3] <=> x3
        decoder_attention_mask, inverted_encoder_attention_mask, x0, x1, x2, x3 = unflatten(args,self.input_structure)
        t_0 = self.l_0(x3, attention_mask=decoder_attention_mask, position_bias=x1, encoder_hidden_states=x0, encoder_attention_mask=inverted_encoder_attention_mask, encoder_decoder_position_bias=x2)
        t_0 = self.l_1(t_0, attention_mask=decoder_attention_mask, position_bias=x1, encoder_hidden_states=x0, encoder_attention_mask=inverted_encoder_attention_mask, encoder_decoder_position_bias=x2)
        t_0 = self.l_2(t_0, attention_mask=decoder_attention_mask, position_bias=x1, encoder_hidden_states=x0, encoder_attention_mask=inverted_encoder_attention_mask, encoder_decoder_position_bias=x2)
        t_0 = self.l_3(t_0, attention_mask=decoder_attention_mask, position_bias=x1, encoder_hidden_states=x0, encoder_attention_mask=inverted_encoder_attention_mask, encoder_decoder_position_bias=x2)
        t_0 = self.l_4(t_0, attention_mask=decoder_attention_mask, position_bias=x1, encoder_hidden_states=x0, encoder_attention_mask=inverted_encoder_attention_mask, encoder_decoder_position_bias=x2)
        # returning:
        # T5ForConditionalGeneration/T5Stack[encoder]/Dropout[dropout]
        # T5ForConditionalGeneration/T5Stack[decoder]/tuple::__getitem___130
        # T5ForConditionalGeneration/T5Stack[decoder]/tuple::__getitem___132
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[8]
        return list(flatten((x0, x1, x2, t_0)))

    def state_dict(self,*args,**kwargs):
        # we return the state dict of this part as it should be in the original model
        return state_dict(self,*args,**kwargs)

    def load_state_dict(self, state):
        return load_state_dict(self,state)

    def named_parameters(self,recurse=True):
        # we return the named parameters of this part as it should be in the original model
        return named_parameters(self,recurse=recurse)

    def named_buffers(self,recurse=True):
        # we return the named buffers of this part as it should be in the original model
        return named_buffers(self,recurse=recurse)

    def cpu(self):
        return cpu(self)

    def cuda(self,device=None):
        return cuda(self,device=device)

    def to(self, *args, **kwargs):
        return to(self,*args,**kwargs)


class Partition18(nn.Module):
    LAYER_SCOPES=[
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[9]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[10]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[11]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[12]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[13]',
        ]
    TENSORS=[
        ]
    def __init__(self, layers, tensors, device='cuda:18'):
        super().__init__()

        #initialize partition layers
        for idx,layer_scope in enumerate(self.LAYER_SCOPES):
            self.add_module(f'l_{idx}',layers[layer_scope])

        #initialize partition tensors
        b=p=0
        for tensor_scope in self.TENSORS:
            tensor=tensors[tensor_scope]
            if isinstance(tensor,nn.Parameter):
                self.register_parameter(f'p_{p}',tensor)
                p+=1
            else:
                self.register_buffer(f'b_{b}',tensor)
                b+=1

        self.device = torch.device(device)
        self.input_structure = [1, 1, 1, 1, 1, 1]
        self.lookup = { 'l_0': 'decoder.9',
                        'l_1': 'decoder.10',
                        'l_2': 'decoder.11',
                        'l_3': 'decoder.12',
                        'l_4': 'decoder.13'}
        self.to(self.device)

    def forward(self, *args):
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[9] <=> self.l_0
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[10] <=> self.l_1
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[11] <=> self.l_2
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[12] <=> self.l_3
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[13] <=> self.l_4
        # input1 <=> decoder_attention_mask
        # input4 <=> inverted_encoder_attention_mask
        # T5ForConditionalGeneration/T5Stack[encoder]/Dropout[dropout] <=> x0
        # T5ForConditionalGeneration/T5Stack[decoder]/tuple::__getitem___130 <=> x1
        # T5ForConditionalGeneration/T5Stack[decoder]/tuple::__getitem___132 <=> x2
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[8] <=> x3
        decoder_attention_mask, inverted_encoder_attention_mask, x0, x1, x2, x3 = unflatten(args,self.input_structure)
        t_0 = self.l_0(x3, attention_mask=decoder_attention_mask, position_bias=x1, encoder_hidden_states=x0, encoder_attention_mask=inverted_encoder_attention_mask, encoder_decoder_position_bias=x2)
        t_0 = self.l_1(t_0, attention_mask=decoder_attention_mask, position_bias=x1, encoder_hidden_states=x0, encoder_attention_mask=inverted_encoder_attention_mask, encoder_decoder_position_bias=x2)
        t_0 = self.l_2(t_0, attention_mask=decoder_attention_mask, position_bias=x1, encoder_hidden_states=x0, encoder_attention_mask=inverted_encoder_attention_mask, encoder_decoder_position_bias=x2)
        t_0 = self.l_3(t_0, attention_mask=decoder_attention_mask, position_bias=x1, encoder_hidden_states=x0, encoder_attention_mask=inverted_encoder_attention_mask, encoder_decoder_position_bias=x2)
        t_0 = self.l_4(t_0, attention_mask=decoder_attention_mask, position_bias=x1, encoder_hidden_states=x0, encoder_attention_mask=inverted_encoder_attention_mask, encoder_decoder_position_bias=x2)
        # returning:
        # T5ForConditionalGeneration/T5Stack[encoder]/Dropout[dropout]
        # T5ForConditionalGeneration/T5Stack[decoder]/tuple::__getitem___130
        # T5ForConditionalGeneration/T5Stack[decoder]/tuple::__getitem___132
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[13]
        return list(flatten((x0, x1, x2, t_0)))

    def state_dict(self,*args,**kwargs):
        # we return the state dict of this part as it should be in the original model
        return state_dict(self,*args,**kwargs)

    def load_state_dict(self, state):
        return load_state_dict(self,state)

    def named_parameters(self,recurse=True):
        # we return the named parameters of this part as it should be in the original model
        return named_parameters(self,recurse=recurse)

    def named_buffers(self,recurse=True):
        # we return the named buffers of this part as it should be in the original model
        return named_buffers(self,recurse=recurse)

    def cpu(self):
        return cpu(self)

    def cuda(self,device=None):
        return cuda(self,device=device)

    def to(self, *args, **kwargs):
        return to(self,*args,**kwargs)


class Partition19(nn.Module):
    LAYER_SCOPES=[
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[14]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[15]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[16]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[17]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[18]',
        ]
    TENSORS=[
        ]
    def __init__(self, layers, tensors, device='cuda:19'):
        super().__init__()

        #initialize partition layers
        for idx,layer_scope in enumerate(self.LAYER_SCOPES):
            self.add_module(f'l_{idx}',layers[layer_scope])

        #initialize partition tensors
        b=p=0
        for tensor_scope in self.TENSORS:
            tensor=tensors[tensor_scope]
            if isinstance(tensor,nn.Parameter):
                self.register_parameter(f'p_{p}',tensor)
                p+=1
            else:
                self.register_buffer(f'b_{b}',tensor)
                b+=1

        self.device = torch.device(device)
        self.input_structure = [1, 1, 1, 1, 1, 1]
        self.lookup = { 'l_0': 'decoder.14',
                        'l_1': 'decoder.15',
                        'l_2': 'decoder.16',
                        'l_3': 'decoder.17',
                        'l_4': 'decoder.18'}
        self.to(self.device)

    def forward(self, *args):
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[14] <=> self.l_0
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[15] <=> self.l_1
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[16] <=> self.l_2
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[17] <=> self.l_3
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[18] <=> self.l_4
        # input1 <=> decoder_attention_mask
        # input4 <=> inverted_encoder_attention_mask
        # T5ForConditionalGeneration/T5Stack[encoder]/Dropout[dropout] <=> x0
        # T5ForConditionalGeneration/T5Stack[decoder]/tuple::__getitem___130 <=> x1
        # T5ForConditionalGeneration/T5Stack[decoder]/tuple::__getitem___132 <=> x2
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[13] <=> x3
        decoder_attention_mask, inverted_encoder_attention_mask, x0, x1, x2, x3 = unflatten(args,self.input_structure)
        t_0 = self.l_0(x3, attention_mask=decoder_attention_mask, position_bias=x1, encoder_hidden_states=x0, encoder_attention_mask=inverted_encoder_attention_mask, encoder_decoder_position_bias=x2)
        t_0 = self.l_1(t_0, attention_mask=decoder_attention_mask, position_bias=x1, encoder_hidden_states=x0, encoder_attention_mask=inverted_encoder_attention_mask, encoder_decoder_position_bias=x2)
        t_0 = self.l_2(t_0, attention_mask=decoder_attention_mask, position_bias=x1, encoder_hidden_states=x0, encoder_attention_mask=inverted_encoder_attention_mask, encoder_decoder_position_bias=x2)
        t_0 = self.l_3(t_0, attention_mask=decoder_attention_mask, position_bias=x1, encoder_hidden_states=x0, encoder_attention_mask=inverted_encoder_attention_mask, encoder_decoder_position_bias=x2)
        t_0 = self.l_4(t_0, attention_mask=decoder_attention_mask, position_bias=x1, encoder_hidden_states=x0, encoder_attention_mask=inverted_encoder_attention_mask, encoder_decoder_position_bias=x2)
        # returning:
        # T5ForConditionalGeneration/T5Stack[encoder]/Dropout[dropout]
        # T5ForConditionalGeneration/T5Stack[decoder]/tuple::__getitem___130
        # T5ForConditionalGeneration/T5Stack[decoder]/tuple::__getitem___132
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[18]
        return list(flatten((x0, x1, x2, t_0)))

    def state_dict(self,*args,**kwargs):
        # we return the state dict of this part as it should be in the original model
        return state_dict(self,*args,**kwargs)

    def load_state_dict(self, state):
        return load_state_dict(self,state)

    def named_parameters(self,recurse=True):
        # we return the named parameters of this part as it should be in the original model
        return named_parameters(self,recurse=recurse)

    def named_buffers(self,recurse=True):
        # we return the named buffers of this part as it should be in the original model
        return named_buffers(self,recurse=recurse)

    def cpu(self):
        return cpu(self)

    def cuda(self,device=None):
        return cuda(self,device=device)

    def to(self, *args, **kwargs):
        return to(self,*args,**kwargs)


class Partition20(nn.Module):
    LAYER_SCOPES=[
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[19]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[20]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[21]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[22]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[23]',
        ]
    TENSORS=[
        ]
    def __init__(self, layers, tensors, device='cuda:20'):
        super().__init__()

        #initialize partition layers
        for idx,layer_scope in enumerate(self.LAYER_SCOPES):
            self.add_module(f'l_{idx}',layers[layer_scope])

        #initialize partition tensors
        b=p=0
        for tensor_scope in self.TENSORS:
            tensor=tensors[tensor_scope]
            if isinstance(tensor,nn.Parameter):
                self.register_parameter(f'p_{p}',tensor)
                p+=1
            else:
                self.register_buffer(f'b_{b}',tensor)
                b+=1

        self.device = torch.device(device)
        self.input_structure = [1, 1, 1, 1, 1, 1]
        self.lookup = { 'l_0': 'decoder.19',
                        'l_1': 'decoder.20',
                        'l_2': 'decoder.21',
                        'l_3': 'decoder.22',
                        'l_4': 'decoder.23'}
        self.to(self.device)

    def forward(self, *args):
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[19] <=> self.l_0
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[20] <=> self.l_1
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[21] <=> self.l_2
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[22] <=> self.l_3
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[23] <=> self.l_4
        # input1 <=> decoder_attention_mask
        # input4 <=> inverted_encoder_attention_mask
        # T5ForConditionalGeneration/T5Stack[encoder]/Dropout[dropout] <=> x0
        # T5ForConditionalGeneration/T5Stack[decoder]/tuple::__getitem___130 <=> x1
        # T5ForConditionalGeneration/T5Stack[decoder]/tuple::__getitem___132 <=> x2
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[18] <=> x3
        decoder_attention_mask, inverted_encoder_attention_mask, x0, x1, x2, x3 = unflatten(args,self.input_structure)
        t_0 = self.l_0(x3, attention_mask=decoder_attention_mask, position_bias=x1, encoder_hidden_states=x0, encoder_attention_mask=inverted_encoder_attention_mask, encoder_decoder_position_bias=x2)
        t_0 = self.l_1(t_0, attention_mask=decoder_attention_mask, position_bias=x1, encoder_hidden_states=x0, encoder_attention_mask=inverted_encoder_attention_mask, encoder_decoder_position_bias=x2)
        t_0 = self.l_2(t_0, attention_mask=decoder_attention_mask, position_bias=x1, encoder_hidden_states=x0, encoder_attention_mask=inverted_encoder_attention_mask, encoder_decoder_position_bias=x2)
        t_0 = self.l_3(t_0, attention_mask=decoder_attention_mask, position_bias=x1, encoder_hidden_states=x0, encoder_attention_mask=inverted_encoder_attention_mask, encoder_decoder_position_bias=x2)
        t_0 = self.l_4(t_0, attention_mask=decoder_attention_mask, position_bias=x1, encoder_hidden_states=x0, encoder_attention_mask=inverted_encoder_attention_mask, encoder_decoder_position_bias=x2)
        # returning:
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[23]
        return (t_0,)

    def state_dict(self,*args,**kwargs):
        # we return the state dict of this part as it should be in the original model
        return state_dict(self,*args,**kwargs)

    def load_state_dict(self, state):
        return load_state_dict(self,state)

    def named_parameters(self,recurse=True):
        # we return the named parameters of this part as it should be in the original model
        return named_parameters(self,recurse=recurse)

    def named_buffers(self,recurse=True):
        # we return the named buffers of this part as it should be in the original model
        return named_buffers(self,recurse=recurse)

    def cpu(self):
        return cpu(self)

    def cuda(self,device=None):
        return cuda(self,device=device)

    def to(self, *args, **kwargs):
        return to(self,*args,**kwargs)


class Partition21(nn.Module):
    LAYER_SCOPES=[
            'T5ForConditionalGeneration/T5Stack[decoder]/T5LayerNorm[final_layer_norm]',
            'T5ForConditionalGeneration/T5Stack[decoder]/Dropout[dropout]',
            'T5ForConditionalGeneration/Linear[lm_head]',
            'T5ForConditionalGeneration/CrossEntropyLoss[lm_loss]',
        ]
    TENSORS=[
        ]
    def __init__(self, layers, tensors, device='cuda:21'):
        super().__init__()

        #initialize partition layers
        for idx,layer_scope in enumerate(self.LAYER_SCOPES):
            self.add_module(f'l_{idx}',layers[layer_scope])

        #initialize partition tensors
        b=p=0
        for tensor_scope in self.TENSORS:
            tensor=tensors[tensor_scope]
            if isinstance(tensor,nn.Parameter):
                self.register_parameter(f'p_{p}',tensor)
                p+=1
            else:
                self.register_buffer(f'b_{b}',tensor)
                b+=1

        self.device = torch.device(device)
        self.input_structure = [1, 1]
        self.lookup = { 'l_0': 'decoder.final_layer_norm',
                        'l_1': 'decoder.dropout',
                        'l_2': 'lm_head',
                        'l_3': 'lm_loss'}
        self.to(self.device)

    def forward(self, *args):
        # T5ForConditionalGeneration/T5Stack[decoder]/T5LayerNorm[final_layer_norm] <=> self.l_0
        # T5ForConditionalGeneration/T5Stack[decoder]/Dropout[dropout] <=> self.l_1
        # T5ForConditionalGeneration/Linear[lm_head] <=> self.l_2
        # T5ForConditionalGeneration/CrossEntropyLoss[lm_loss] <=> self.l_3
        # input5 <=> lm_labels
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[23] <=> x0
        lm_labels, x0 = unflatten(args,self.input_structure)
        t_0 = self.l_0(x0)
        t_0 = self.l_1(t_0)
        t_0 = t_0 * 0.03125
        t_0 = self.l_2(t_0)
        t_1 = t_0.size(-1)
        t_1 = t_0.view(-1, t_1)
        t_0 = lm_labels.view(-1)
        t_0 = self.l_3(t_1, t_0)
        # returning:
        # T5ForConditionalGeneration/CrossEntropyLoss[lm_loss]
        return (t_0,)

    def state_dict(self,*args,**kwargs):
        # we return the state dict of this part as it should be in the original model
        return state_dict(self,*args,**kwargs)

    def load_state_dict(self, state):
        return load_state_dict(self,state)

    def named_parameters(self,recurse=True):
        # we return the named parameters of this part as it should be in the original model
        return named_parameters(self,recurse=recurse)

    def named_buffers(self,recurse=True):
        # we return the named buffers of this part as it should be in the original model
        return named_buffers(self,recurse=recurse)

    def cpu(self):
        return cpu(self)

    def cuda(self,device=None):
        return cuda(self,device=device)

    def to(self, *args, **kwargs):
        return to(self,*args,**kwargs)


def traverse_model(module: nn.Module, depth: int, prefix: Optional[str] = None,
                   basic_blocks: Tuple[nn.Module] = (), full: bool = False) -> Iterator[
    Tuple[nn.Module, str, nn.Module]]:
    '''
    iterate over model layers yielding the layer,layer_scope,encasing_module
    Parameters:
    -----------
    model:
        the model to iterate over
    depth:
        how far down in the model tree to go
    basic_blocks:
        a list of modules that if encountered will not be broken down
    full:
        whether to yield only layers specified by the depth and basick_block options or to yield all layers
    '''
    if prefix is None:
        prefix = type(module).__name__

    for name, sub_module in module.named_children():
        scope = prefix + "/" + type(sub_module).__name__ + f"[{name}]"
        if len(list(sub_module.children())) == 0 or isinstance(sub_module, tuple(basic_blocks)) or depth == 0:
            if full:
                yield sub_module, scope, module, True
            else:
                yield sub_module, scope, module
        else:
            if full:
                yield sub_module, scope, module, False
            yield from traverse_model(sub_module, depth - 1, scope, basic_blocks, full)


def layerDict(model: nn.Module, depth=1000, basic_blocks=()) -> Dict[str, nn.Module]:
    return {s: l for l, s, _ in traverse_model(model, depth, basic_blocks=basic_blocks)}


def traverse_params_buffs(module: nn.Module, prefix: Optional[str] = None) -> Iterator[Tuple[torch.tensor, str]]:
    '''
    iterate over model's buffers and parameters yielding obj,obj_scope

    Parameters:
    -----------
    model:
        the model to iterate over
    '''
    if prefix is None:
        prefix = type(module).__name__

    # params
    for param_name, param in module.named_parameters(recurse=False):
        param_scope = f"{prefix}/{type(param).__name__}[{param_name}]"
        yield param, param_scope

    # buffs
    for buffer_name, buffer in module.named_buffers(recurse=False):
        buffer_scope = f"{prefix}/{type(buffer).__name__}[{buffer_name}]"
        yield buffer, buffer_scope

    # recurse
    for name, sub_module in module.named_children():
        yield from traverse_params_buffs(sub_module, prefix + "/" + type(sub_module).__name__ + f"[{name}]")


def tensorDict(model: nn.Module) -> OrderedDict[str, Tensor]:
    return collections.OrderedDict((s, t) for t, s in traverse_params_buffs(model))


def move_tensors(ts, device):
    def move(t):
        if isinstance(t, (nn.Module, Tensor)):
            return t.to(device)
        return t

    return nested_map(move, ts)


def nested_map(func, ts, full=False):
    if isinstance(ts, torch.Size):
        # size is inheriting from tuple which is stupid
        return func(ts)
    elif isinstance(ts, (list, tuple, set)):
        return type(ts)(nested_map(func, t, full=full) for t in ts)
    elif isinstance(ts, dict):
        return {k: nested_map(func, v, full=full) for k, v in ts.items()}
    elif isinstance(ts, slice) and full:
        start = nested_map(func, ts.start, full=full)
        stop = nested_map(func, ts.stop, full=full)
        step = nested_map(func, ts.step, full=full)
        return slice(start, stop, step)
    return func(ts)


def flatten(ts):
    if isinstance(ts, torch.Size):
        # size is inheriting from tuple which is stupid
        yield ts
    elif isinstance(ts, (list, tuple, set)):
        yield from chain(*[flatten(t) for t in ts])
    elif isinstance(ts, dict):
        yield from chain(*[flatten(t) for k, t in sorted(ts.items(), key=lambda t: t[0])])
    else:
        yield ts


def unflatten(xs, structure):
    return _unflatten(xs, structure)[0]


def _unflatten(xs, structure):
    if isinstance(structure, torch.Size):
        # torch.Size is subclass of tuple which is stupid
        return xs[0], 1

    if not isinstance(structure, (list, tuple, set, dict)):
        return xs[0], 1

    if isinstance(structure, (list, tuple, set)):
        offset = 0
        elements = []
        for s in structure:
            e, n = _unflatten(xs[offset:], s)
            elements.append(e)
            offset += n

        return type(structure)(elements), offset

    assert isinstance(structure, dict)
    offset = 0
    elements = dict()
    for k, v in sorted(structure.items(), key=lambda t: t[0]):
        e, n = _unflatten(xs[offset:], v)
        elements[k] = e
        offset += n

    return elements, offset


def state_dict(partition, *args, **kwargs):
    # we return the state dict of this part as it should be in the original model
    state = nn.Module.state_dict(partition, *args, **kwargs)
    lookup = partition.lookup
    result = dict()
    for k, v in state.items():
        if k in lookup:
            result[lookup[k]] = v
        else:
            assert '.' in k
            split_idx = k.find('.')
            new_k = lookup[k[:split_idx]] + k[split_idx:]
            result[new_k] = v
    return result


def load_state_dict(partition, state):
    reverse_lookup = {v: k for k, v in partition.lookup.items()}
    device = partition.device
    keys = list(partition.state_dict(None).keys())
    new_state = dict()
    for k in keys:
        if k in reverse_lookup:
            new_state[reverse_lookup[k]] = state[k].to(device)
            continue
        idx = k.rfind(".")
        to_replace = k[:idx]
        if to_replace in reverse_lookup:
            key = reverse_lookup[to_replace] + k[idx:]
            new_state[key] = state[k].to(device)
    nn.Module.load_state_dict(partition, new_state, strict=True)


def named_buffers(partition, recurse=True):
    # we return the named buffers of this part as it should be in the original model
    params = nn.Module.named_buffers(partition, recurse=recurse)
    lookup = partition.lookup
    for k, v in params:
        if k in lookup:
            yield (lookup[k], v)
        else:
            assert '.' in k
            split_idx = k.find('.')
            new_k = lookup[k[:split_idx]] + k[split_idx:]
            yield (new_k, v)


def named_parameters(partition, recurse=True):
    # we return the named parameters of this part as it should be in the original model
    params = nn.Module.named_parameters(partition, recurse=recurse)
    lookup = partition.lookup
    for k, v in params:
        if k in lookup:
            yield (lookup[k], v)
        else:
            assert '.' in k
            split_idx = k.find('.')
            new_k = lookup[k[:split_idx]] + k[split_idx:]
            yield (new_k, v)


def cpu(partition):
    partition.device = torch.device('cpu')
    return nn.Module.cpu(partition)


def cuda(partition, device=None):
    if device is None:
        device = torch.cuda.current_device()
    partition.device = torch.device(device)
    return nn.Module.cuda(partition, partition.device)


def to(partition, *args, **kwargs):
    device = None
    if 'device' in kwargs:
        device = kwargs['device']
    elif 'tensor' in kwargs:
        device = kwargs['tensor'].device
    if args:
        if isinstance(args[0], (torch.device, int, str)):
            device = args[0]
        if torch.is_tensor(args[0]):
            device = args[0].device
    if not (device is None):
        partition.device = torch.device(device)
    return nn.Module.to(partition, *args, **kwargs)

model_args = {'model_name_or_path': 't5-3b', 'max_seq_length': 64, 'answer_max_seq_length': 4, 'stateless_tied': True, 'lmhead': True, 'precompute_masks': True}
"""analysis summary
-I- Printing Report
warnings:
Partition4 output:T5ForConditionalGeneration/T5Stack[encoder]/T5Block[0]_5_1 is not contiguous!
Partition5 output:T5ForConditionalGeneration/T5Stack[encoder]/T5Block[0]_6_1 is not contiguous!
Partition6 output:T5ForConditionalGeneration/T5Stack[encoder]/tuple::__getitem___22_7 is not contiguous!
Partition7 output:T5ForConditionalGeneration/T5Stack[encoder]/tuple::__getitem___22_8 is not contiguous!
Partition8 output:T5ForConditionalGeneration/T5Stack[encoder]/tuple::__getitem___22_9 is not contiguous!
Partition9 output:T5ForConditionalGeneration/T5Stack[encoder]/tuple::__getitem___22_10 is not contiguous!
Partition10 output:T5ForConditionalGeneration/T5Stack[encoder]/tuple::__getitem___22_11 is not contiguous!
Partition11 output:T5ForConditionalGeneration/T5Stack[encoder]/tuple::__getitem___22_12 is not contiguous!
Partition12 output:T5ForConditionalGeneration/T5Stack[encoder]/tuple::__getitem___22_13 is not contiguous!
Partition13 output:T5ForConditionalGeneration/T5Stack[encoder]/tuple::__getitem___22_14 is not contiguous!
Partition15 output:T5ForConditionalGeneration/T5Stack[decoder]/T5Block[0]_1 is not contiguous!
Partition15 output:T5ForConditionalGeneration/T5Stack[decoder]/T5Block[0]_2 is not contiguous!
Partition16 output:T5ForConditionalGeneration/T5Stack[decoder]/tuple::__getitem___130_17 is not contiguous!
Partition16 output:T5ForConditionalGeneration/T5Stack[decoder]/tuple::__getitem___132_17 is not contiguous!
Partition17 output:T5ForConditionalGeneration/T5Stack[decoder]/tuple::__getitem___130_18 is not contiguous!
Partition17 output:T5ForConditionalGeneration/T5Stack[decoder]/tuple::__getitem___132_18 is not contiguous!
Partition18 output:T5ForConditionalGeneration/T5Stack[decoder]/tuple::__getitem___130_19 is not contiguous!
Partition18 output:T5ForConditionalGeneration/T5Stack[decoder]/tuple::__getitem___132_19 is not contiguous!
Partition19 output:T5ForConditionalGeneration/T5Stack[decoder]/tuple::__getitem___130_20 is not contiguous!
Partition19 output:T5ForConditionalGeneration/T5Stack[decoder]/tuple::__getitem___132_20 is not contiguous!
Number of stages: 8
n_partitions:22, num_dummy_stages:14
unique_stages_on_same_gpu: [{13, 21}, {0, 1, 12, 15}, {2, 3, 5, 6, 14}, {18, 4, 7}, {8, 20}, {9, 19}, {17, 10}, {16, 11}]
backward times include recomputation

Stage parameter count:
 {0: 32899072,
 1: 0,
 2: 0,
 3: 0,
 4: 50334720,
 5: 0,
 6: 0,
 7: 100667392,
 8: 151001088,
 9: 151001088,
 10: 151001088,
 11: 151001088,
 12: 151001088,
 13: 151001088,
 14: 151002112,
 15: 67113984,
 16: 201335808,
 17: 335559680,
 18: 335559680,
 19: 335559680,
 20: 335559680,
 21: 32900096,
 'total': 2884498432}

GPU parameter count:
 {0: 251014144,
 2: 151002112,
 4: 486561792,
 8: 486560768,
 9: 486560768,
 10: 486560768,
 11: 352336896,
 13: 183901184,
 'total': 2884498432}

real times are based on real measurements of execution time (with communication) of generated partitions ms
forward {0: 75.92, 2: 71.64, 4: 87.48, 8: 83.72, 9: 84.58, 10: 84.5, 11: 74.95, 13: 59.96}
backward {0: 195.08, 2: 184.1, 4: 240.74, 8: 241.16, 9: 240.95, 10: 241.07, 11: 210.81, 13: 171.05}

Assuming bandwidth of 12 GBps between GPUs

communication volumes size of activations of each partition
0: input size:'165.17 MB', recieve_time:'13.76 ms', out:'167.31 MB', send time:'13.94 ms'
2: input size:'181.97 MB', recieve_time:'15.16 ms', out:'173.54 MB', send time:'14.46 ms'
4: input size:'43.61 MB', recieve_time:'3.63 ms', out:'60.36 MB', send time:'5.03 ms'
8: input size:'35.21 MB', recieve_time:'2.93 ms', out:'25.69 MB', send time:'2.14 ms'
9: input size:'35.21 MB', recieve_time:'2.93 ms', out:'35.19 MB', send time:'2.93 ms'
10: input size:'35.21 MB', recieve_time:'2.93 ms', out:'35.19 MB', send time:'2.93 ms'
11: input size:'35.74 MB', recieve_time:'2.98 ms', out:'35.19 MB', send time:'2.93 ms'
13: input size:'25.70 MB', recieve_time:'2.14 ms', out:'25.17 MB', send time:'2.10 ms'

Compuatation Communication ratio (comp/(comp+comm)):
forward {0: 0.82, 2: 0.8, 4: 0.94, 8: 0.97, 9: 0.97, 10: 0.97, 11: 0.96, 13: 0.97} 
backward {0: 0.93, 2: 0.92, 4: 0.98, 8: 0.99, 9: 0.99, 10: 0.99, 11: 0.99, 13: 0.99}

Analysis for T = fwd + bwd:
 {'expected_compute_utilization': {0: 0.76,
                                  2: 0.71,
                                  4: 1.0,
                                  8: 1.0,
                                  9: 1.0,
                                  10: 1.0,
                                  11: 0.88,
                                  13: 0.71},
 'pipeline_no_comm': {0: 243.29,
                      2: 226.12,
                      4: 319.55,
                      8: 319.8,
                      9: 319.67,
                      10: 319.7,
                      11: 279.85,
                      13: 226.77,
                      'worstcase': 319.8},
 'pipeline_vs_seq_no_comm': 5.31,
 'pipeline_with_non_parallel_comm': {0: 271.0,
                                     2: 255.74,
                                     4: 328.21,
                                     8: 324.87,
                                     9: 325.53,
                                     10: 325.57,
                                     11: 285.76,
                                     13: 231.01,
                                     'worstcase': 328.21},
 'seq_no_comm_no_recomp': {0: 0.7,
                           1: 0.06,
                           2: 0.04,
                           3: 1.78,
                           4: 57.24,
                           5: 0.3,
                           6: 0.3,
                           7: 111.54,
                           8: 166.79,
                           9: 166.7,
                           10: 166.71,
                           11: 166.67,
                           12: 166.59,
                           13: 166.82,
                           14: 167.45,
                           15: 15.26,
                           16: 44.41,
                           17: 73.81,
                           18: 74.1,
                           19: 74.03,
                           20: 73.95,
                           21: 2.86}}

Analysis for T = (1-R)fwd + R*bwd:

Pipeline Slowdown: (compared to sequential executation with no communication, and same recompute policy)
forward 1.214
backward 1.149

Expected utilization by partition
forward {0: 0.71, 2: 0.65, 4: 0.94, 8: 0.94, 9: 0.94, 10: 0.94, 11: 0.83, 13: 0.67}
backward {0: 0.75, 2: 0.7, 4: 0.98, 8: 0.99, 9: 0.99, 10: 0.99, 11: 0.86, 13: 0.7}

worstcase: bwd: 241.156 fwd: 87.478
expected_speedup_compared_to_seq_no_recomp_no_comm: 5.167
Expected speedup for 8 partitions is: 6.857
max cuda memory used 2.72GB
"""