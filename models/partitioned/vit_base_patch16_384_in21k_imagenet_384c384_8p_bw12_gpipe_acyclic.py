"""AutoGenerated with:
python /home/saareliad/workspace/FTPipe/autopipe/partition.py vision --model vit_base_patch16_384_in21k_imagenet_384 --crop 384 --n_partitions 8 --partitioning_batch_size 32 --analysis_batch_size 32 --n_iter 10 -c tmp_profiles_gpipe_base --save_memory_mode --bwd_to_fwd_ratio -1 --auto_infer_node_bwd_to_fwd_ratio --trace_on_gpu --partitioning_method ACYCLIC --multilevel
"""
import torch.functional
import torch
import torch.nn.functional
from torch import Tensor
import torch.nn as nn
from itertools import chain
from typing import Optional, Tuple, Iterator, Iterable, OrderedDict, Dict
import collections

from typing import Type
from torch.nn.modules.normalization import LayerNorm
from torch.nn.modules.conv import Conv2d
from torch.nn.modules.activation import GELU
from torch.nn.modules.linear import Linear
from torch.nn.modules.dropout import Dropout
from torch.nn.modules.linear import Identity
# this is an auto generated file do not edit unless you know what you are doing


# partition adjacency
# model inputs {0}
# partition 0 {'inputs': {'input0'}, 'outputs': {1}}
# partition 1 {'inputs': {0}, 'outputs': {2}}
# partition 2 {'inputs': {1}, 'outputs': {3}}
# partition 3 {'inputs': {2}, 'outputs': {4}}
# partition 4 {'inputs': {3}, 'outputs': {5}}
# partition 5 {'inputs': {4}, 'outputs': {6}}
# partition 6 {'inputs': {5}, 'outputs': {7}}
# partition 7 {'inputs': {6}, 'outputs': {'output'}}
# model outputs {7}


def create_pipeline_configuration(DEBUG=False, batch_size=32):
    config = {
        'batch_dim': 0,
        'depth': 10000,
        'basic_blocks': (LayerNorm,Conv2d,GELU,Linear,Dropout,Identity),
        'model_inputs': {
            'input0': {
                'shape': torch.Size([32, 3, 384, 384]),
                'dtype': torch.float32,
                'is_batched': True,
                'used_by': [0]}},
        'model_outputs': {
            'VisionTransformer/Linear[head]': {
                'shape': torch.Size([32, 1000]),
                'dtype': torch.float32,
                'is_batched': True,
                'created_by': 7}},
        'stages': {
            0: {
                'stage_cls': Partition0,
                'inputs': {
                    'input0': {
                        'shape': torch.Size([32, 3, 384, 384]),
                        'dtype': torch.float32,
                        'req_grad': False,
                        'is_batched': True,
                        'created_by': -1}},
                'outputs': {
                    'VisionTransformer/ModuleList[blocks]/Block[0]/Tensor::__add___73': {
                        'shape': torch.Size([32, 577, 768]),
                        'dtype': torch.float32,
                        'req_grad': True,
                        'is_batched': True,
                        'used_by': [1]},
                    'VisionTransformer/ModuleList[blocks]/Block[1]/Attention[attn]/Size::__getitem___78': {
                        'shape': None,
                        'dtype': int,
                        'req_grad': False,
                        'is_batched': False,
                        'used_by': [1]},
                    'VisionTransformer/ModuleList[blocks]/Block[1]/Attention[attn]/Size::__getitem___80': {
                        'shape': None,
                        'dtype': int,
                        'req_grad': False,
                        'is_batched': False,
                        'used_by': [1]},
                    'VisionTransformer/ModuleList[blocks]/Block[1]/Attention[attn]/Size::__getitem___82': {
                        'shape': None,
                        'dtype': int,
                        'req_grad': False,
                        'is_batched': False,
                        'used_by': [1]},
                    'VisionTransformer/ModuleList[blocks]/Block[1]/Attention[attn]/Tensor::__matmul___110': {
                        'shape': torch.Size([32, 12, 577, 64]),
                        'dtype': torch.float32,
                        'req_grad': True,
                        'is_batched': True,
                        'used_by': [1]}},
                'devices': ['cpu' if DEBUG else 'cuda:0'],
                'stage_depth': 7},
            1: {
                'stage_cls': Partition1,
                'inputs': {
                    'VisionTransformer/ModuleList[blocks]/Block[0]/Tensor::__add___73': {
                        'shape': torch.Size([32, 577, 768]),
                        'dtype': torch.float32,
                        'req_grad': True,
                        'is_batched': True,
                        'created_by': 0},
                    'VisionTransformer/ModuleList[blocks]/Block[1]/Attention[attn]/Size::__getitem___78': {
                        'shape': None,
                        'dtype': int,
                        'req_grad': False,
                        'is_batched': False,
                        'created_by': 0},
                    'VisionTransformer/ModuleList[blocks]/Block[1]/Attention[attn]/Size::__getitem___80': {
                        'shape': None,
                        'dtype': int,
                        'req_grad': False,
                        'is_batched': False,
                        'created_by': 0},
                    'VisionTransformer/ModuleList[blocks]/Block[1]/Attention[attn]/Size::__getitem___82': {
                        'shape': None,
                        'dtype': int,
                        'req_grad': False,
                        'is_batched': False,
                        'created_by': 0},
                    'VisionTransformer/ModuleList[blocks]/Block[1]/Attention[attn]/Tensor::__matmul___110': {
                        'shape': torch.Size([32, 12, 577, 64]),
                        'dtype': torch.float32,
                        'req_grad': True,
                        'is_batched': True,
                        'created_by': 0}},
                'outputs': {
                    'VisionTransformer/ModuleList[blocks]/Block[2]/Tensor::__add___171': {
                        'shape': torch.Size([32, 577, 768]),
                        'dtype': torch.float32,
                        'req_grad': True,
                        'is_batched': True,
                        'used_by': [2]},
                    'VisionTransformer/ModuleList[blocks]/Block[2]/Mlp[mlp]/Linear[fc2]': {
                        'shape': torch.Size([32, 577, 768]),
                        'dtype': torch.float32,
                        'req_grad': True,
                        'is_batched': True,
                        'used_by': [2]}},
                'devices': ['cpu' if DEBUG else 'cuda:1'],
                'stage_depth': 6},
            2: {
                'stage_cls': Partition2,
                'inputs': {
                    'VisionTransformer/ModuleList[blocks]/Block[2]/Tensor::__add___171': {
                        'shape': torch.Size([32, 577, 768]),
                        'dtype': torch.float32,
                        'req_grad': True,
                        'is_batched': True,
                        'created_by': 1},
                    'VisionTransformer/ModuleList[blocks]/Block[2]/Mlp[mlp]/Linear[fc2]': {
                        'shape': torch.Size([32, 577, 768]),
                        'dtype': torch.float32,
                        'req_grad': True,
                        'is_batched': True,
                        'created_by': 1}},
                'outputs': {
                    'VisionTransformer/ModuleList[blocks]/Block[3]/Tensor::__add___232': {
                        'shape': torch.Size([32, 577, 768]),
                        'dtype': torch.float32,
                        'req_grad': True,
                        'is_batched': True,
                        'used_by': [3]},
                    'VisionTransformer/ModuleList[blocks]/Block[4]/Attention[attn]/Tensor::reshape_273': {
                        'shape': torch.Size([32, 577, 768]),
                        'dtype': torch.float32,
                        'req_grad': True,
                        'is_batched': True,
                        'used_by': [3]}},
                'devices': ['cpu' if DEBUG else 'cuda:2'],
                'stage_depth': 5},
            3: {
                'stage_cls': Partition3,
                'inputs': {
                    'VisionTransformer/ModuleList[blocks]/Block[3]/Tensor::__add___232': {
                        'shape': torch.Size([32, 577, 768]),
                        'dtype': torch.float32,
                        'req_grad': True,
                        'is_batched': True,
                        'created_by': 2},
                    'VisionTransformer/ModuleList[blocks]/Block[4]/Attention[attn]/Tensor::reshape_273': {
                        'shape': torch.Size([32, 577, 768]),
                        'dtype': torch.float32,
                        'req_grad': True,
                        'is_batched': True,
                        'created_by': 2}},
                'outputs': {
                    'VisionTransformer/ModuleList[blocks]/Block[5]/Tensor::__add___330': {
                        'shape': torch.Size([32, 577, 768]),
                        'dtype': torch.float32,
                        'req_grad': True,
                        'is_batched': True,
                        'used_by': [4]},
                    'VisionTransformer/ModuleList[blocks]/Block[5]/Mlp[mlp]/Linear[fc2]': {
                        'shape': torch.Size([32, 577, 768]),
                        'dtype': torch.float32,
                        'req_grad': True,
                        'is_batched': True,
                        'used_by': [4]}},
                'devices': ['cpu' if DEBUG else 'cuda:3'],
                'stage_depth': 4},
            4: {
                'stage_cls': Partition4,
                'inputs': {
                    'VisionTransformer/ModuleList[blocks]/Block[5]/Tensor::__add___330': {
                        'shape': torch.Size([32, 577, 768]),
                        'dtype': torch.float32,
                        'req_grad': True,
                        'is_batched': True,
                        'created_by': 3},
                    'VisionTransformer/ModuleList[blocks]/Block[5]/Mlp[mlp]/Linear[fc2]': {
                        'shape': torch.Size([32, 577, 768]),
                        'dtype': torch.float32,
                        'req_grad': True,
                        'is_batched': True,
                        'created_by': 3}},
                'outputs': {
                    'VisionTransformer/ModuleList[blocks]/Block[6]/Tensor::__add___391': {
                        'shape': torch.Size([32, 577, 768]),
                        'dtype': torch.float32,
                        'req_grad': True,
                        'is_batched': True,
                        'used_by': [5]},
                    'VisionTransformer/ModuleList[blocks]/Block[7]/Attention[attn]/Tensor::reshape_432': {
                        'shape': torch.Size([32, 577, 768]),
                        'dtype': torch.float32,
                        'req_grad': True,
                        'is_batched': True,
                        'used_by': [5]}},
                'devices': ['cpu' if DEBUG else 'cuda:4'],
                'stage_depth': 3},
            5: {
                'stage_cls': Partition5,
                'inputs': {
                    'VisionTransformer/ModuleList[blocks]/Block[6]/Tensor::__add___391': {
                        'shape': torch.Size([32, 577, 768]),
                        'dtype': torch.float32,
                        'req_grad': True,
                        'is_batched': True,
                        'created_by': 4},
                    'VisionTransformer/ModuleList[blocks]/Block[7]/Attention[attn]/Tensor::reshape_432': {
                        'shape': torch.Size([32, 577, 768]),
                        'dtype': torch.float32,
                        'req_grad': True,
                        'is_batched': True,
                        'created_by': 4}},
                'outputs': {
                    'VisionTransformer/ModuleList[blocks]/Block[8]/Tensor::__add___497': {
                        'shape': torch.Size([32, 577, 768]),
                        'dtype': torch.float32,
                        'req_grad': True,
                        'is_batched': True,
                        'used_by': [6]},
                    'VisionTransformer/ModuleList[blocks]/Block[9]/LayerNorm[norm1]': {
                        'shape': torch.Size([32, 577, 768]),
                        'dtype': torch.float32,
                        'req_grad': True,
                        'is_batched': True,
                        'used_by': [6]}},
                'devices': ['cpu' if DEBUG else 'cuda:5'],
                'stage_depth': 2},
            6: {
                'stage_cls': Partition6,
                'inputs': {
                    'VisionTransformer/ModuleList[blocks]/Block[8]/Tensor::__add___497': {
                        'shape': torch.Size([32, 577, 768]),
                        'dtype': torch.float32,
                        'req_grad': True,
                        'is_batched': True,
                        'created_by': 5},
                    'VisionTransformer/ModuleList[blocks]/Block[9]/LayerNorm[norm1]': {
                        'shape': torch.Size([32, 577, 768]),
                        'dtype': torch.float32,
                        'req_grad': True,
                        'is_batched': True,
                        'created_by': 5}},
                'outputs': {
                    'VisionTransformer/ModuleList[blocks]/Block[9]/Tensor::__add___550': {
                        'shape': torch.Size([32, 577, 768]),
                        'dtype': torch.float32,
                        'req_grad': True,
                        'is_batched': True,
                        'used_by': [7]},
                    'VisionTransformer/ModuleList[blocks]/Block[10]/Attention[attn]/Linear[proj]': {
                        'shape': torch.Size([32, 577, 768]),
                        'dtype': torch.float32,
                        'req_grad': True,
                        'is_batched': True,
                        'used_by': [7]}},
                'devices': ['cpu' if DEBUG else 'cuda:6'],
                'stage_depth': 1},
            7: {
                'stage_cls': Partition7,
                'inputs': {
                    'VisionTransformer/ModuleList[blocks]/Block[9]/Tensor::__add___550': {
                        'shape': torch.Size([32, 577, 768]),
                        'dtype': torch.float32,
                        'req_grad': True,
                        'is_batched': True,
                        'created_by': 6},
                    'VisionTransformer/ModuleList[blocks]/Block[10]/Attention[attn]/Linear[proj]': {
                        'shape': torch.Size([32, 577, 768]),
                        'dtype': torch.float32,
                        'req_grad': True,
                        'is_batched': True,
                        'created_by': 6}},
                'outputs': {
                    'VisionTransformer/Linear[head]': {
                        'shape': torch.Size([32, 1000]),
                        'dtype': torch.float32,
                        'req_grad': True,
                        'is_batched': True,
                        'used_by': [-1]}},
                'devices': ['cpu' if DEBUG else 'cuda:7'],
                'stage_depth': 0}}}
    
    
    # switching batch size
    batch_dim = config['batch_dim']
    for d in chain(config['model_inputs'].values(),config['model_outputs'].values()):
        if d['is_batched']:
            shape = d['shape']
            d['shape'] = torch.Size(shape[:batch_dim] + (batch_size,) + shape[batch_dim+1:])
    
    for s in config['stages'].values():
        for d in chain(s['inputs'].values(),s['outputs'].values()):
            if d['is_batched']:
                shape = d['shape']
                d['shape'] = torch.Size(shape[:batch_dim] + (batch_size,) + shape[batch_dim+1:])
    
    return config

class Partition0(nn.Module):
    LAYER_SCOPES = [
            'VisionTransformer/PatchEmbed[patch_embed]/Conv2d[proj]',
            'VisionTransformer/Dropout[pos_drop]',
            'VisionTransformer/ModuleList[blocks]/Block[0]/LayerNorm[norm1]',
            'VisionTransformer/ModuleList[blocks]/Block[0]/Attention[attn]/Linear[qkv]',
            'VisionTransformer/ModuleList[blocks]/Block[0]/Attention[attn]/Dropout[attn_drop]',
            'VisionTransformer/ModuleList[blocks]/Block[0]/Attention[attn]/Linear[proj]',
            'VisionTransformer/ModuleList[blocks]/Block[0]/Attention[attn]/Dropout[proj_drop]',
            'VisionTransformer/ModuleList[blocks]/Block[0]/Identity[drop_path]',
            'VisionTransformer/ModuleList[blocks]/Block[0]/LayerNorm[norm2]',
            'VisionTransformer/ModuleList[blocks]/Block[0]/Mlp[mlp]/Linear[fc1]',
            'VisionTransformer/ModuleList[blocks]/Block[0]/Mlp[mlp]/GELU[act]',
            'VisionTransformer/ModuleList[blocks]/Block[0]/Mlp[mlp]/Dropout[drop]',
            'VisionTransformer/ModuleList[blocks]/Block[0]/Mlp[mlp]/Linear[fc2]',
            'VisionTransformer/ModuleList[blocks]/Block[0]/Mlp[mlp]/Dropout[drop]',
            'VisionTransformer/ModuleList[blocks]/Block[0]/Identity[drop_path]',
            'VisionTransformer/ModuleList[blocks]/Block[1]/LayerNorm[norm1]',
            'VisionTransformer/ModuleList[blocks]/Block[1]/Attention[attn]/Linear[qkv]',
            'VisionTransformer/ModuleList[blocks]/Block[1]/Attention[attn]/Dropout[attn_drop]',
        ]
    TENSORS = [
            'VisionTransformer/Parameter[cls_token]',
            'VisionTransformer/Parameter[pos_embed]',
        ]
    def __init__(self, layers, tensors, device='cuda:0'):
        super().__init__()

        # Initialize partition layers
        for idx, layer_scope in enumerate(self.LAYER_SCOPES):
            self.add_module(f'l_{idx}' ,layers[layer_scope])

        # Initialize partition tensors (params and buffs)
        b = p = 0
        for tensor_scope in self.TENSORS:
            tensor = tensors[tensor_scope]
            if isinstance(tensor, nn.Parameter):
                self.register_parameter(f'p_{p}', tensor)
                p += 1
            else:
                self.register_buffer(f'b_{b}', tensor)
                b += 1

        self.device = torch.device(device)
        self.input_structure = [1]
        self.lookup = {'l_0': 'patch_embed.proj',
                        'l_1': 'pos_drop',
                        'l_2': 'blocks.0.norm1',
                        'l_3': 'blocks.0.attn.qkv',
                        'l_4': 'blocks.0.attn.attn_drop',
                        'l_5': 'blocks.0.attn.proj',
                        'l_6': 'blocks.0.attn.proj_drop',
                        'l_7': 'blocks.0.drop_path',
                        'l_8': 'blocks.0.norm2',
                        'l_9': 'blocks.0.mlp.fc1',
                        'l_10': 'blocks.0.mlp.act',
                        'l_11': 'blocks.0.mlp.drop',
                        'l_12': 'blocks.0.mlp.fc2',
                        'l_13': 'blocks.0.mlp.drop',
                        'l_14': 'blocks.0.drop_path',
                        'l_15': 'blocks.1.norm1',
                        'l_16': 'blocks.1.attn.qkv',
                        'l_17': 'blocks.1.attn.attn_drop',
                        'p_0': 'cls_token',
                        'p_1': 'pos_embed'}
        self.to(self.device)

    def forward(self, *args):
        # VisionTransformer/PatchEmbed[patch_embed]/Conv2d[proj] <=> self.l_0
        # VisionTransformer/Dropout[pos_drop] <=> self.l_1
        # VisionTransformer/ModuleList[blocks]/Block[0]/LayerNorm[norm1] <=> self.l_2
        # VisionTransformer/ModuleList[blocks]/Block[0]/Attention[attn]/Linear[qkv] <=> self.l_3
        # VisionTransformer/ModuleList[blocks]/Block[0]/Attention[attn]/Dropout[attn_drop] <=> self.l_4
        # VisionTransformer/ModuleList[blocks]/Block[0]/Attention[attn]/Linear[proj] <=> self.l_5
        # VisionTransformer/ModuleList[blocks]/Block[0]/Attention[attn]/Dropout[proj_drop] <=> self.l_6
        # VisionTransformer/ModuleList[blocks]/Block[0]/Identity[drop_path] <=> self.l_7
        # VisionTransformer/ModuleList[blocks]/Block[0]/LayerNorm[norm2] <=> self.l_8
        # VisionTransformer/ModuleList[blocks]/Block[0]/Mlp[mlp]/Linear[fc1] <=> self.l_9
        # VisionTransformer/ModuleList[blocks]/Block[0]/Mlp[mlp]/GELU[act] <=> self.l_10
        # VisionTransformer/ModuleList[blocks]/Block[0]/Mlp[mlp]/Dropout[drop] <=> self.l_11
        # VisionTransformer/ModuleList[blocks]/Block[0]/Mlp[mlp]/Linear[fc2] <=> self.l_12
        # VisionTransformer/ModuleList[blocks]/Block[0]/Mlp[mlp]/Dropout[drop] <=> self.l_13
        # VisionTransformer/ModuleList[blocks]/Block[0]/Identity[drop_path] <=> self.l_14
        # VisionTransformer/ModuleList[blocks]/Block[1]/LayerNorm[norm1] <=> self.l_15
        # VisionTransformer/ModuleList[blocks]/Block[1]/Attention[attn]/Linear[qkv] <=> self.l_16
        # VisionTransformer/ModuleList[blocks]/Block[1]/Attention[attn]/Dropout[attn_drop] <=> self.l_17
        # VisionTransformer/Parameter[cls_token] <=> self.p_0
        # VisionTransformer/Parameter[pos_embed] <=> self.p_1
        # input0 <=> x0
        x0 = unflatten(args,self.input_structure)[0]
        t_0 = x0.shape
        t_0 = t_0[0]
        t_1 = self.l_0(x0)
        t_1 = t_1.flatten(2)
        t_1 = t_1.transpose(1, 2)
        t_0 = self.p_0.expand(t_0, -1, -1)
        t_1 = (t_0, t_1)
        t_1 = torch.cat(t_1, dim=1)
        t_1 = t_1 + self.p_1
        t_1 = self.l_1(t_1)
        t_0 = self.l_2(t_1)
        t_2 = t_0.shape
        t_3 = t_2[0]
        t_4 = t_2[1]
        t_2 = t_2[2]
        t_0 = self.l_3(t_0)
        t_5 = t_2 // 12
        t_5 = t_0.reshape(t_3, t_4, 3, 12, t_5)
        t_5 = t_5.permute(2, 0, 3, 1, 4)
        t_0 = t_5[0]
        t_6 = t_5[1]
        t_5 = t_5[2]
        t_6 = t_6.transpose(-2, -1)
        t_6 = t_0 @ t_6
        t_6 = t_6 * 0.125
        t_6 = t_6.softmax(dim=-1)
        t_6 = self.l_4(t_6)
        t_5 = t_6 @ t_5
        t_5 = t_5.transpose(1, 2)
        t_2 = t_5.reshape(t_3, t_4, t_2)
        t_2 = self.l_5(t_2)
        t_2 = self.l_6(t_2)
        t_2 = self.l_7(t_2)
        t_2 = t_1 + t_2
        t_1 = self.l_8(t_2)
        t_1 = self.l_9(t_1)
        t_1 = self.l_10(t_1)
        t_1 = self.l_11(t_1)
        t_1 = self.l_12(t_1)
        t_1 = self.l_13(t_1)
        t_1 = self.l_14(t_1)
        t_1 = t_2 + t_1
        t_2 = self.l_15(t_1)
        t_4 = t_2.shape
        t_3 = t_4[0]
        t_5 = t_4[1]
        t_4 = t_4[2]
        t_2 = self.l_16(t_2)
        t_6 = t_4 // 12
        t_6 = t_2.reshape(t_3, t_5, 3, 12, t_6)
        t_6 = t_6.permute(2, 0, 3, 1, 4)
        t_2 = t_6[0]
        t_0 = t_6[1]
        t_6 = t_6[2]
        t_0 = t_0.transpose(-2, -1)
        t_0 = t_2 @ t_0
        t_0 = t_0 * 0.125
        t_0 = t_0.softmax(dim=-1)
        t_0 = self.l_17(t_0)
        t_6 = t_0 @ t_6
        # Returning:
        # VisionTransformer/ModuleList[blocks]/Block[0]/Tensor::__add___73
        # VisionTransformer/ModuleList[blocks]/Block[1]/Attention[attn]/Size::__getitem___78
        # VisionTransformer/ModuleList[blocks]/Block[1]/Attention[attn]/Size::__getitem___80
        # VisionTransformer/ModuleList[blocks]/Block[1]/Attention[attn]/Size::__getitem___82
        # VisionTransformer/ModuleList[blocks]/Block[1]/Attention[attn]/Tensor::__matmul___110
        return list(flatten((t_1, t_3, t_5, t_4, t_6)))

    def state_dict(self, *args, **kwargs):
        # we return the state dict of this part as it should be in the original model
        return state_dict(self, *args, **kwargs)

    def load_state_dict(self, state):
        return load_state_dict(self, state)

    def named_parameters(self, recurse=True):
        # we return the named parameters of this part as it should be in the original model
        return named_parameters(self, recurse=recurse)

    def named_buffers(self, recurse=True):
        # we return the named buffers of this part as it should be in the original model
        return named_buffers(self, recurse=recurse)

    def cpu(self):
        return cpu(self)

    def cuda(self, device=None):
        return cuda(self, device=device)

    def to(self, *args, **kwargs):
        return to(self, *args, **kwargs)


class Partition1(nn.Module):
    LAYER_SCOPES = [
            'VisionTransformer/ModuleList[blocks]/Block[1]/Attention[attn]/Linear[proj]',
            'VisionTransformer/ModuleList[blocks]/Block[1]/Attention[attn]/Dropout[proj_drop]',
            'VisionTransformer/ModuleList[blocks]/Block[1]/Identity[drop_path]',
            'VisionTransformer/ModuleList[blocks]/Block[1]/LayerNorm[norm2]',
            'VisionTransformer/ModuleList[blocks]/Block[1]/Mlp[mlp]/Linear[fc1]',
            'VisionTransformer/ModuleList[blocks]/Block[1]/Mlp[mlp]/GELU[act]',
            'VisionTransformer/ModuleList[blocks]/Block[1]/Mlp[mlp]/Dropout[drop]',
            'VisionTransformer/ModuleList[blocks]/Block[1]/Mlp[mlp]/Linear[fc2]',
            'VisionTransformer/ModuleList[blocks]/Block[1]/Mlp[mlp]/Dropout[drop]',
            'VisionTransformer/ModuleList[blocks]/Block[1]/Identity[drop_path]',
            'VisionTransformer/ModuleList[blocks]/Block[2]/LayerNorm[norm1]',
            'VisionTransformer/ModuleList[blocks]/Block[2]/Attention[attn]/Linear[qkv]',
            'VisionTransformer/ModuleList[blocks]/Block[2]/Attention[attn]/Dropout[attn_drop]',
            'VisionTransformer/ModuleList[blocks]/Block[2]/Attention[attn]/Linear[proj]',
            'VisionTransformer/ModuleList[blocks]/Block[2]/Attention[attn]/Dropout[proj_drop]',
            'VisionTransformer/ModuleList[blocks]/Block[2]/Identity[drop_path]',
            'VisionTransformer/ModuleList[blocks]/Block[2]/LayerNorm[norm2]',
            'VisionTransformer/ModuleList[blocks]/Block[2]/Mlp[mlp]/Linear[fc1]',
            'VisionTransformer/ModuleList[blocks]/Block[2]/Mlp[mlp]/GELU[act]',
            'VisionTransformer/ModuleList[blocks]/Block[2]/Mlp[mlp]/Dropout[drop]',
            'VisionTransformer/ModuleList[blocks]/Block[2]/Mlp[mlp]/Linear[fc2]',
        ]
    TENSORS = [
        ]
    def __init__(self, layers, tensors, device='cuda:1'):
        super().__init__()

        # Initialize partition layers
        for idx, layer_scope in enumerate(self.LAYER_SCOPES):
            self.add_module(f'l_{idx}' ,layers[layer_scope])

        # Initialize partition tensors (params and buffs)
        b = p = 0
        for tensor_scope in self.TENSORS:
            tensor = tensors[tensor_scope]
            if isinstance(tensor, nn.Parameter):
                self.register_parameter(f'p_{p}', tensor)
                p += 1
            else:
                self.register_buffer(f'b_{b}', tensor)
                b += 1

        self.device = torch.device(device)
        self.input_structure = [1, 1, 1, 1, 1]
        self.lookup = {'l_0': 'blocks.1.attn.proj',
                        'l_1': 'blocks.1.attn.proj_drop',
                        'l_2': 'blocks.1.drop_path',
                        'l_3': 'blocks.1.norm2',
                        'l_4': 'blocks.1.mlp.fc1',
                        'l_5': 'blocks.1.mlp.act',
                        'l_6': 'blocks.1.mlp.drop',
                        'l_7': 'blocks.1.mlp.fc2',
                        'l_8': 'blocks.1.mlp.drop',
                        'l_9': 'blocks.1.drop_path',
                        'l_10': 'blocks.2.norm1',
                        'l_11': 'blocks.2.attn.qkv',
                        'l_12': 'blocks.2.attn.attn_drop',
                        'l_13': 'blocks.2.attn.proj',
                        'l_14': 'blocks.2.attn.proj_drop',
                        'l_15': 'blocks.2.drop_path',
                        'l_16': 'blocks.2.norm2',
                        'l_17': 'blocks.2.mlp.fc1',
                        'l_18': 'blocks.2.mlp.act',
                        'l_19': 'blocks.2.mlp.drop',
                        'l_20': 'blocks.2.mlp.fc2'}
        self.to(self.device)

    def forward(self, *args):
        # VisionTransformer/ModuleList[blocks]/Block[1]/Attention[attn]/Linear[proj] <=> self.l_0
        # VisionTransformer/ModuleList[blocks]/Block[1]/Attention[attn]/Dropout[proj_drop] <=> self.l_1
        # VisionTransformer/ModuleList[blocks]/Block[1]/Identity[drop_path] <=> self.l_2
        # VisionTransformer/ModuleList[blocks]/Block[1]/LayerNorm[norm2] <=> self.l_3
        # VisionTransformer/ModuleList[blocks]/Block[1]/Mlp[mlp]/Linear[fc1] <=> self.l_4
        # VisionTransformer/ModuleList[blocks]/Block[1]/Mlp[mlp]/GELU[act] <=> self.l_5
        # VisionTransformer/ModuleList[blocks]/Block[1]/Mlp[mlp]/Dropout[drop] <=> self.l_6
        # VisionTransformer/ModuleList[blocks]/Block[1]/Mlp[mlp]/Linear[fc2] <=> self.l_7
        # VisionTransformer/ModuleList[blocks]/Block[1]/Mlp[mlp]/Dropout[drop] <=> self.l_8
        # VisionTransformer/ModuleList[blocks]/Block[1]/Identity[drop_path] <=> self.l_9
        # VisionTransformer/ModuleList[blocks]/Block[2]/LayerNorm[norm1] <=> self.l_10
        # VisionTransformer/ModuleList[blocks]/Block[2]/Attention[attn]/Linear[qkv] <=> self.l_11
        # VisionTransformer/ModuleList[blocks]/Block[2]/Attention[attn]/Dropout[attn_drop] <=> self.l_12
        # VisionTransformer/ModuleList[blocks]/Block[2]/Attention[attn]/Linear[proj] <=> self.l_13
        # VisionTransformer/ModuleList[blocks]/Block[2]/Attention[attn]/Dropout[proj_drop] <=> self.l_14
        # VisionTransformer/ModuleList[blocks]/Block[2]/Identity[drop_path] <=> self.l_15
        # VisionTransformer/ModuleList[blocks]/Block[2]/LayerNorm[norm2] <=> self.l_16
        # VisionTransformer/ModuleList[blocks]/Block[2]/Mlp[mlp]/Linear[fc1] <=> self.l_17
        # VisionTransformer/ModuleList[blocks]/Block[2]/Mlp[mlp]/GELU[act] <=> self.l_18
        # VisionTransformer/ModuleList[blocks]/Block[2]/Mlp[mlp]/Dropout[drop] <=> self.l_19
        # VisionTransformer/ModuleList[blocks]/Block[2]/Mlp[mlp]/Linear[fc2] <=> self.l_20
        # VisionTransformer/ModuleList[blocks]/Block[0]/Tensor::__add___73 <=> x0
        # VisionTransformer/ModuleList[blocks]/Block[1]/Attention[attn]/Size::__getitem___78 <=> x1
        # VisionTransformer/ModuleList[blocks]/Block[1]/Attention[attn]/Size::__getitem___80 <=> x2
        # VisionTransformer/ModuleList[blocks]/Block[1]/Attention[attn]/Size::__getitem___82 <=> x3
        # VisionTransformer/ModuleList[blocks]/Block[1]/Attention[attn]/Tensor::__matmul___110 <=> x4
        x0, x1, x2, x3, x4 = unflatten(args,self.input_structure)
        t_0 = x4.transpose(1, 2)
        t_0 = t_0.reshape(x1, x2, x3)
        t_0 = self.l_0(t_0)
        t_0 = self.l_1(t_0)
        t_0 = self.l_2(t_0)
        t_0 = x0 + t_0
        t_1 = self.l_3(t_0)
        t_1 = self.l_4(t_1)
        t_1 = self.l_5(t_1)
        t_1 = self.l_6(t_1)
        t_1 = self.l_7(t_1)
        t_1 = self.l_8(t_1)
        t_1 = self.l_9(t_1)
        t_1 = t_0 + t_1
        t_0 = self.l_10(t_1)
        t_2 = t_0.shape
        t_3 = t_2[0]
        t_4 = t_2[1]
        t_2 = t_2[2]
        t_0 = self.l_11(t_0)
        t_5 = t_2 // 12
        t_5 = t_0.reshape(t_3, t_4, 3, 12, t_5)
        t_5 = t_5.permute(2, 0, 3, 1, 4)
        t_0 = t_5[0]
        t_6 = t_5[1]
        t_5 = t_5[2]
        t_6 = t_6.transpose(-2, -1)
        t_6 = t_0 @ t_6
        t_6 = t_6 * 0.125
        t_6 = t_6.softmax(dim=-1)
        t_6 = self.l_12(t_6)
        t_5 = t_6 @ t_5
        t_5 = t_5.transpose(1, 2)
        t_2 = t_5.reshape(t_3, t_4, t_2)
        t_2 = self.l_13(t_2)
        t_2 = self.l_14(t_2)
        t_2 = self.l_15(t_2)
        t_2 = t_1 + t_2
        t_1 = self.l_16(t_2)
        t_1 = self.l_17(t_1)
        t_1 = self.l_18(t_1)
        t_1 = self.l_19(t_1)
        t_1 = self.l_20(t_1)
        # Returning:
        # VisionTransformer/ModuleList[blocks]/Block[2]/Tensor::__add___171
        # VisionTransformer/ModuleList[blocks]/Block[2]/Mlp[mlp]/Linear[fc2]
        return list(flatten((t_2, t_1)))

    def state_dict(self, *args, **kwargs):
        # we return the state dict of this part as it should be in the original model
        return state_dict(self, *args, **kwargs)

    def load_state_dict(self, state):
        return load_state_dict(self, state)

    def named_parameters(self, recurse=True):
        # we return the named parameters of this part as it should be in the original model
        return named_parameters(self, recurse=recurse)

    def named_buffers(self, recurse=True):
        # we return the named buffers of this part as it should be in the original model
        return named_buffers(self, recurse=recurse)

    def cpu(self):
        return cpu(self)

    def cuda(self, device=None):
        return cuda(self, device=device)

    def to(self, *args, **kwargs):
        return to(self, *args, **kwargs)


class Partition2(nn.Module):
    LAYER_SCOPES = [
            'VisionTransformer/ModuleList[blocks]/Block[2]/Mlp[mlp]/Dropout[drop]',
            'VisionTransformer/ModuleList[blocks]/Block[2]/Identity[drop_path]',
            'VisionTransformer/ModuleList[blocks]/Block[3]/LayerNorm[norm1]',
            'VisionTransformer/ModuleList[blocks]/Block[3]/Attention[attn]/Linear[qkv]',
            'VisionTransformer/ModuleList[blocks]/Block[3]/Attention[attn]/Dropout[attn_drop]',
            'VisionTransformer/ModuleList[blocks]/Block[3]/Attention[attn]/Linear[proj]',
            'VisionTransformer/ModuleList[blocks]/Block[3]/Attention[attn]/Dropout[proj_drop]',
            'VisionTransformer/ModuleList[blocks]/Block[3]/Identity[drop_path]',
            'VisionTransformer/ModuleList[blocks]/Block[3]/LayerNorm[norm2]',
            'VisionTransformer/ModuleList[blocks]/Block[3]/Mlp[mlp]/Linear[fc1]',
            'VisionTransformer/ModuleList[blocks]/Block[3]/Mlp[mlp]/GELU[act]',
            'VisionTransformer/ModuleList[blocks]/Block[3]/Mlp[mlp]/Dropout[drop]',
            'VisionTransformer/ModuleList[blocks]/Block[3]/Mlp[mlp]/Linear[fc2]',
            'VisionTransformer/ModuleList[blocks]/Block[3]/Mlp[mlp]/Dropout[drop]',
            'VisionTransformer/ModuleList[blocks]/Block[3]/Identity[drop_path]',
            'VisionTransformer/ModuleList[blocks]/Block[4]/LayerNorm[norm1]',
            'VisionTransformer/ModuleList[blocks]/Block[4]/Attention[attn]/Linear[qkv]',
            'VisionTransformer/ModuleList[blocks]/Block[4]/Attention[attn]/Dropout[attn_drop]',
        ]
    TENSORS = [
        ]
    def __init__(self, layers, tensors, device='cuda:2'):
        super().__init__()

        # Initialize partition layers
        for idx, layer_scope in enumerate(self.LAYER_SCOPES):
            self.add_module(f'l_{idx}' ,layers[layer_scope])

        # Initialize partition tensors (params and buffs)
        b = p = 0
        for tensor_scope in self.TENSORS:
            tensor = tensors[tensor_scope]
            if isinstance(tensor, nn.Parameter):
                self.register_parameter(f'p_{p}', tensor)
                p += 1
            else:
                self.register_buffer(f'b_{b}', tensor)
                b += 1

        self.device = torch.device(device)
        self.input_structure = [1, 1]
        self.lookup = {'l_0': 'blocks.2.mlp.drop',
                        'l_1': 'blocks.2.drop_path',
                        'l_2': 'blocks.3.norm1',
                        'l_3': 'blocks.3.attn.qkv',
                        'l_4': 'blocks.3.attn.attn_drop',
                        'l_5': 'blocks.3.attn.proj',
                        'l_6': 'blocks.3.attn.proj_drop',
                        'l_7': 'blocks.3.drop_path',
                        'l_8': 'blocks.3.norm2',
                        'l_9': 'blocks.3.mlp.fc1',
                        'l_10': 'blocks.3.mlp.act',
                        'l_11': 'blocks.3.mlp.drop',
                        'l_12': 'blocks.3.mlp.fc2',
                        'l_13': 'blocks.3.mlp.drop',
                        'l_14': 'blocks.3.drop_path',
                        'l_15': 'blocks.4.norm1',
                        'l_16': 'blocks.4.attn.qkv',
                        'l_17': 'blocks.4.attn.attn_drop'}
        self.to(self.device)

    def forward(self, *args):
        # VisionTransformer/ModuleList[blocks]/Block[2]/Mlp[mlp]/Dropout[drop] <=> self.l_0
        # VisionTransformer/ModuleList[blocks]/Block[2]/Identity[drop_path] <=> self.l_1
        # VisionTransformer/ModuleList[blocks]/Block[3]/LayerNorm[norm1] <=> self.l_2
        # VisionTransformer/ModuleList[blocks]/Block[3]/Attention[attn]/Linear[qkv] <=> self.l_3
        # VisionTransformer/ModuleList[blocks]/Block[3]/Attention[attn]/Dropout[attn_drop] <=> self.l_4
        # VisionTransformer/ModuleList[blocks]/Block[3]/Attention[attn]/Linear[proj] <=> self.l_5
        # VisionTransformer/ModuleList[blocks]/Block[3]/Attention[attn]/Dropout[proj_drop] <=> self.l_6
        # VisionTransformer/ModuleList[blocks]/Block[3]/Identity[drop_path] <=> self.l_7
        # VisionTransformer/ModuleList[blocks]/Block[3]/LayerNorm[norm2] <=> self.l_8
        # VisionTransformer/ModuleList[blocks]/Block[3]/Mlp[mlp]/Linear[fc1] <=> self.l_9
        # VisionTransformer/ModuleList[blocks]/Block[3]/Mlp[mlp]/GELU[act] <=> self.l_10
        # VisionTransformer/ModuleList[blocks]/Block[3]/Mlp[mlp]/Dropout[drop] <=> self.l_11
        # VisionTransformer/ModuleList[blocks]/Block[3]/Mlp[mlp]/Linear[fc2] <=> self.l_12
        # VisionTransformer/ModuleList[blocks]/Block[3]/Mlp[mlp]/Dropout[drop] <=> self.l_13
        # VisionTransformer/ModuleList[blocks]/Block[3]/Identity[drop_path] <=> self.l_14
        # VisionTransformer/ModuleList[blocks]/Block[4]/LayerNorm[norm1] <=> self.l_15
        # VisionTransformer/ModuleList[blocks]/Block[4]/Attention[attn]/Linear[qkv] <=> self.l_16
        # VisionTransformer/ModuleList[blocks]/Block[4]/Attention[attn]/Dropout[attn_drop] <=> self.l_17
        # VisionTransformer/ModuleList[blocks]/Block[2]/Tensor::__add___171 <=> x0
        # VisionTransformer/ModuleList[blocks]/Block[2]/Mlp[mlp]/Linear[fc2] <=> x1
        x0, x1 = unflatten(args,self.input_structure)
        t_0 = self.l_0(x1)
        t_0 = self.l_1(t_0)
        t_0 = x0 + t_0
        t_1 = self.l_2(t_0)
        t_2 = t_1.shape
        t_3 = t_2[0]
        t_4 = t_2[1]
        t_2 = t_2[2]
        t_1 = self.l_3(t_1)
        t_5 = t_2 // 12
        t_5 = t_1.reshape(t_3, t_4, 3, 12, t_5)
        t_5 = t_5.permute(2, 0, 3, 1, 4)
        t_1 = t_5[0]
        t_6 = t_5[1]
        t_5 = t_5[2]
        t_6 = t_6.transpose(-2, -1)
        t_6 = t_1 @ t_6
        t_6 = t_6 * 0.125
        t_6 = t_6.softmax(dim=-1)
        t_6 = self.l_4(t_6)
        t_5 = t_6 @ t_5
        t_5 = t_5.transpose(1, 2)
        t_2 = t_5.reshape(t_3, t_4, t_2)
        t_2 = self.l_5(t_2)
        t_2 = self.l_6(t_2)
        t_2 = self.l_7(t_2)
        t_2 = t_0 + t_2
        t_0 = self.l_8(t_2)
        t_0 = self.l_9(t_0)
        t_0 = self.l_10(t_0)
        t_0 = self.l_11(t_0)
        t_0 = self.l_12(t_0)
        t_0 = self.l_13(t_0)
        t_0 = self.l_14(t_0)
        t_0 = t_2 + t_0
        t_2 = self.l_15(t_0)
        t_4 = t_2.shape
        t_3 = t_4[0]
        t_5 = t_4[1]
        t_4 = t_4[2]
        t_2 = self.l_16(t_2)
        t_6 = t_4 // 12
        t_6 = t_2.reshape(t_3, t_5, 3, 12, t_6)
        t_6 = t_6.permute(2, 0, 3, 1, 4)
        t_2 = t_6[0]
        t_1 = t_6[1]
        t_6 = t_6[2]
        t_1 = t_1.transpose(-2, -1)
        t_1 = t_2 @ t_1
        t_1 = t_1 * 0.125
        t_1 = t_1.softmax(dim=-1)
        t_1 = self.l_17(t_1)
        t_6 = t_1 @ t_6
        t_6 = t_6.transpose(1, 2)
        t_4 = t_6.reshape(t_3, t_5, t_4)
        # Returning:
        # VisionTransformer/ModuleList[blocks]/Block[3]/Tensor::__add___232
        # VisionTransformer/ModuleList[blocks]/Block[4]/Attention[attn]/Tensor::reshape_273
        return list(flatten((t_0, t_4)))

    def state_dict(self, *args, **kwargs):
        # we return the state dict of this part as it should be in the original model
        return state_dict(self, *args, **kwargs)

    def load_state_dict(self, state):
        return load_state_dict(self, state)

    def named_parameters(self, recurse=True):
        # we return the named parameters of this part as it should be in the original model
        return named_parameters(self, recurse=recurse)

    def named_buffers(self, recurse=True):
        # we return the named buffers of this part as it should be in the original model
        return named_buffers(self, recurse=recurse)

    def cpu(self):
        return cpu(self)

    def cuda(self, device=None):
        return cuda(self, device=device)

    def to(self, *args, **kwargs):
        return to(self, *args, **kwargs)


class Partition3(nn.Module):
    LAYER_SCOPES = [
            'VisionTransformer/ModuleList[blocks]/Block[4]/Attention[attn]/Linear[proj]',
            'VisionTransformer/ModuleList[blocks]/Block[4]/Attention[attn]/Dropout[proj_drop]',
            'VisionTransformer/ModuleList[blocks]/Block[4]/Identity[drop_path]',
            'VisionTransformer/ModuleList[blocks]/Block[4]/LayerNorm[norm2]',
            'VisionTransformer/ModuleList[blocks]/Block[4]/Mlp[mlp]/Linear[fc1]',
            'VisionTransformer/ModuleList[blocks]/Block[4]/Mlp[mlp]/GELU[act]',
            'VisionTransformer/ModuleList[blocks]/Block[4]/Mlp[mlp]/Dropout[drop]',
            'VisionTransformer/ModuleList[blocks]/Block[4]/Mlp[mlp]/Linear[fc2]',
            'VisionTransformer/ModuleList[blocks]/Block[4]/Mlp[mlp]/Dropout[drop]',
            'VisionTransformer/ModuleList[blocks]/Block[4]/Identity[drop_path]',
            'VisionTransformer/ModuleList[blocks]/Block[5]/LayerNorm[norm1]',
            'VisionTransformer/ModuleList[blocks]/Block[5]/Attention[attn]/Linear[qkv]',
            'VisionTransformer/ModuleList[blocks]/Block[5]/Attention[attn]/Dropout[attn_drop]',
            'VisionTransformer/ModuleList[blocks]/Block[5]/Attention[attn]/Linear[proj]',
            'VisionTransformer/ModuleList[blocks]/Block[5]/Attention[attn]/Dropout[proj_drop]',
            'VisionTransformer/ModuleList[blocks]/Block[5]/Identity[drop_path]',
            'VisionTransformer/ModuleList[blocks]/Block[5]/LayerNorm[norm2]',
            'VisionTransformer/ModuleList[blocks]/Block[5]/Mlp[mlp]/Linear[fc1]',
            'VisionTransformer/ModuleList[blocks]/Block[5]/Mlp[mlp]/GELU[act]',
            'VisionTransformer/ModuleList[blocks]/Block[5]/Mlp[mlp]/Dropout[drop]',
            'VisionTransformer/ModuleList[blocks]/Block[5]/Mlp[mlp]/Linear[fc2]',
        ]
    TENSORS = [
        ]
    def __init__(self, layers, tensors, device='cuda:3'):
        super().__init__()

        # Initialize partition layers
        for idx, layer_scope in enumerate(self.LAYER_SCOPES):
            self.add_module(f'l_{idx}' ,layers[layer_scope])

        # Initialize partition tensors (params and buffs)
        b = p = 0
        for tensor_scope in self.TENSORS:
            tensor = tensors[tensor_scope]
            if isinstance(tensor, nn.Parameter):
                self.register_parameter(f'p_{p}', tensor)
                p += 1
            else:
                self.register_buffer(f'b_{b}', tensor)
                b += 1

        self.device = torch.device(device)
        self.input_structure = [1, 1]
        self.lookup = {'l_0': 'blocks.4.attn.proj',
                        'l_1': 'blocks.4.attn.proj_drop',
                        'l_2': 'blocks.4.drop_path',
                        'l_3': 'blocks.4.norm2',
                        'l_4': 'blocks.4.mlp.fc1',
                        'l_5': 'blocks.4.mlp.act',
                        'l_6': 'blocks.4.mlp.drop',
                        'l_7': 'blocks.4.mlp.fc2',
                        'l_8': 'blocks.4.mlp.drop',
                        'l_9': 'blocks.4.drop_path',
                        'l_10': 'blocks.5.norm1',
                        'l_11': 'blocks.5.attn.qkv',
                        'l_12': 'blocks.5.attn.attn_drop',
                        'l_13': 'blocks.5.attn.proj',
                        'l_14': 'blocks.5.attn.proj_drop',
                        'l_15': 'blocks.5.drop_path',
                        'l_16': 'blocks.5.norm2',
                        'l_17': 'blocks.5.mlp.fc1',
                        'l_18': 'blocks.5.mlp.act',
                        'l_19': 'blocks.5.mlp.drop',
                        'l_20': 'blocks.5.mlp.fc2'}
        self.to(self.device)

    def forward(self, *args):
        # VisionTransformer/ModuleList[blocks]/Block[4]/Attention[attn]/Linear[proj] <=> self.l_0
        # VisionTransformer/ModuleList[blocks]/Block[4]/Attention[attn]/Dropout[proj_drop] <=> self.l_1
        # VisionTransformer/ModuleList[blocks]/Block[4]/Identity[drop_path] <=> self.l_2
        # VisionTransformer/ModuleList[blocks]/Block[4]/LayerNorm[norm2] <=> self.l_3
        # VisionTransformer/ModuleList[blocks]/Block[4]/Mlp[mlp]/Linear[fc1] <=> self.l_4
        # VisionTransformer/ModuleList[blocks]/Block[4]/Mlp[mlp]/GELU[act] <=> self.l_5
        # VisionTransformer/ModuleList[blocks]/Block[4]/Mlp[mlp]/Dropout[drop] <=> self.l_6
        # VisionTransformer/ModuleList[blocks]/Block[4]/Mlp[mlp]/Linear[fc2] <=> self.l_7
        # VisionTransformer/ModuleList[blocks]/Block[4]/Mlp[mlp]/Dropout[drop] <=> self.l_8
        # VisionTransformer/ModuleList[blocks]/Block[4]/Identity[drop_path] <=> self.l_9
        # VisionTransformer/ModuleList[blocks]/Block[5]/LayerNorm[norm1] <=> self.l_10
        # VisionTransformer/ModuleList[blocks]/Block[5]/Attention[attn]/Linear[qkv] <=> self.l_11
        # VisionTransformer/ModuleList[blocks]/Block[5]/Attention[attn]/Dropout[attn_drop] <=> self.l_12
        # VisionTransformer/ModuleList[blocks]/Block[5]/Attention[attn]/Linear[proj] <=> self.l_13
        # VisionTransformer/ModuleList[blocks]/Block[5]/Attention[attn]/Dropout[proj_drop] <=> self.l_14
        # VisionTransformer/ModuleList[blocks]/Block[5]/Identity[drop_path] <=> self.l_15
        # VisionTransformer/ModuleList[blocks]/Block[5]/LayerNorm[norm2] <=> self.l_16
        # VisionTransformer/ModuleList[blocks]/Block[5]/Mlp[mlp]/Linear[fc1] <=> self.l_17
        # VisionTransformer/ModuleList[blocks]/Block[5]/Mlp[mlp]/GELU[act] <=> self.l_18
        # VisionTransformer/ModuleList[blocks]/Block[5]/Mlp[mlp]/Dropout[drop] <=> self.l_19
        # VisionTransformer/ModuleList[blocks]/Block[5]/Mlp[mlp]/Linear[fc2] <=> self.l_20
        # VisionTransformer/ModuleList[blocks]/Block[3]/Tensor::__add___232 <=> x0
        # VisionTransformer/ModuleList[blocks]/Block[4]/Attention[attn]/Tensor::reshape_273 <=> x1
        x0, x1 = unflatten(args,self.input_structure)
        t_0 = self.l_0(x1)
        t_0 = self.l_1(t_0)
        t_0 = self.l_2(t_0)
        t_0 = x0 + t_0
        t_1 = self.l_3(t_0)
        t_1 = self.l_4(t_1)
        t_1 = self.l_5(t_1)
        t_1 = self.l_6(t_1)
        t_1 = self.l_7(t_1)
        t_1 = self.l_8(t_1)
        t_1 = self.l_9(t_1)
        t_1 = t_0 + t_1
        t_0 = self.l_10(t_1)
        t_2 = t_0.shape
        t_3 = t_2[0]
        t_4 = t_2[1]
        t_2 = t_2[2]
        t_0 = self.l_11(t_0)
        t_5 = t_2 // 12
        t_5 = t_0.reshape(t_3, t_4, 3, 12, t_5)
        t_5 = t_5.permute(2, 0, 3, 1, 4)
        t_0 = t_5[0]
        t_6 = t_5[1]
        t_5 = t_5[2]
        t_6 = t_6.transpose(-2, -1)
        t_6 = t_0 @ t_6
        t_6 = t_6 * 0.125
        t_6 = t_6.softmax(dim=-1)
        t_6 = self.l_12(t_6)
        t_5 = t_6 @ t_5
        t_5 = t_5.transpose(1, 2)
        t_2 = t_5.reshape(t_3, t_4, t_2)
        t_2 = self.l_13(t_2)
        t_2 = self.l_14(t_2)
        t_2 = self.l_15(t_2)
        t_2 = t_1 + t_2
        t_1 = self.l_16(t_2)
        t_1 = self.l_17(t_1)
        t_1 = self.l_18(t_1)
        t_1 = self.l_19(t_1)
        t_1 = self.l_20(t_1)
        # Returning:
        # VisionTransformer/ModuleList[blocks]/Block[5]/Tensor::__add___330
        # VisionTransformer/ModuleList[blocks]/Block[5]/Mlp[mlp]/Linear[fc2]
        return list(flatten((t_2, t_1)))

    def state_dict(self, *args, **kwargs):
        # we return the state dict of this part as it should be in the original model
        return state_dict(self, *args, **kwargs)

    def load_state_dict(self, state):
        return load_state_dict(self, state)

    def named_parameters(self, recurse=True):
        # we return the named parameters of this part as it should be in the original model
        return named_parameters(self, recurse=recurse)

    def named_buffers(self, recurse=True):
        # we return the named buffers of this part as it should be in the original model
        return named_buffers(self, recurse=recurse)

    def cpu(self):
        return cpu(self)

    def cuda(self, device=None):
        return cuda(self, device=device)

    def to(self, *args, **kwargs):
        return to(self, *args, **kwargs)


class Partition4(nn.Module):
    LAYER_SCOPES = [
            'VisionTransformer/ModuleList[blocks]/Block[5]/Mlp[mlp]/Dropout[drop]',
            'VisionTransformer/ModuleList[blocks]/Block[5]/Identity[drop_path]',
            'VisionTransformer/ModuleList[blocks]/Block[6]/LayerNorm[norm1]',
            'VisionTransformer/ModuleList[blocks]/Block[6]/Attention[attn]/Linear[qkv]',
            'VisionTransformer/ModuleList[blocks]/Block[6]/Attention[attn]/Dropout[attn_drop]',
            'VisionTransformer/ModuleList[blocks]/Block[6]/Attention[attn]/Linear[proj]',
            'VisionTransformer/ModuleList[blocks]/Block[6]/Attention[attn]/Dropout[proj_drop]',
            'VisionTransformer/ModuleList[blocks]/Block[6]/Identity[drop_path]',
            'VisionTransformer/ModuleList[blocks]/Block[6]/LayerNorm[norm2]',
            'VisionTransformer/ModuleList[blocks]/Block[6]/Mlp[mlp]/Linear[fc1]',
            'VisionTransformer/ModuleList[blocks]/Block[6]/Mlp[mlp]/GELU[act]',
            'VisionTransformer/ModuleList[blocks]/Block[6]/Mlp[mlp]/Dropout[drop]',
            'VisionTransformer/ModuleList[blocks]/Block[6]/Mlp[mlp]/Linear[fc2]',
            'VisionTransformer/ModuleList[blocks]/Block[6]/Mlp[mlp]/Dropout[drop]',
            'VisionTransformer/ModuleList[blocks]/Block[6]/Identity[drop_path]',
            'VisionTransformer/ModuleList[blocks]/Block[7]/LayerNorm[norm1]',
            'VisionTransformer/ModuleList[blocks]/Block[7]/Attention[attn]/Linear[qkv]',
            'VisionTransformer/ModuleList[blocks]/Block[7]/Attention[attn]/Dropout[attn_drop]',
        ]
    TENSORS = [
        ]
    def __init__(self, layers, tensors, device='cuda:4'):
        super().__init__()

        # Initialize partition layers
        for idx, layer_scope in enumerate(self.LAYER_SCOPES):
            self.add_module(f'l_{idx}' ,layers[layer_scope])

        # Initialize partition tensors (params and buffs)
        b = p = 0
        for tensor_scope in self.TENSORS:
            tensor = tensors[tensor_scope]
            if isinstance(tensor, nn.Parameter):
                self.register_parameter(f'p_{p}', tensor)
                p += 1
            else:
                self.register_buffer(f'b_{b}', tensor)
                b += 1

        self.device = torch.device(device)
        self.input_structure = [1, 1]
        self.lookup = {'l_0': 'blocks.5.mlp.drop',
                        'l_1': 'blocks.5.drop_path',
                        'l_2': 'blocks.6.norm1',
                        'l_3': 'blocks.6.attn.qkv',
                        'l_4': 'blocks.6.attn.attn_drop',
                        'l_5': 'blocks.6.attn.proj',
                        'l_6': 'blocks.6.attn.proj_drop',
                        'l_7': 'blocks.6.drop_path',
                        'l_8': 'blocks.6.norm2',
                        'l_9': 'blocks.6.mlp.fc1',
                        'l_10': 'blocks.6.mlp.act',
                        'l_11': 'blocks.6.mlp.drop',
                        'l_12': 'blocks.6.mlp.fc2',
                        'l_13': 'blocks.6.mlp.drop',
                        'l_14': 'blocks.6.drop_path',
                        'l_15': 'blocks.7.norm1',
                        'l_16': 'blocks.7.attn.qkv',
                        'l_17': 'blocks.7.attn.attn_drop'}
        self.to(self.device)

    def forward(self, *args):
        # VisionTransformer/ModuleList[blocks]/Block[5]/Mlp[mlp]/Dropout[drop] <=> self.l_0
        # VisionTransformer/ModuleList[blocks]/Block[5]/Identity[drop_path] <=> self.l_1
        # VisionTransformer/ModuleList[blocks]/Block[6]/LayerNorm[norm1] <=> self.l_2
        # VisionTransformer/ModuleList[blocks]/Block[6]/Attention[attn]/Linear[qkv] <=> self.l_3
        # VisionTransformer/ModuleList[blocks]/Block[6]/Attention[attn]/Dropout[attn_drop] <=> self.l_4
        # VisionTransformer/ModuleList[blocks]/Block[6]/Attention[attn]/Linear[proj] <=> self.l_5
        # VisionTransformer/ModuleList[blocks]/Block[6]/Attention[attn]/Dropout[proj_drop] <=> self.l_6
        # VisionTransformer/ModuleList[blocks]/Block[6]/Identity[drop_path] <=> self.l_7
        # VisionTransformer/ModuleList[blocks]/Block[6]/LayerNorm[norm2] <=> self.l_8
        # VisionTransformer/ModuleList[blocks]/Block[6]/Mlp[mlp]/Linear[fc1] <=> self.l_9
        # VisionTransformer/ModuleList[blocks]/Block[6]/Mlp[mlp]/GELU[act] <=> self.l_10
        # VisionTransformer/ModuleList[blocks]/Block[6]/Mlp[mlp]/Dropout[drop] <=> self.l_11
        # VisionTransformer/ModuleList[blocks]/Block[6]/Mlp[mlp]/Linear[fc2] <=> self.l_12
        # VisionTransformer/ModuleList[blocks]/Block[6]/Mlp[mlp]/Dropout[drop] <=> self.l_13
        # VisionTransformer/ModuleList[blocks]/Block[6]/Identity[drop_path] <=> self.l_14
        # VisionTransformer/ModuleList[blocks]/Block[7]/LayerNorm[norm1] <=> self.l_15
        # VisionTransformer/ModuleList[blocks]/Block[7]/Attention[attn]/Linear[qkv] <=> self.l_16
        # VisionTransformer/ModuleList[blocks]/Block[7]/Attention[attn]/Dropout[attn_drop] <=> self.l_17
        # VisionTransformer/ModuleList[blocks]/Block[5]/Tensor::__add___330 <=> x0
        # VisionTransformer/ModuleList[blocks]/Block[5]/Mlp[mlp]/Linear[fc2] <=> x1
        x0, x1 = unflatten(args,self.input_structure)
        t_0 = self.l_0(x1)
        t_0 = self.l_1(t_0)
        t_0 = x0 + t_0
        t_1 = self.l_2(t_0)
        t_2 = t_1.shape
        t_3 = t_2[0]
        t_4 = t_2[1]
        t_2 = t_2[2]
        t_1 = self.l_3(t_1)
        t_5 = t_2 // 12
        t_5 = t_1.reshape(t_3, t_4, 3, 12, t_5)
        t_5 = t_5.permute(2, 0, 3, 1, 4)
        t_1 = t_5[0]
        t_6 = t_5[1]
        t_5 = t_5[2]
        t_6 = t_6.transpose(-2, -1)
        t_6 = t_1 @ t_6
        t_6 = t_6 * 0.125
        t_6 = t_6.softmax(dim=-1)
        t_6 = self.l_4(t_6)
        t_5 = t_6 @ t_5
        t_5 = t_5.transpose(1, 2)
        t_2 = t_5.reshape(t_3, t_4, t_2)
        t_2 = self.l_5(t_2)
        t_2 = self.l_6(t_2)
        t_2 = self.l_7(t_2)
        t_2 = t_0 + t_2
        t_0 = self.l_8(t_2)
        t_0 = self.l_9(t_0)
        t_0 = self.l_10(t_0)
        t_0 = self.l_11(t_0)
        t_0 = self.l_12(t_0)
        t_0 = self.l_13(t_0)
        t_0 = self.l_14(t_0)
        t_0 = t_2 + t_0
        t_2 = self.l_15(t_0)
        t_4 = t_2.shape
        t_3 = t_4[0]
        t_5 = t_4[1]
        t_4 = t_4[2]
        t_2 = self.l_16(t_2)
        t_6 = t_4 // 12
        t_6 = t_2.reshape(t_3, t_5, 3, 12, t_6)
        t_6 = t_6.permute(2, 0, 3, 1, 4)
        t_2 = t_6[0]
        t_1 = t_6[1]
        t_6 = t_6[2]
        t_1 = t_1.transpose(-2, -1)
        t_1 = t_2 @ t_1
        t_1 = t_1 * 0.125
        t_1 = t_1.softmax(dim=-1)
        t_1 = self.l_17(t_1)
        t_6 = t_1 @ t_6
        t_6 = t_6.transpose(1, 2)
        t_4 = t_6.reshape(t_3, t_5, t_4)
        # Returning:
        # VisionTransformer/ModuleList[blocks]/Block[6]/Tensor::__add___391
        # VisionTransformer/ModuleList[blocks]/Block[7]/Attention[attn]/Tensor::reshape_432
        return list(flatten((t_0, t_4)))

    def state_dict(self, *args, **kwargs):
        # we return the state dict of this part as it should be in the original model
        return state_dict(self, *args, **kwargs)

    def load_state_dict(self, state):
        return load_state_dict(self, state)

    def named_parameters(self, recurse=True):
        # we return the named parameters of this part as it should be in the original model
        return named_parameters(self, recurse=recurse)

    def named_buffers(self, recurse=True):
        # we return the named buffers of this part as it should be in the original model
        return named_buffers(self, recurse=recurse)

    def cpu(self):
        return cpu(self)

    def cuda(self, device=None):
        return cuda(self, device=device)

    def to(self, *args, **kwargs):
        return to(self, *args, **kwargs)


class Partition5(nn.Module):
    LAYER_SCOPES = [
            'VisionTransformer/ModuleList[blocks]/Block[7]/Attention[attn]/Linear[proj]',
            'VisionTransformer/ModuleList[blocks]/Block[7]/Attention[attn]/Dropout[proj_drop]',
            'VisionTransformer/ModuleList[blocks]/Block[7]/Identity[drop_path]',
            'VisionTransformer/ModuleList[blocks]/Block[7]/LayerNorm[norm2]',
            'VisionTransformer/ModuleList[blocks]/Block[7]/Mlp[mlp]/Linear[fc1]',
            'VisionTransformer/ModuleList[blocks]/Block[7]/Mlp[mlp]/GELU[act]',
            'VisionTransformer/ModuleList[blocks]/Block[7]/Mlp[mlp]/Dropout[drop]',
            'VisionTransformer/ModuleList[blocks]/Block[7]/Mlp[mlp]/Linear[fc2]',
            'VisionTransformer/ModuleList[blocks]/Block[7]/Mlp[mlp]/Dropout[drop]',
            'VisionTransformer/ModuleList[blocks]/Block[7]/Identity[drop_path]',
            'VisionTransformer/ModuleList[blocks]/Block[8]/LayerNorm[norm1]',
            'VisionTransformer/ModuleList[blocks]/Block[8]/Attention[attn]/Linear[qkv]',
            'VisionTransformer/ModuleList[blocks]/Block[8]/Attention[attn]/Dropout[attn_drop]',
            'VisionTransformer/ModuleList[blocks]/Block[8]/Attention[attn]/Linear[proj]',
            'VisionTransformer/ModuleList[blocks]/Block[8]/Attention[attn]/Dropout[proj_drop]',
            'VisionTransformer/ModuleList[blocks]/Block[8]/Identity[drop_path]',
            'VisionTransformer/ModuleList[blocks]/Block[8]/LayerNorm[norm2]',
            'VisionTransformer/ModuleList[blocks]/Block[8]/Mlp[mlp]/Linear[fc1]',
            'VisionTransformer/ModuleList[blocks]/Block[8]/Mlp[mlp]/GELU[act]',
            'VisionTransformer/ModuleList[blocks]/Block[8]/Mlp[mlp]/Dropout[drop]',
            'VisionTransformer/ModuleList[blocks]/Block[8]/Mlp[mlp]/Linear[fc2]',
            'VisionTransformer/ModuleList[blocks]/Block[8]/Mlp[mlp]/Dropout[drop]',
            'VisionTransformer/ModuleList[blocks]/Block[8]/Identity[drop_path]',
            'VisionTransformer/ModuleList[blocks]/Block[9]/LayerNorm[norm1]',
        ]
    TENSORS = [
        ]
    def __init__(self, layers, tensors, device='cuda:5'):
        super().__init__()

        # Initialize partition layers
        for idx, layer_scope in enumerate(self.LAYER_SCOPES):
            self.add_module(f'l_{idx}' ,layers[layer_scope])

        # Initialize partition tensors (params and buffs)
        b = p = 0
        for tensor_scope in self.TENSORS:
            tensor = tensors[tensor_scope]
            if isinstance(tensor, nn.Parameter):
                self.register_parameter(f'p_{p}', tensor)
                p += 1
            else:
                self.register_buffer(f'b_{b}', tensor)
                b += 1

        self.device = torch.device(device)
        self.input_structure = [1, 1]
        self.lookup = {'l_0': 'blocks.7.attn.proj',
                        'l_1': 'blocks.7.attn.proj_drop',
                        'l_2': 'blocks.7.drop_path',
                        'l_3': 'blocks.7.norm2',
                        'l_4': 'blocks.7.mlp.fc1',
                        'l_5': 'blocks.7.mlp.act',
                        'l_6': 'blocks.7.mlp.drop',
                        'l_7': 'blocks.7.mlp.fc2',
                        'l_8': 'blocks.7.mlp.drop',
                        'l_9': 'blocks.7.drop_path',
                        'l_10': 'blocks.8.norm1',
                        'l_11': 'blocks.8.attn.qkv',
                        'l_12': 'blocks.8.attn.attn_drop',
                        'l_13': 'blocks.8.attn.proj',
                        'l_14': 'blocks.8.attn.proj_drop',
                        'l_15': 'blocks.8.drop_path',
                        'l_16': 'blocks.8.norm2',
                        'l_17': 'blocks.8.mlp.fc1',
                        'l_18': 'blocks.8.mlp.act',
                        'l_19': 'blocks.8.mlp.drop',
                        'l_20': 'blocks.8.mlp.fc2',
                        'l_21': 'blocks.8.mlp.drop',
                        'l_22': 'blocks.8.drop_path',
                        'l_23': 'blocks.9.norm1'}
        self.to(self.device)

    def forward(self, *args):
        # VisionTransformer/ModuleList[blocks]/Block[7]/Attention[attn]/Linear[proj] <=> self.l_0
        # VisionTransformer/ModuleList[blocks]/Block[7]/Attention[attn]/Dropout[proj_drop] <=> self.l_1
        # VisionTransformer/ModuleList[blocks]/Block[7]/Identity[drop_path] <=> self.l_2
        # VisionTransformer/ModuleList[blocks]/Block[7]/LayerNorm[norm2] <=> self.l_3
        # VisionTransformer/ModuleList[blocks]/Block[7]/Mlp[mlp]/Linear[fc1] <=> self.l_4
        # VisionTransformer/ModuleList[blocks]/Block[7]/Mlp[mlp]/GELU[act] <=> self.l_5
        # VisionTransformer/ModuleList[blocks]/Block[7]/Mlp[mlp]/Dropout[drop] <=> self.l_6
        # VisionTransformer/ModuleList[blocks]/Block[7]/Mlp[mlp]/Linear[fc2] <=> self.l_7
        # VisionTransformer/ModuleList[blocks]/Block[7]/Mlp[mlp]/Dropout[drop] <=> self.l_8
        # VisionTransformer/ModuleList[blocks]/Block[7]/Identity[drop_path] <=> self.l_9
        # VisionTransformer/ModuleList[blocks]/Block[8]/LayerNorm[norm1] <=> self.l_10
        # VisionTransformer/ModuleList[blocks]/Block[8]/Attention[attn]/Linear[qkv] <=> self.l_11
        # VisionTransformer/ModuleList[blocks]/Block[8]/Attention[attn]/Dropout[attn_drop] <=> self.l_12
        # VisionTransformer/ModuleList[blocks]/Block[8]/Attention[attn]/Linear[proj] <=> self.l_13
        # VisionTransformer/ModuleList[blocks]/Block[8]/Attention[attn]/Dropout[proj_drop] <=> self.l_14
        # VisionTransformer/ModuleList[blocks]/Block[8]/Identity[drop_path] <=> self.l_15
        # VisionTransformer/ModuleList[blocks]/Block[8]/LayerNorm[norm2] <=> self.l_16
        # VisionTransformer/ModuleList[blocks]/Block[8]/Mlp[mlp]/Linear[fc1] <=> self.l_17
        # VisionTransformer/ModuleList[blocks]/Block[8]/Mlp[mlp]/GELU[act] <=> self.l_18
        # VisionTransformer/ModuleList[blocks]/Block[8]/Mlp[mlp]/Dropout[drop] <=> self.l_19
        # VisionTransformer/ModuleList[blocks]/Block[8]/Mlp[mlp]/Linear[fc2] <=> self.l_20
        # VisionTransformer/ModuleList[blocks]/Block[8]/Mlp[mlp]/Dropout[drop] <=> self.l_21
        # VisionTransformer/ModuleList[blocks]/Block[8]/Identity[drop_path] <=> self.l_22
        # VisionTransformer/ModuleList[blocks]/Block[9]/LayerNorm[norm1] <=> self.l_23
        # VisionTransformer/ModuleList[blocks]/Block[6]/Tensor::__add___391 <=> x0
        # VisionTransformer/ModuleList[blocks]/Block[7]/Attention[attn]/Tensor::reshape_432 <=> x1
        x0, x1 = unflatten(args,self.input_structure)
        t_0 = self.l_0(x1)
        t_0 = self.l_1(t_0)
        t_0 = self.l_2(t_0)
        t_0 = x0 + t_0
        t_1 = self.l_3(t_0)
        t_1 = self.l_4(t_1)
        t_1 = self.l_5(t_1)
        t_1 = self.l_6(t_1)
        t_1 = self.l_7(t_1)
        t_1 = self.l_8(t_1)
        t_1 = self.l_9(t_1)
        t_1 = t_0 + t_1
        t_0 = self.l_10(t_1)
        t_2 = t_0.shape
        t_3 = t_2[0]
        t_4 = t_2[1]
        t_2 = t_2[2]
        t_0 = self.l_11(t_0)
        t_5 = t_2 // 12
        t_5 = t_0.reshape(t_3, t_4, 3, 12, t_5)
        t_5 = t_5.permute(2, 0, 3, 1, 4)
        t_0 = t_5[0]
        t_6 = t_5[1]
        t_5 = t_5[2]
        t_6 = t_6.transpose(-2, -1)
        t_6 = t_0 @ t_6
        t_6 = t_6 * 0.125
        t_6 = t_6.softmax(dim=-1)
        t_6 = self.l_12(t_6)
        t_5 = t_6 @ t_5
        t_5 = t_5.transpose(1, 2)
        t_2 = t_5.reshape(t_3, t_4, t_2)
        t_2 = self.l_13(t_2)
        t_2 = self.l_14(t_2)
        t_2 = self.l_15(t_2)
        t_2 = t_1 + t_2
        t_1 = self.l_16(t_2)
        t_1 = self.l_17(t_1)
        t_1 = self.l_18(t_1)
        t_1 = self.l_19(t_1)
        t_1 = self.l_20(t_1)
        t_1 = self.l_21(t_1)
        t_1 = self.l_22(t_1)
        t_1 = t_2 + t_1
        t_2 = self.l_23(t_1)
        # Returning:
        # VisionTransformer/ModuleList[blocks]/Block[8]/Tensor::__add___497
        # VisionTransformer/ModuleList[blocks]/Block[9]/LayerNorm[norm1]
        return list(flatten((t_1, t_2)))

    def state_dict(self, *args, **kwargs):
        # we return the state dict of this part as it should be in the original model
        return state_dict(self, *args, **kwargs)

    def load_state_dict(self, state):
        return load_state_dict(self, state)

    def named_parameters(self, recurse=True):
        # we return the named parameters of this part as it should be in the original model
        return named_parameters(self, recurse=recurse)

    def named_buffers(self, recurse=True):
        # we return the named buffers of this part as it should be in the original model
        return named_buffers(self, recurse=recurse)

    def cpu(self):
        return cpu(self)

    def cuda(self, device=None):
        return cuda(self, device=device)

    def to(self, *args, **kwargs):
        return to(self, *args, **kwargs)


class Partition6(nn.Module):
    LAYER_SCOPES = [
            'VisionTransformer/ModuleList[blocks]/Block[9]/Attention[attn]/Linear[qkv]',
            'VisionTransformer/ModuleList[blocks]/Block[9]/Attention[attn]/Dropout[attn_drop]',
            'VisionTransformer/ModuleList[blocks]/Block[9]/Attention[attn]/Linear[proj]',
            'VisionTransformer/ModuleList[blocks]/Block[9]/Attention[attn]/Dropout[proj_drop]',
            'VisionTransformer/ModuleList[blocks]/Block[9]/Identity[drop_path]',
            'VisionTransformer/ModuleList[blocks]/Block[9]/LayerNorm[norm2]',
            'VisionTransformer/ModuleList[blocks]/Block[9]/Mlp[mlp]/Linear[fc1]',
            'VisionTransformer/ModuleList[blocks]/Block[9]/Mlp[mlp]/GELU[act]',
            'VisionTransformer/ModuleList[blocks]/Block[9]/Mlp[mlp]/Dropout[drop]',
            'VisionTransformer/ModuleList[blocks]/Block[9]/Mlp[mlp]/Linear[fc2]',
            'VisionTransformer/ModuleList[blocks]/Block[9]/Mlp[mlp]/Dropout[drop]',
            'VisionTransformer/ModuleList[blocks]/Block[9]/Identity[drop_path]',
            'VisionTransformer/ModuleList[blocks]/Block[10]/LayerNorm[norm1]',
            'VisionTransformer/ModuleList[blocks]/Block[10]/Attention[attn]/Linear[qkv]',
            'VisionTransformer/ModuleList[blocks]/Block[10]/Attention[attn]/Dropout[attn_drop]',
            'VisionTransformer/ModuleList[blocks]/Block[10]/Attention[attn]/Linear[proj]',
        ]
    TENSORS = [
        ]
    def __init__(self, layers, tensors, device='cuda:6'):
        super().__init__()

        # Initialize partition layers
        for idx, layer_scope in enumerate(self.LAYER_SCOPES):
            self.add_module(f'l_{idx}' ,layers[layer_scope])

        # Initialize partition tensors (params and buffs)
        b = p = 0
        for tensor_scope in self.TENSORS:
            tensor = tensors[tensor_scope]
            if isinstance(tensor, nn.Parameter):
                self.register_parameter(f'p_{p}', tensor)
                p += 1
            else:
                self.register_buffer(f'b_{b}', tensor)
                b += 1

        self.device = torch.device(device)
        self.input_structure = [1, 1]
        self.lookup = {'l_0': 'blocks.9.attn.qkv',
                        'l_1': 'blocks.9.attn.attn_drop',
                        'l_2': 'blocks.9.attn.proj',
                        'l_3': 'blocks.9.attn.proj_drop',
                        'l_4': 'blocks.9.drop_path',
                        'l_5': 'blocks.9.norm2',
                        'l_6': 'blocks.9.mlp.fc1',
                        'l_7': 'blocks.9.mlp.act',
                        'l_8': 'blocks.9.mlp.drop',
                        'l_9': 'blocks.9.mlp.fc2',
                        'l_10': 'blocks.9.mlp.drop',
                        'l_11': 'blocks.9.drop_path',
                        'l_12': 'blocks.10.norm1',
                        'l_13': 'blocks.10.attn.qkv',
                        'l_14': 'blocks.10.attn.attn_drop',
                        'l_15': 'blocks.10.attn.proj'}
        self.to(self.device)

    def forward(self, *args):
        # VisionTransformer/ModuleList[blocks]/Block[9]/Attention[attn]/Linear[qkv] <=> self.l_0
        # VisionTransformer/ModuleList[blocks]/Block[9]/Attention[attn]/Dropout[attn_drop] <=> self.l_1
        # VisionTransformer/ModuleList[blocks]/Block[9]/Attention[attn]/Linear[proj] <=> self.l_2
        # VisionTransformer/ModuleList[blocks]/Block[9]/Attention[attn]/Dropout[proj_drop] <=> self.l_3
        # VisionTransformer/ModuleList[blocks]/Block[9]/Identity[drop_path] <=> self.l_4
        # VisionTransformer/ModuleList[blocks]/Block[9]/LayerNorm[norm2] <=> self.l_5
        # VisionTransformer/ModuleList[blocks]/Block[9]/Mlp[mlp]/Linear[fc1] <=> self.l_6
        # VisionTransformer/ModuleList[blocks]/Block[9]/Mlp[mlp]/GELU[act] <=> self.l_7
        # VisionTransformer/ModuleList[blocks]/Block[9]/Mlp[mlp]/Dropout[drop] <=> self.l_8
        # VisionTransformer/ModuleList[blocks]/Block[9]/Mlp[mlp]/Linear[fc2] <=> self.l_9
        # VisionTransformer/ModuleList[blocks]/Block[9]/Mlp[mlp]/Dropout[drop] <=> self.l_10
        # VisionTransformer/ModuleList[blocks]/Block[9]/Identity[drop_path] <=> self.l_11
        # VisionTransformer/ModuleList[blocks]/Block[10]/LayerNorm[norm1] <=> self.l_12
        # VisionTransformer/ModuleList[blocks]/Block[10]/Attention[attn]/Linear[qkv] <=> self.l_13
        # VisionTransformer/ModuleList[blocks]/Block[10]/Attention[attn]/Dropout[attn_drop] <=> self.l_14
        # VisionTransformer/ModuleList[blocks]/Block[10]/Attention[attn]/Linear[proj] <=> self.l_15
        # VisionTransformer/ModuleList[blocks]/Block[8]/Tensor::__add___497 <=> x0
        # VisionTransformer/ModuleList[blocks]/Block[9]/LayerNorm[norm1] <=> x1
        x0, x1 = unflatten(args,self.input_structure)
        t_0 = x1.shape
        t_1 = t_0[0]
        t_2 = t_0[1]
        t_0 = t_0[2]
        t_3 = self.l_0(x1)
        t_4 = t_0 // 12
        t_4 = t_3.reshape(t_1, t_2, 3, 12, t_4)
        t_4 = t_4.permute(2, 0, 3, 1, 4)
        t_3 = t_4[0]
        t_5 = t_4[1]
        t_4 = t_4[2]
        t_5 = t_5.transpose(-2, -1)
        t_5 = t_3 @ t_5
        t_5 = t_5 * 0.125
        t_5 = t_5.softmax(dim=-1)
        t_5 = self.l_1(t_5)
        t_4 = t_5 @ t_4
        t_4 = t_4.transpose(1, 2)
        t_0 = t_4.reshape(t_1, t_2, t_0)
        t_0 = self.l_2(t_0)
        t_0 = self.l_3(t_0)
        t_0 = self.l_4(t_0)
        t_0 = x0 + t_0
        t_2 = self.l_5(t_0)
        t_2 = self.l_6(t_2)
        t_2 = self.l_7(t_2)
        t_2 = self.l_8(t_2)
        t_2 = self.l_9(t_2)
        t_2 = self.l_10(t_2)
        t_2 = self.l_11(t_2)
        t_2 = t_0 + t_2
        t_0 = self.l_12(t_2)
        t_1 = t_0.shape
        t_4 = t_1[0]
        t_5 = t_1[1]
        t_1 = t_1[2]
        t_0 = self.l_13(t_0)
        t_3 = t_1 // 12
        t_3 = t_0.reshape(t_4, t_5, 3, 12, t_3)
        t_3 = t_3.permute(2, 0, 3, 1, 4)
        t_0 = t_3[0]
        t_6 = t_3[1]
        t_3 = t_3[2]
        t_6 = t_6.transpose(-2, -1)
        t_6 = t_0 @ t_6
        t_6 = t_6 * 0.125
        t_6 = t_6.softmax(dim=-1)
        t_6 = self.l_14(t_6)
        t_3 = t_6 @ t_3
        t_3 = t_3.transpose(1, 2)
        t_1 = t_3.reshape(t_4, t_5, t_1)
        t_1 = self.l_15(t_1)
        # Returning:
        # VisionTransformer/ModuleList[blocks]/Block[9]/Tensor::__add___550
        # VisionTransformer/ModuleList[blocks]/Block[10]/Attention[attn]/Linear[proj]
        return list(flatten((t_2, t_1)))

    def state_dict(self, *args, **kwargs):
        # we return the state dict of this part as it should be in the original model
        return state_dict(self, *args, **kwargs)

    def load_state_dict(self, state):
        return load_state_dict(self, state)

    def named_parameters(self, recurse=True):
        # we return the named parameters of this part as it should be in the original model
        return named_parameters(self, recurse=recurse)

    def named_buffers(self, recurse=True):
        # we return the named buffers of this part as it should be in the original model
        return named_buffers(self, recurse=recurse)

    def cpu(self):
        return cpu(self)

    def cuda(self, device=None):
        return cuda(self, device=device)

    def to(self, *args, **kwargs):
        return to(self, *args, **kwargs)


class Partition7(nn.Module):
    LAYER_SCOPES = [
            'VisionTransformer/ModuleList[blocks]/Block[10]/Attention[attn]/Dropout[proj_drop]',
            'VisionTransformer/ModuleList[blocks]/Block[10]/Identity[drop_path]',
            'VisionTransformer/ModuleList[blocks]/Block[10]/LayerNorm[norm2]',
            'VisionTransformer/ModuleList[blocks]/Block[10]/Mlp[mlp]/Linear[fc1]',
            'VisionTransformer/ModuleList[blocks]/Block[10]/Mlp[mlp]/GELU[act]',
            'VisionTransformer/ModuleList[blocks]/Block[10]/Mlp[mlp]/Dropout[drop]',
            'VisionTransformer/ModuleList[blocks]/Block[10]/Mlp[mlp]/Linear[fc2]',
            'VisionTransformer/ModuleList[blocks]/Block[10]/Mlp[mlp]/Dropout[drop]',
            'VisionTransformer/ModuleList[blocks]/Block[10]/Identity[drop_path]',
            'VisionTransformer/ModuleList[blocks]/Block[11]/LayerNorm[norm1]',
            'VisionTransformer/ModuleList[blocks]/Block[11]/Attention[attn]/Linear[qkv]',
            'VisionTransformer/ModuleList[blocks]/Block[11]/Attention[attn]/Dropout[attn_drop]',
            'VisionTransformer/ModuleList[blocks]/Block[11]/Attention[attn]/Linear[proj]',
            'VisionTransformer/ModuleList[blocks]/Block[11]/Attention[attn]/Dropout[proj_drop]',
            'VisionTransformer/ModuleList[blocks]/Block[11]/Identity[drop_path]',
            'VisionTransformer/ModuleList[blocks]/Block[11]/LayerNorm[norm2]',
            'VisionTransformer/ModuleList[blocks]/Block[11]/Mlp[mlp]/Linear[fc1]',
            'VisionTransformer/ModuleList[blocks]/Block[11]/Mlp[mlp]/GELU[act]',
            'VisionTransformer/ModuleList[blocks]/Block[11]/Mlp[mlp]/Dropout[drop]',
            'VisionTransformer/ModuleList[blocks]/Block[11]/Mlp[mlp]/Linear[fc2]',
            'VisionTransformer/ModuleList[blocks]/Block[11]/Mlp[mlp]/Dropout[drop]',
            'VisionTransformer/ModuleList[blocks]/Block[11]/Identity[drop_path]',
            'VisionTransformer/LayerNorm[norm]',
            'VisionTransformer/Linear[head]',
        ]
    TENSORS = [
        ]
    def __init__(self, layers, tensors, device='cuda:7'):
        super().__init__()

        # Initialize partition layers
        for idx, layer_scope in enumerate(self.LAYER_SCOPES):
            self.add_module(f'l_{idx}' ,layers[layer_scope])

        # Initialize partition tensors (params and buffs)
        b = p = 0
        for tensor_scope in self.TENSORS:
            tensor = tensors[tensor_scope]
            if isinstance(tensor, nn.Parameter):
                self.register_parameter(f'p_{p}', tensor)
                p += 1
            else:
                self.register_buffer(f'b_{b}', tensor)
                b += 1

        self.device = torch.device(device)
        self.input_structure = [1, 1]
        self.lookup = {'l_0': 'blocks.10.attn.proj_drop',
                        'l_1': 'blocks.10.drop_path',
                        'l_2': 'blocks.10.norm2',
                        'l_3': 'blocks.10.mlp.fc1',
                        'l_4': 'blocks.10.mlp.act',
                        'l_5': 'blocks.10.mlp.drop',
                        'l_6': 'blocks.10.mlp.fc2',
                        'l_7': 'blocks.10.mlp.drop',
                        'l_8': 'blocks.10.drop_path',
                        'l_9': 'blocks.11.norm1',
                        'l_10': 'blocks.11.attn.qkv',
                        'l_11': 'blocks.11.attn.attn_drop',
                        'l_12': 'blocks.11.attn.proj',
                        'l_13': 'blocks.11.attn.proj_drop',
                        'l_14': 'blocks.11.drop_path',
                        'l_15': 'blocks.11.norm2',
                        'l_16': 'blocks.11.mlp.fc1',
                        'l_17': 'blocks.11.mlp.act',
                        'l_18': 'blocks.11.mlp.drop',
                        'l_19': 'blocks.11.mlp.fc2',
                        'l_20': 'blocks.11.mlp.drop',
                        'l_21': 'blocks.11.drop_path',
                        'l_22': 'norm',
                        'l_23': 'head'}
        self.to(self.device)

    def forward(self, *args):
        # VisionTransformer/ModuleList[blocks]/Block[10]/Attention[attn]/Dropout[proj_drop] <=> self.l_0
        # VisionTransformer/ModuleList[blocks]/Block[10]/Identity[drop_path] <=> self.l_1
        # VisionTransformer/ModuleList[blocks]/Block[10]/LayerNorm[norm2] <=> self.l_2
        # VisionTransformer/ModuleList[blocks]/Block[10]/Mlp[mlp]/Linear[fc1] <=> self.l_3
        # VisionTransformer/ModuleList[blocks]/Block[10]/Mlp[mlp]/GELU[act] <=> self.l_4
        # VisionTransformer/ModuleList[blocks]/Block[10]/Mlp[mlp]/Dropout[drop] <=> self.l_5
        # VisionTransformer/ModuleList[blocks]/Block[10]/Mlp[mlp]/Linear[fc2] <=> self.l_6
        # VisionTransformer/ModuleList[blocks]/Block[10]/Mlp[mlp]/Dropout[drop] <=> self.l_7
        # VisionTransformer/ModuleList[blocks]/Block[10]/Identity[drop_path] <=> self.l_8
        # VisionTransformer/ModuleList[blocks]/Block[11]/LayerNorm[norm1] <=> self.l_9
        # VisionTransformer/ModuleList[blocks]/Block[11]/Attention[attn]/Linear[qkv] <=> self.l_10
        # VisionTransformer/ModuleList[blocks]/Block[11]/Attention[attn]/Dropout[attn_drop] <=> self.l_11
        # VisionTransformer/ModuleList[blocks]/Block[11]/Attention[attn]/Linear[proj] <=> self.l_12
        # VisionTransformer/ModuleList[blocks]/Block[11]/Attention[attn]/Dropout[proj_drop] <=> self.l_13
        # VisionTransformer/ModuleList[blocks]/Block[11]/Identity[drop_path] <=> self.l_14
        # VisionTransformer/ModuleList[blocks]/Block[11]/LayerNorm[norm2] <=> self.l_15
        # VisionTransformer/ModuleList[blocks]/Block[11]/Mlp[mlp]/Linear[fc1] <=> self.l_16
        # VisionTransformer/ModuleList[blocks]/Block[11]/Mlp[mlp]/GELU[act] <=> self.l_17
        # VisionTransformer/ModuleList[blocks]/Block[11]/Mlp[mlp]/Dropout[drop] <=> self.l_18
        # VisionTransformer/ModuleList[blocks]/Block[11]/Mlp[mlp]/Linear[fc2] <=> self.l_19
        # VisionTransformer/ModuleList[blocks]/Block[11]/Mlp[mlp]/Dropout[drop] <=> self.l_20
        # VisionTransformer/ModuleList[blocks]/Block[11]/Identity[drop_path] <=> self.l_21
        # VisionTransformer/LayerNorm[norm] <=> self.l_22
        # VisionTransformer/Linear[head] <=> self.l_23
        # VisionTransformer/ModuleList[blocks]/Block[9]/Tensor::__add___550 <=> x0
        # VisionTransformer/ModuleList[blocks]/Block[10]/Attention[attn]/Linear[proj] <=> x1
        x0, x1 = unflatten(args,self.input_structure)
        t_0 = self.l_0(x1)
        t_0 = self.l_1(t_0)
        t_0 = x0 + t_0
        t_1 = self.l_2(t_0)
        t_1 = self.l_3(t_1)
        t_1 = self.l_4(t_1)
        t_1 = self.l_5(t_1)
        t_1 = self.l_6(t_1)
        t_1 = self.l_7(t_1)
        t_1 = self.l_8(t_1)
        t_1 = t_0 + t_1
        t_0 = self.l_9(t_1)
        t_2 = t_0.shape
        t_3 = t_2[0]
        t_4 = t_2[1]
        t_2 = t_2[2]
        t_0 = self.l_10(t_0)
        t_5 = t_2 // 12
        t_5 = t_0.reshape(t_3, t_4, 3, 12, t_5)
        t_5 = t_5.permute(2, 0, 3, 1, 4)
        t_0 = t_5[0]
        t_6 = t_5[1]
        t_5 = t_5[2]
        t_6 = t_6.transpose(-2, -1)
        t_6 = t_0 @ t_6
        t_6 = t_6 * 0.125
        t_6 = t_6.softmax(dim=-1)
        t_6 = self.l_11(t_6)
        t_5 = t_6 @ t_5
        t_5 = t_5.transpose(1, 2)
        t_2 = t_5.reshape(t_3, t_4, t_2)
        t_2 = self.l_12(t_2)
        t_2 = self.l_13(t_2)
        t_2 = self.l_14(t_2)
        t_2 = t_1 + t_2
        t_1 = self.l_15(t_2)
        t_1 = self.l_16(t_1)
        t_1 = self.l_17(t_1)
        t_1 = self.l_18(t_1)
        t_1 = self.l_19(t_1)
        t_1 = self.l_20(t_1)
        t_1 = self.l_21(t_1)
        t_1 = t_2 + t_1
        t_1 = self.l_22(t_1)
        t_1 = t_1[(slice(None, None, None), 0)]
        t_1 = self.l_23(t_1)
        # Returning:
        # VisionTransformer/Linear[head]
        return (t_1,)

    def state_dict(self, *args, **kwargs):
        # we return the state dict of this part as it should be in the original model
        return state_dict(self, *args, **kwargs)

    def load_state_dict(self, state):
        return load_state_dict(self, state)

    def named_parameters(self, recurse=True):
        # we return the named parameters of this part as it should be in the original model
        return named_parameters(self, recurse=recurse)

    def named_buffers(self, recurse=True):
        # we return the named buffers of this part as it should be in the original model
        return named_buffers(self, recurse=recurse)

    def cpu(self):
        return cpu(self)

    def cuda(self, device=None):
        return cuda(self, device=device)

    def to(self, *args, **kwargs):
        return to(self, *args, **kwargs)


def traverse_model(module: nn.Module, depth: int, prefix: Optional[str] = None,
                   basic_blocks: Tuple[Type[nn.Module]] = (), full: bool = False) -> Iterator[
    Tuple[nn.Module, str, nn.Module, Optional[bool]]]:
    """
    iterate over model layers yielding the layer,layer_scope,encasing_module
    Parameters:
    -----------
    model:
        the model to iterate over
    depth:
        how far down in the model tree to go
    basic_blocks:
        a list of modules that if encountered will not be broken down
    full:
        whether to yield only layers specified by the depth and basic_block options or to yield all layers
    """
    if prefix is None:
        prefix = type(module).__name__

    for name, sub_module in module.named_children():
        scope = prefix + "/" + type(sub_module).__name__ + f"[{name}]"
        if len(list(sub_module.children())) == 0 or isinstance(sub_module, tuple(basic_blocks)) or depth == 0:
            if full:
                yield sub_module, scope, module, True
            else:
                yield sub_module, scope, module
        else:
            if full:
                yield sub_module, scope, module, False
            yield from traverse_model(sub_module, depth - 1, scope, basic_blocks, full)


def layerDict(model: nn.Module, depth=1000, basic_blocks=()) -> Dict[str, nn.Module]:
    return {s: l for l, s, _ in traverse_model(model, depth, basic_blocks=basic_blocks)}


def traverse_params_buffs(module: nn.Module, prefix: Optional[str] = None) -> Iterator[Tuple[torch.tensor, str]]:
    """
    iterate over model's buffers and parameters yielding obj,obj_scope

    Parameters:
    -----------
    model:
        the model to iterate over
    """
    if prefix is None:
        prefix = type(module).__name__

    # params
    for param_name, param in module.named_parameters(recurse=False):
        param_scope = f"{prefix}/{type(param).__name__}[{param_name}]"
        yield param, param_scope

    # buffs
    for buffer_name, buffer in module.named_buffers(recurse=False):
        buffer_scope = f"{prefix}/{type(buffer).__name__}[{buffer_name}]"
        yield buffer, buffer_scope

    # recurse
    for name, sub_module in module.named_children():
        yield from traverse_params_buffs(sub_module, prefix + "/" + type(sub_module).__name__ + f"[{name}]")


def tensorDict(model: nn.Module) -> OrderedDict[str, Tensor]:
    return collections.OrderedDict((s, t) for t, s in traverse_params_buffs(model))


def move_tensors(ts, device):
    def move(t):
        if isinstance(t, (nn.Module, Tensor)):
            return t.to(device)
        return t

    return nested_map(move, ts)


def nested_map(func, ts, full=False):
    if isinstance(ts, torch.Size):
        # size is inheriting from tuple which is stupid
        return func(ts)
    elif isinstance(ts, (list, tuple, set)):
        return type(ts)(nested_map(func, t, full=full) for t in ts)
    elif isinstance(ts, dict):
        return {k: nested_map(func, v, full=full) for k, v in ts.items()}
    elif isinstance(ts, slice) and full:
        start = nested_map(func, ts.start, full=full)
        stop = nested_map(func, ts.stop, full=full)
        step = nested_map(func, ts.step, full=full)
        return slice(start, stop, step)
    return func(ts)


def flatten(ts):
    if isinstance(ts, torch.Size):
        # size is inheriting from tuple which is stupid
        yield ts
    elif isinstance(ts, (list, tuple, set)):
        yield from chain(*[flatten(t) for t in ts])
    elif isinstance(ts, dict):
        yield from chain(*[flatten(t) for k, t in sorted(ts.items(), key=lambda t: t[0])])
    else:
        yield ts


def unflatten(xs, structure):
    return _unflatten(xs, structure)[0]


def _unflatten(xs, structure):
    if isinstance(structure, torch.Size):
        # torch.Size is subclass of tuple which is stupid
        return xs[0], 1

    if not isinstance(structure, (list, tuple, set, dict)):
        return xs[0], 1

    if isinstance(structure, (list, tuple, set)):
        offset = 0
        elements = []
        for s in structure:
            e, n = _unflatten(xs[offset:], s)
            elements.append(e)
            offset += n

        return type(structure)(elements), offset

    assert isinstance(structure, dict)
    offset = 0
    elements = dict()
    for k, v in sorted(structure.items(), key=lambda t: t[0]):
        e, n = _unflatten(xs[offset:], v)
        elements[k] = e
        offset += n

    return elements, offset


def state_dict(partition, *args, **kwargs):
    # we return the state dict of this part as it should be in the original model
    state = nn.Module.state_dict(partition, *args, **kwargs)
    lookup = partition.lookup
    result = dict()
    for k, v in state.items():
        if k in lookup:
            result[lookup[k]] = v
        else:
            assert '.' in k
            split_idx = k.find('.')
            new_k = lookup[k[:split_idx]] + k[split_idx:]
            result[new_k] = v
    return result


def load_state_dict(partition, state):
    reverse_lookup = {v: k for k, v in partition.lookup.items()}
    device = partition.device
    keys = list(partition.state_dict(None).keys())
    new_state = dict()
    for k in keys:
        if k in reverse_lookup:
            new_state[reverse_lookup[k]] = state[k].to(device)
            continue
        idx = k.rfind(".")
        to_replace = k[:idx]
        if to_replace in reverse_lookup:
            key = reverse_lookup[to_replace] + k[idx:]
            new_state[key] = state[k].to(device)
    nn.Module.load_state_dict(partition, new_state, strict=True)


def named_buffers(partition, recurse=True):
    # we return the named buffers of this part as it should be in the original model
    params = nn.Module.named_buffers(partition, recurse=recurse)
    lookup = partition.lookup
    for k, v in params:
        if k in lookup:
            yield lookup[k], v
        else:
            assert '.' in k
            split_idx = k.find('.')
            new_k = lookup[k[:split_idx]] + k[split_idx:]
            yield new_k, v


def named_parameters(partition, recurse=True):
    # we return the named parameters of this part as it should be in the original model
    params = nn.Module.named_parameters(partition, recurse=recurse)
    lookup = partition.lookup
    for k, v in params:
        if k in lookup:
            yield lookup[k], v
        else:
            assert '.' in k
            split_idx = k.find('.')
            new_k = lookup[k[:split_idx]] + k[split_idx:]
            yield new_k, v


def cpu(partition):
    partition.device = torch.device('cpu')
    return nn.Module.cpu(partition)


def cuda(partition, device=None):
    if device is None:
        device = torch.cuda.current_device()
    partition.device = torch.device(device)
    return nn.Module.cuda(partition, partition.device)


def to(partition, *args, **kwargs):
    device = None
    if 'device' in kwargs:
        device = kwargs['device']
    elif 'tensor' in kwargs:
        device = kwargs['tensor'].device
    if args:
        if isinstance(args[0], (torch.device, int, str)):
            device = args[0]
        if torch.is_tensor(args[0]):
            device = args[0].device
    if not (device is None):
        partition.device = torch.device(device)
    return nn.Module.to(partition, *args, **kwargs)

model_args = {'model': 'vit_base_patch16_384_in21k_imagenet_384'}
"""analysis summary
-I- Printing Report
Number of stages: 8
backward times include recomputation

Stage parameter count:
 {0: 9895680,
 1: 12402432,
 2: 8861184,
 3: 12402432,
 4: 8861184,
 5: 12403968,
 6: 9450240,
 7: 12582376,
 'total': 86859496}

GPU parameter count:
 {'total': 86859496}

real times are based on real measurements of execution time (with communication) of generated partitions ms
forward {0: 63.95, 1: 64.09, 2: 60.55, 3: 64.05, 4: 60.63, 5: 64.99, 6: 61.73, 7: 53.55}
backward {0: 161.04, 1: 169.69, 2: 166.19, 3: 171.61, 4: 165.98, 5: 173.96, 6: 169.45, 7: 165.31}

Assuming bandwidth of 12 GBps between GPUs

communication volumes size of activations of each partition
0: input size:'0.00 MB', recieve_time:'0.00 ms', out:'113.44 MB', send time:'9.45 ms'
1: input size:'113.44 MB', recieve_time:'9.45 ms', out:'113.44 MB', send time:'9.45 ms'
2: input size:'113.44 MB', recieve_time:'9.45 ms', out:'113.44 MB', send time:'9.45 ms'
3: input size:'113.44 MB', recieve_time:'9.45 ms', out:'113.44 MB', send time:'9.45 ms'
4: input size:'113.44 MB', recieve_time:'9.45 ms', out:'113.44 MB', send time:'9.45 ms'
5: input size:'113.44 MB', recieve_time:'9.45 ms', out:'113.44 MB', send time:'9.45 ms'
6: input size:'113.44 MB', recieve_time:'9.45 ms', out:'113.44 MB', send time:'9.45 ms'
7: input size:'113.44 MB', recieve_time:'9.45 ms', out:'0.13 MB', send time:'0.00 ms'

Compuatation Communication ratio (comp/(comp+comm)):
forward {0: 0.85, 1: 0.85, 2: 0.84, 3: 0.85, 4: 0.84, 5: 0.85, 6: 0.85, 7: 1.0} 
backward {0: 1.0, 1: 0.94, 2: 0.94, 3: 0.94, 4: 0.94, 5: 0.95, 6: 0.94, 7: 0.94}

Analysis for T = fwd + bwd:
 {'expected_compute_utilization': {0: 0.98,
                                  1: 0.98,
                                  2: 0.94,
                                  3: 0.99,
                                  4: 0.94,
                                  5: 1.0,
                                  6: 0.96,
                                  7: 0.95},
 'pipeline_no_comm': {0: 215.53,
                      1: 214.87,
                      2: 207.84,
                      3: 216.74,
                      4: 207.7,
                      5: 220.04,
                      6: 212.27,
                      7: 209.41,
                      'worstcase': 220.04},
 'pipeline_vs_seq_no_comm': 5.78,
 'pipeline_with_non_parallel_comm': {0: 224.99,
                                     1: 233.78,
                                     2: 226.75,
                                     3: 235.65,
                                     4: 226.61,
                                     5: 238.95,
                                     6: 231.18,
                                     7: 218.86,
                                     'worstcase': 238.95},
 'seq_no_comm_no_recomp': {0: 161.13,
                           1: 159.8,
                           2: 155.7,
                           3: 161.65,
                           4: 155.63,
                           5: 163.96,
                           6: 159.14,
                           7: 155.53}}

Analysis for T = (1-R)fwd + R*bwd:

Pipeline Slowdown: (compared to sequential executation with no communication, and same recompute policy)
forward 1.217
backward 1.090

Expected utilization by partition
forward {0: 0.84, 1: 0.84, 2: 0.78, 3: 0.84, 4: 0.78, 5: 0.85, 6: 0.8, 7: 0.82}
backward {0: 0.93, 1: 0.93, 2: 0.91, 3: 0.94, 4: 0.9, 5: 0.95, 6: 0.92, 7: 0.9}

worstcase: bwd: 173.958 fwd: 64.990
expected_speedup_compared_to_seq_no_recomp_no_comm: 5.326
Expected speedup for 8 partitions is: 7.116
Analysis max cuda memory used 5.19GB
"""