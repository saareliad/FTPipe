"""AutoGenerated with:
python partition_glue_models.py --model_type roberta --model_name_or_path roberta-base --n_partitions 8 --use_METIS --bw 11 --partitioning_batch_size 32 --analysis_batch_size 32 --n_iter 1 --generate_model_parallel -a --metis_contig --precompute_attention_mask --overwrite_cache
"""
import torch
import torch.nn.functional
import math
import torch.functional
from torch import Tensor
import torch.nn as nn
from itertools import chain
from typing import Optional, Tuple, Iterator, Iterable, OrderedDict, Dict
import collections
import os
from torch.nn.modules.activation import Softmax
from torch.nn.modules.activation import Tanh
from torch.nn.modules.dropout import Dropout
from torch.nn.modules.linear import Linear
from torch.nn.modules.normalization import LayerNorm
from torch.nn.modules.sparse import Embedding
# this is an auto generated file do not edit unless you know what you are doing


# partition adjacency
# model inputs {0, 1, 2, 3, 4, 5, 6, 7}
# partition 0 {'inputs': {'input0'}, 'outputs': {1}}
# partition 1 {'inputs': {'input1', 0}, 'outputs': {2}}
# partition 2 {'inputs': {'input1', 1}, 'outputs': {3}}
# partition 3 {'inputs': {'input1', 2}, 'outputs': {4}}
# partition 4 {'inputs': {'input1', 3}, 'outputs': {5}}
# partition 5 {'inputs': {'input1', 4}, 'outputs': {6}}
# partition 6 {'inputs': {'input1', 5}, 'outputs': {7}}
# partition 7 {'inputs': {'input1', 6}, 'outputs': {'output'}}
# model outputs {7}


def create_pipeline_configuration(DEBUG=False):
    basic_blocks = (Softmax,Tanh,Dropout,Linear,LayerNorm,Embedding)
    module_path = os.path.relpath(__file__).replace("/",".")[:-3]
    
    config = {
        'batch_dim': 0,
        'depth': 10000,
        'basic_blocks': ['torch.nn.modules.activation.Softmax', 'torch.nn.modules.activation.Tanh', 'torch.nn.modules.dropout.Dropout', 'torch.nn.modules.linear.Linear', 'torch.nn.modules.normalization.LayerNorm', 'torch.nn.modules.sparse.Embedding'],
        'model_inputs': {
            'input0': {
                'shape': torch.Size([32, 128]),
                'dtype': torch.int64,
                'is_batched': True},
            'input1': {
                'shape': torch.Size([32, 1, 1, 128]),
                'dtype': torch.float32,
                'is_batched': True}},
        'model_outputs': {
            'RobertaForSequenceClassification/RobertaClassificationHead[classifier]/Linear[out_proj]': {
                'shape': torch.Size([32, 3]),
                'dtype': torch.float32,
                'is_batched': True}},
        'stages': {
            0: {
                'inputs': {
                    'input0': {
                        'shape': torch.Size([32, 128]),
                        'dtype': torch.int64,
                        'req_grad': False,
                        'is_batched': True}},
                'outputs': {
                    'RobertaForSequenceClassification/RobertaModel[roberta]/RobertaEmbeddings[embeddings]/Dropout[dropout]': {
                        'shape': torch.Size([32, 128, 768]),
                        'dtype': torch.float32,
                        'is_batched': True},
                    'RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[0]/BertAttention[attention]/BertSelfAttention[self]/Tensor::permute_96': {
                        'shape': torch.Size([32, 12, 128, 64]),
                        'dtype': torch.float32,
                        'is_batched': True},
                    'RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[0]/BertAttention[attention]/BertSelfAttention[self]/torch::matmul_100': {
                        'shape': torch.Size([32, 12, 128, 128]),
                        'dtype': torch.float32,
                        'is_batched': True}}},
            1: {
                'inputs': {
                    'input1': {
                        'shape': torch.Size([32, 1, 1, 128]),
                        'dtype': torch.float32,
                        'req_grad': False,
                        'is_batched': True},
                    'RobertaForSequenceClassification/RobertaModel[roberta]/RobertaEmbeddings[embeddings]/Dropout[dropout]': {
                        'shape': torch.Size([32, 128, 768]),
                        'dtype': torch.float32,
                        'req_grad': True,
                        'is_batched': True},
                    'RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[0]/BertAttention[attention]/BertSelfAttention[self]/Tensor::permute_96': {
                        'shape': torch.Size([32, 12, 128, 64]),
                        'dtype': torch.float32,
                        'req_grad': True,
                        'is_batched': True},
                    'RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[0]/BertAttention[attention]/BertSelfAttention[self]/torch::matmul_100': {
                        'shape': torch.Size([32, 12, 128, 128]),
                        'dtype': torch.float32,
                        'req_grad': True,
                        'is_batched': True}},
                'outputs': {
                    'RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[1]/BertOutput[output]/Tensor::__add___256': {
                        'shape': torch.Size([32, 128, 768]),
                        'dtype': torch.float32,
                        'is_batched': True}}},
            2: {
                'inputs': {
                    'input1': {
                        'shape': torch.Size([32, 1, 1, 128]),
                        'dtype': torch.float32,
                        'req_grad': False,
                        'is_batched': True},
                    'RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[1]/BertOutput[output]/Tensor::__add___256': {
                        'shape': torch.Size([32, 128, 768]),
                        'dtype': torch.float32,
                        'req_grad': True,
                        'is_batched': True}},
                'outputs': {
                    'RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[3]/BertAttention[attention]/BertSelfOutput[output]/Tensor::__add___486': {
                        'shape': torch.Size([32, 128, 768]),
                        'dtype': torch.float32,
                        'is_batched': True}}},
            3: {
                'inputs': {
                    'input1': {
                        'shape': torch.Size([32, 1, 1, 128]),
                        'dtype': torch.float32,
                        'req_grad': False,
                        'is_batched': True},
                    'RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[3]/BertAttention[attention]/BertSelfOutput[output]/Tensor::__add___486': {
                        'shape': torch.Size([32, 128, 768]),
                        'dtype': torch.float32,
                        'req_grad': True,
                        'is_batched': True}},
                'outputs': {
                    'RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[4]/BertOutput[output]/LayerNorm[LayerNorm]': {
                        'shape': torch.Size([32, 128, 768]),
                        'dtype': torch.float32,
                        'is_batched': True},
                    'RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[5]/BertAttention[attention]/BertSelfAttention[self]/torch::matmul_697': {
                        'shape': torch.Size([32, 12, 128, 64]),
                        'dtype': torch.float32,
                        'is_batched': True}}},
            4: {
                'inputs': {
                    'input1': {
                        'shape': torch.Size([32, 1, 1, 128]),
                        'dtype': torch.float32,
                        'req_grad': False,
                        'is_batched': True},
                    'RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[4]/BertOutput[output]/LayerNorm[LayerNorm]': {
                        'shape': torch.Size([32, 128, 768]),
                        'dtype': torch.float32,
                        'req_grad': True,
                        'is_batched': True},
                    'RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[5]/BertAttention[attention]/BertSelfAttention[self]/torch::matmul_697': {
                        'shape': torch.Size([32, 12, 128, 64]),
                        'dtype': torch.float32,
                        'req_grad': True,
                        'is_batched': True}},
                'outputs': {
                    'RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[6]/BertOutput[output]/LayerNorm[LayerNorm]': {
                        'shape': torch.Size([32, 128, 768]),
                        'dtype': torch.float32,
                        'is_batched': True},
                    'RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[7]/BertAttention[attention]/BertSelfAttention[self]/Linear[query]': {
                        'shape': torch.Size([32, 128, 768]),
                        'dtype': torch.float32,
                        'is_batched': True},
                    'RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[7]/BertAttention[attention]/BertSelfAttention[self]/Size::__add___860': {
                        'shape': None,
                        'dtype': torch.Size,
                        'is_batched': False},
                    'RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[7]/BertAttention[attention]/BertSelfAttention[self]/Tensor::view_893': {
                        'shape': torch.Size([32, 128, 12, 64]),
                        'dtype': torch.float32,
                        'is_batched': True}}},
            5: {
                'inputs': {
                    'input1': {
                        'shape': torch.Size([32, 1, 1, 128]),
                        'dtype': torch.float32,
                        'req_grad': False,
                        'is_batched': True},
                    'RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[6]/BertOutput[output]/LayerNorm[LayerNorm]': {
                        'shape': torch.Size([32, 128, 768]),
                        'dtype': torch.float32,
                        'req_grad': True,
                        'is_batched': True},
                    'RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[7]/BertAttention[attention]/BertSelfAttention[self]/Linear[query]': {
                        'shape': torch.Size([32, 128, 768]),
                        'dtype': torch.float32,
                        'req_grad': True,
                        'is_batched': True},
                    'RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[7]/BertAttention[attention]/BertSelfAttention[self]/Size::__add___860': {
                        'shape': None,
                        'dtype': torch.Size,
                        'req_grad': False,
                        'is_batched': False},
                    'RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[7]/BertAttention[attention]/BertSelfAttention[self]/Tensor::view_893': {
                        'shape': torch.Size([32, 128, 12, 64]),
                        'dtype': torch.float32,
                        'req_grad': True,
                        'is_batched': True}},
                'outputs': {
                    'RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[8]/BertAttention[attention]/BertSelfOutput[output]/Tensor::__add___1076': {
                        'shape': torch.Size([32, 128, 768]),
                        'dtype': torch.float32,
                        'is_batched': True}}},
            6: {
                'inputs': {
                    'input1': {
                        'shape': torch.Size([32, 1, 1, 128]),
                        'dtype': torch.float32,
                        'req_grad': False,
                        'is_batched': True},
                    'RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[8]/BertAttention[attention]/BertSelfOutput[output]/Tensor::__add___1076': {
                        'shape': torch.Size([32, 128, 768]),
                        'dtype': torch.float32,
                        'req_grad': True,
                        'is_batched': True}},
                'outputs': {
                    'RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[9]/BertOutput[output]/Tensor::__add___1200': {
                        'shape': torch.Size([32, 128, 768]),
                        'dtype': torch.float32,
                        'is_batched': True}}},
            7: {
                'inputs': {
                    'input1': {
                        'shape': torch.Size([32, 1, 1, 128]),
                        'dtype': torch.float32,
                        'req_grad': False,
                        'is_batched': True},
                    'RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[9]/BertOutput[output]/Tensor::__add___1200': {
                        'shape': torch.Size([32, 128, 768]),
                        'dtype': torch.float32,
                        'req_grad': True,
                        'is_batched': True}},
                'outputs': {
                    'RobertaForSequenceClassification/RobertaClassificationHead[classifier]/Linear[out_proj]': {
                        'shape': torch.Size([32, 3]),
                        'dtype': torch.float32,
                        'is_batched': True}}}}}
    
    config['stages'][0]['stage_cls'] = module_path+'.Partition0'
    config['stages'][1]['stage_cls'] = module_path+'.Partition1'
    config['stages'][2]['stage_cls'] = module_path+'.Partition2'
    config['stages'][3]['stage_cls'] = module_path+'.Partition3'
    config['stages'][4]['stage_cls'] = module_path+'.Partition4'
    config['stages'][5]['stage_cls'] = module_path+'.Partition5'
    config['stages'][6]['stage_cls'] = module_path+'.Partition6'
    config['stages'][7]['stage_cls'] = module_path+'.Partition7'
    
    config['stages'][0]['devices'] = ['cpu' if DEBUG else 'cuda:0']
    config['stages'][1]['devices'] = ['cpu' if DEBUG else 'cuda:1']
    config['stages'][2]['devices'] = ['cpu' if DEBUG else 'cuda:2']
    config['stages'][3]['devices'] = ['cpu' if DEBUG else 'cuda:3']
    config['stages'][4]['devices'] = ['cpu' if DEBUG else 'cuda:4']
    config['stages'][5]['devices'] = ['cpu' if DEBUG else 'cuda:5']
    config['stages'][6]['devices'] = ['cpu' if DEBUG else 'cuda:6']
    config['stages'][7]['devices'] = ['cpu' if DEBUG else 'cuda:7']
    
    return config


class ModelParallel(nn.Module):
    def __init__(self,partition0, partition1, partition2, partition3, partition4, partition5, partition6, partition7):
        super(ModelParallel,self).__init__()
        self.batch_dim = 0
        self.streams = None
        self.stage0 = partition0
        self.stage1 = partition1
        self.stage2 = partition2
        self.stage3 = partition3
        self.stage4 = partition4
        self.stage5 = partition5
        self.stage6 = partition6
        self.stage7 = partition7

    def create_streams(self,num_chunks):
        # create a CUDA stream for every chunk for every device num_chunks X num_devices streams
        if (self.streams is None) or len(self.streams[0]) != num_chunks:
            self.streams = []
            self.streams.append([torch.cuda.Stream(self.stage0.device) for _ in range(num_chunks)])
            self.streams.append([torch.cuda.Stream(self.stage1.device) for _ in range(num_chunks)])
            self.streams.append([torch.cuda.Stream(self.stage2.device) for _ in range(num_chunks)])
            self.streams.append([torch.cuda.Stream(self.stage3.device) for _ in range(num_chunks)])
            self.streams.append([torch.cuda.Stream(self.stage4.device) for _ in range(num_chunks)])
            self.streams.append([torch.cuda.Stream(self.stage5.device) for _ in range(num_chunks)])
            self.streams.append([torch.cuda.Stream(self.stage6.device) for _ in range(num_chunks)])
            self.streams.append([torch.cuda.Stream(self.stage7.device) for _ in range(num_chunks)])

    def current_stream(self,stage_id, chunk_id):
        # return the stream for the current device and micro batch
        return torch.cuda.stream(self.streams[stage_id][chunk_id])

    def sync_with_prev_tasks(self,stage_id, chunk_id):
        stream = torch.cuda.current_stream()
        # wait until the mb was cleared by previous partition
        stream.wait_stream(self.streams[stage_id-1][chunk_id])
        # wait until previous mb was cleared by this partition
        stream.wait_stream(self.streams[stage_id][chunk_id-1])

    def chunk_inputs(self,inputs,batched,num_chunks):
        chunks = [[] for _ in range(num_chunks)]
        for input,is_batched in zip(flatten(inputs),flatten(batched)):
            if is_batched:
                sizes = torch.full((num_chunks,), input.size(self.batch_dim) // num_chunks, dtype=torch.int32)
                sizes[:input.size(self.batch_dim) % num_chunks] += 1
                xs = [x.contiguous() for x in torch.split(input, sizes.tolist(), dim=self.batch_dim)]
            else:
                xs = [x for _ in range(num_chunks)]
    
            for i,x in enumerate(xs):
                chunks[i].append(x)
        
        return [unflatten(chunk,batched) for chunk in chunks]

    def merge_outputs(self,chunks, batched):
        flattened_is_batched = list(flatten(batched))
        buckets = [[] for _ in flattened_is_batched]
    
        for chunk in chunks:
            for idx,x in enumerate(flatten(chunk)):
                buckets[idx].append(x)
        
        merged = []
        for xs,is_batched in zip(buckets,flattened_is_batched):
            if is_batched:
                merged.append(torch.cat(xs,dim=self.batch_dim))
            else:
                merged.append(sum(xs))
        
        return unflatten(merged,batched)

    def forward(self,input0, input1):
        t_0, t_1, t_2 = self.stage0(input0)
        t_3 = self.stage1(input1, t_0, t_1, t_2)[0]
        t_4 = self.stage2(input1, t_3)[0]
        t_5, t_6 = self.stage3(input1, t_4)
        t_7, t_8, t_9, t_10 = self.stage4(input1, t_5, t_6)
        t_11 = self.stage5(input1, t_7, t_8, t_9, t_10)[0]
        t_12 = self.stage6(input1, t_11)[0]
        t_13 = self.stage7(input1, t_12)[0]
        return t_13

    def pipelined_forward(self,input0, input1, num_chunks=8):
        # chunk inputs
        input0 = self.chunk_inputs(input0, True, num_chunks)
        input1 = self.chunk_inputs(input1, True, num_chunks)
        
        # create output chunk placeholders
        t_13_chunks = []
        assert num_chunks >= len(list(self.children()))
        chunk_id = 0
        
        # filling the pipeline feed chunks until the first chunk enters last stage
        t_0, t_1, t_2 = self.stage0(input0[chunk_id - 0])
        chunk_id += 1
        
        t_3 = self.stage1(input1[chunk_id - 1], t_0, t_1, t_2)[0]
        t_0, t_1, t_2 = self.stage0(input0[chunk_id - 0])
        chunk_id += 1
        
        t_4 = self.stage2(input1[chunk_id - 2], t_3)[0]
        t_3 = self.stage1(input1[chunk_id - 1], t_0, t_1, t_2)[0]
        t_0, t_1, t_2 = self.stage0(input0[chunk_id - 0])
        chunk_id += 1
        
        t_5, t_6 = self.stage3(input1[chunk_id - 3], t_4)
        t_4 = self.stage2(input1[chunk_id - 2], t_3)[0]
        t_3 = self.stage1(input1[chunk_id - 1], t_0, t_1, t_2)[0]
        t_0, t_1, t_2 = self.stage0(input0[chunk_id - 0])
        chunk_id += 1
        
        t_7, t_8, t_9, t_10 = self.stage4(input1[chunk_id - 4], t_5, t_6)
        t_5, t_6 = self.stage3(input1[chunk_id - 3], t_4)
        t_4 = self.stage2(input1[chunk_id - 2], t_3)[0]
        t_3 = self.stage1(input1[chunk_id - 1], t_0, t_1, t_2)[0]
        t_0, t_1, t_2 = self.stage0(input0[chunk_id - 0])
        chunk_id += 1
        
        t_11 = self.stage5(input1[chunk_id - 5], t_7, t_8, t_9, t_10)[0]
        t_7, t_8, t_9, t_10 = self.stage4(input1[chunk_id - 4], t_5, t_6)
        t_5, t_6 = self.stage3(input1[chunk_id - 3], t_4)
        t_4 = self.stage2(input1[chunk_id - 2], t_3)[0]
        t_3 = self.stage1(input1[chunk_id - 1], t_0, t_1, t_2)[0]
        t_0, t_1, t_2 = self.stage0(input0[chunk_id - 0])
        chunk_id += 1
        
        t_12 = self.stage6(input1[chunk_id - 6], t_11)[0]
        t_11 = self.stage5(input1[chunk_id - 5], t_7, t_8, t_9, t_10)[0]
        t_7, t_8, t_9, t_10 = self.stage4(input1[chunk_id - 4], t_5, t_6)
        t_5, t_6 = self.stage3(input1[chunk_id - 3], t_4)
        t_4 = self.stage2(input1[chunk_id - 2], t_3)[0]
        t_3 = self.stage1(input1[chunk_id - 1], t_0, t_1, t_2)[0]
        t_0, t_1, t_2 = self.stage0(input0[chunk_id - 0])
        chunk_id += 1
        
        # steady phase pipeline is full every stage processes a chunk in parallel
        for _ in range(num_chunks - 7):
            t_13 = self.stage7(input1[chunk_id - 7], t_12)[0]
            t_12 = self.stage6(input1[chunk_id - 6], t_11)[0]
            t_11 = self.stage5(input1[chunk_id - 5], t_7, t_8, t_9, t_10)[0]
            t_7, t_8, t_9, t_10 = self.stage4(input1[chunk_id - 4], t_5, t_6)
            t_5, t_6 = self.stage3(input1[chunk_id - 3], t_4)
            t_4 = self.stage2(input1[chunk_id - 2], t_3)[0]
            t_3 = self.stage1(input1[chunk_id - 1], t_0, t_1, t_2)[0]
            t_0, t_1, t_2 = self.stage0(input0[chunk_id - 0])
            t_13_chunks.append(t_13)
            chunk_id += 1
        
        # empty the pipeline until the last chunk leaves the last stage
        t_13 = self.stage7(input1[chunk_id - 7], t_12)[0]
        t_12 = self.stage6(input1[chunk_id - 6], t_11)[0]
        t_11 = self.stage5(input1[chunk_id - 5], t_7, t_8, t_9, t_10)[0]
        t_7, t_8, t_9, t_10 = self.stage4(input1[chunk_id - 4], t_5, t_6)
        t_5, t_6 = self.stage3(input1[chunk_id - 3], t_4)
        t_4 = self.stage2(input1[chunk_id - 2], t_3)[0]
        t_3 = self.stage1(input1[chunk_id - 1], t_0, t_1, t_2)[0]
        t_13_chunks.append(t_13)
        chunk_id += 1
        
        t_13 = self.stage7(input1[chunk_id - 7], t_12)[0]
        t_12 = self.stage6(input1[chunk_id - 6], t_11)[0]
        t_11 = self.stage5(input1[chunk_id - 5], t_7, t_8, t_9, t_10)[0]
        t_7, t_8, t_9, t_10 = self.stage4(input1[chunk_id - 4], t_5, t_6)
        t_5, t_6 = self.stage3(input1[chunk_id - 3], t_4)
        t_4 = self.stage2(input1[chunk_id - 2], t_3)[0]
        t_13_chunks.append(t_13)
        chunk_id += 1
        
        t_13 = self.stage7(input1[chunk_id - 7], t_12)[0]
        t_12 = self.stage6(input1[chunk_id - 6], t_11)[0]
        t_11 = self.stage5(input1[chunk_id - 5], t_7, t_8, t_9, t_10)[0]
        t_7, t_8, t_9, t_10 = self.stage4(input1[chunk_id - 4], t_5, t_6)
        t_5, t_6 = self.stage3(input1[chunk_id - 3], t_4)
        t_13_chunks.append(t_13)
        chunk_id += 1
        
        t_13 = self.stage7(input1[chunk_id - 7], t_12)[0]
        t_12 = self.stage6(input1[chunk_id - 6], t_11)[0]
        t_11 = self.stage5(input1[chunk_id - 5], t_7, t_8, t_9, t_10)[0]
        t_7, t_8, t_9, t_10 = self.stage4(input1[chunk_id - 4], t_5, t_6)
        t_13_chunks.append(t_13)
        chunk_id += 1
        
        t_13 = self.stage7(input1[chunk_id - 7], t_12)[0]
        t_12 = self.stage6(input1[chunk_id - 6], t_11)[0]
        t_11 = self.stage5(input1[chunk_id - 5], t_7, t_8, t_9, t_10)[0]
        t_13_chunks.append(t_13)
        chunk_id += 1
        
        t_13 = self.stage7(input1[chunk_id - 7], t_12)[0]
        t_12 = self.stage6(input1[chunk_id - 6], t_11)[0]
        t_13_chunks.append(t_13)
        chunk_id += 1
        
        t_13 = self.stage7(input1[chunk_id - 7], t_12)[0]
        t_13_chunks.append(t_13)
        chunk_id += 1
        
        return self.merge_outputs(t_13_chunks,True)

    def pipelined_forward_with_streams(self,input0, input1, num_chunks=8):
        self.create_streams(num_chunks)
        # chunk inputs
        input0 = self.chunk_inputs(input0, True, num_chunks)
        input1 = self.chunk_inputs(input1, True, num_chunks)
        
        # create output chunk placeholders
        t_13_chunks = []
        assert num_chunks >= len(list(self.children()))
        chunk_id = 0
        
        # filling the pipeline feed chunks until the first chunk enters last stage
        with self.current_stream(0, chunk_id - 0):
            self.sync_with_prev_tasks(0, chunk_id - 0)
            t_0, t_1, t_2 = self.stage0(input0[chunk_id - 0])
        chunk_id += 1
        
        with self.current_stream(1, chunk_id - 1):
            self.sync_with_prev_tasks(1, chunk_id - 1)
            t_3 = self.stage1(input1[chunk_id - 1], t_0, t_1, t_2)[0]
        with self.current_stream(0, chunk_id - 0):
            self.sync_with_prev_tasks(0, chunk_id - 0)
            t_0, t_1, t_2 = self.stage0(input0[chunk_id - 0])
        chunk_id += 1
        
        with self.current_stream(2, chunk_id - 2):
            self.sync_with_prev_tasks(2, chunk_id - 2)
            t_4 = self.stage2(input1[chunk_id - 2], t_3)[0]
        with self.current_stream(1, chunk_id - 1):
            self.sync_with_prev_tasks(1, chunk_id - 1)
            t_3 = self.stage1(input1[chunk_id - 1], t_0, t_1, t_2)[0]
        with self.current_stream(0, chunk_id - 0):
            self.sync_with_prev_tasks(0, chunk_id - 0)
            t_0, t_1, t_2 = self.stage0(input0[chunk_id - 0])
        chunk_id += 1
        
        with self.current_stream(3, chunk_id - 3):
            self.sync_with_prev_tasks(3, chunk_id - 3)
            t_5, t_6 = self.stage3(input1[chunk_id - 3], t_4)
        with self.current_stream(2, chunk_id - 2):
            self.sync_with_prev_tasks(2, chunk_id - 2)
            t_4 = self.stage2(input1[chunk_id - 2], t_3)[0]
        with self.current_stream(1, chunk_id - 1):
            self.sync_with_prev_tasks(1, chunk_id - 1)
            t_3 = self.stage1(input1[chunk_id - 1], t_0, t_1, t_2)[0]
        with self.current_stream(0, chunk_id - 0):
            self.sync_with_prev_tasks(0, chunk_id - 0)
            t_0, t_1, t_2 = self.stage0(input0[chunk_id - 0])
        chunk_id += 1
        
        with self.current_stream(4, chunk_id - 4):
            self.sync_with_prev_tasks(4, chunk_id - 4)
            t_7, t_8, t_9, t_10 = self.stage4(input1[chunk_id - 4], t_5, t_6)
        with self.current_stream(3, chunk_id - 3):
            self.sync_with_prev_tasks(3, chunk_id - 3)
            t_5, t_6 = self.stage3(input1[chunk_id - 3], t_4)
        with self.current_stream(2, chunk_id - 2):
            self.sync_with_prev_tasks(2, chunk_id - 2)
            t_4 = self.stage2(input1[chunk_id - 2], t_3)[0]
        with self.current_stream(1, chunk_id - 1):
            self.sync_with_prev_tasks(1, chunk_id - 1)
            t_3 = self.stage1(input1[chunk_id - 1], t_0, t_1, t_2)[0]
        with self.current_stream(0, chunk_id - 0):
            self.sync_with_prev_tasks(0, chunk_id - 0)
            t_0, t_1, t_2 = self.stage0(input0[chunk_id - 0])
        chunk_id += 1
        
        with self.current_stream(5, chunk_id - 5):
            self.sync_with_prev_tasks(5, chunk_id - 5)
            t_11 = self.stage5(input1[chunk_id - 5], t_7, t_8, t_9, t_10)[0]
        with self.current_stream(4, chunk_id - 4):
            self.sync_with_prev_tasks(4, chunk_id - 4)
            t_7, t_8, t_9, t_10 = self.stage4(input1[chunk_id - 4], t_5, t_6)
        with self.current_stream(3, chunk_id - 3):
            self.sync_with_prev_tasks(3, chunk_id - 3)
            t_5, t_6 = self.stage3(input1[chunk_id - 3], t_4)
        with self.current_stream(2, chunk_id - 2):
            self.sync_with_prev_tasks(2, chunk_id - 2)
            t_4 = self.stage2(input1[chunk_id - 2], t_3)[0]
        with self.current_stream(1, chunk_id - 1):
            self.sync_with_prev_tasks(1, chunk_id - 1)
            t_3 = self.stage1(input1[chunk_id - 1], t_0, t_1, t_2)[0]
        with self.current_stream(0, chunk_id - 0):
            self.sync_with_prev_tasks(0, chunk_id - 0)
            t_0, t_1, t_2 = self.stage0(input0[chunk_id - 0])
        chunk_id += 1
        
        with self.current_stream(6, chunk_id - 6):
            self.sync_with_prev_tasks(6, chunk_id - 6)
            t_12 = self.stage6(input1[chunk_id - 6], t_11)[0]
        with self.current_stream(5, chunk_id - 5):
            self.sync_with_prev_tasks(5, chunk_id - 5)
            t_11 = self.stage5(input1[chunk_id - 5], t_7, t_8, t_9, t_10)[0]
        with self.current_stream(4, chunk_id - 4):
            self.sync_with_prev_tasks(4, chunk_id - 4)
            t_7, t_8, t_9, t_10 = self.stage4(input1[chunk_id - 4], t_5, t_6)
        with self.current_stream(3, chunk_id - 3):
            self.sync_with_prev_tasks(3, chunk_id - 3)
            t_5, t_6 = self.stage3(input1[chunk_id - 3], t_4)
        with self.current_stream(2, chunk_id - 2):
            self.sync_with_prev_tasks(2, chunk_id - 2)
            t_4 = self.stage2(input1[chunk_id - 2], t_3)[0]
        with self.current_stream(1, chunk_id - 1):
            self.sync_with_prev_tasks(1, chunk_id - 1)
            t_3 = self.stage1(input1[chunk_id - 1], t_0, t_1, t_2)[0]
        with self.current_stream(0, chunk_id - 0):
            self.sync_with_prev_tasks(0, chunk_id - 0)
            t_0, t_1, t_2 = self.stage0(input0[chunk_id - 0])
        chunk_id += 1
        
        # steady phase pipeline is full every stage processes a chunk in parallel
        for _ in range(num_chunks - 7):
            with self.current_stream(7, chunk_id - 7):
                self.sync_with_prev_tasks(7,chunk_id - 7)
                t_13 = self.stage7(input1[chunk_id - 7], t_12)[0]
            with self.current_stream(6, chunk_id - 6):
                self.sync_with_prev_tasks(6,chunk_id - 6)
                t_12 = self.stage6(input1[chunk_id - 6], t_11)[0]
            with self.current_stream(5, chunk_id - 5):
                self.sync_with_prev_tasks(5,chunk_id - 5)
                t_11 = self.stage5(input1[chunk_id - 5], t_7, t_8, t_9, t_10)[0]
            with self.current_stream(4, chunk_id - 4):
                self.sync_with_prev_tasks(4,chunk_id - 4)
                t_7, t_8, t_9, t_10 = self.stage4(input1[chunk_id - 4], t_5, t_6)
            with self.current_stream(3, chunk_id - 3):
                self.sync_with_prev_tasks(3,chunk_id - 3)
                t_5, t_6 = self.stage3(input1[chunk_id - 3], t_4)
            with self.current_stream(2, chunk_id - 2):
                self.sync_with_prev_tasks(2,chunk_id - 2)
                t_4 = self.stage2(input1[chunk_id - 2], t_3)[0]
            with self.current_stream(1, chunk_id - 1):
                self.sync_with_prev_tasks(1,chunk_id - 1)
                t_3 = self.stage1(input1[chunk_id - 1], t_0, t_1, t_2)[0]
            with self.current_stream(0, chunk_id - 0):
                self.sync_with_prev_tasks(0,chunk_id - 0)
                t_0, t_1, t_2 = self.stage0(input0[chunk_id - 0])
            t_13_chunks.append(t_13)
            chunk_id += 1
        
        # empty the pipeline until the last chunk leaves the last stage
        with self.current_stream(7, chunk_id - 7):
            self.sync_with_prev_tasks(7, chunk_id - 7)
            t_13 = self.stage7(input1[chunk_id - 7], t_12)[0]
        with self.current_stream(6, chunk_id - 6):
            self.sync_with_prev_tasks(6, chunk_id - 6)
            t_12 = self.stage6(input1[chunk_id - 6], t_11)[0]
        with self.current_stream(5, chunk_id - 5):
            self.sync_with_prev_tasks(5, chunk_id - 5)
            t_11 = self.stage5(input1[chunk_id - 5], t_7, t_8, t_9, t_10)[0]
        with self.current_stream(4, chunk_id - 4):
            self.sync_with_prev_tasks(4, chunk_id - 4)
            t_7, t_8, t_9, t_10 = self.stage4(input1[chunk_id - 4], t_5, t_6)
        with self.current_stream(3, chunk_id - 3):
            self.sync_with_prev_tasks(3, chunk_id - 3)
            t_5, t_6 = self.stage3(input1[chunk_id - 3], t_4)
        with self.current_stream(2, chunk_id - 2):
            self.sync_with_prev_tasks(2, chunk_id - 2)
            t_4 = self.stage2(input1[chunk_id - 2], t_3)[0]
        with self.current_stream(1, chunk_id - 1):
            self.sync_with_prev_tasks(1, chunk_id - 1)
            t_3 = self.stage1(input1[chunk_id - 1], t_0, t_1, t_2)[0]
        t_13_chunks.append(t_13)
        chunk_id += 1
        
        with self.current_stream(7, chunk_id - 7):
            self.sync_with_prev_tasks(7, chunk_id - 7)
            t_13 = self.stage7(input1[chunk_id - 7], t_12)[0]
        with self.current_stream(6, chunk_id - 6):
            self.sync_with_prev_tasks(6, chunk_id - 6)
            t_12 = self.stage6(input1[chunk_id - 6], t_11)[0]
        with self.current_stream(5, chunk_id - 5):
            self.sync_with_prev_tasks(5, chunk_id - 5)
            t_11 = self.stage5(input1[chunk_id - 5], t_7, t_8, t_9, t_10)[0]
        with self.current_stream(4, chunk_id - 4):
            self.sync_with_prev_tasks(4, chunk_id - 4)
            t_7, t_8, t_9, t_10 = self.stage4(input1[chunk_id - 4], t_5, t_6)
        with self.current_stream(3, chunk_id - 3):
            self.sync_with_prev_tasks(3, chunk_id - 3)
            t_5, t_6 = self.stage3(input1[chunk_id - 3], t_4)
        with self.current_stream(2, chunk_id - 2):
            self.sync_with_prev_tasks(2, chunk_id - 2)
            t_4 = self.stage2(input1[chunk_id - 2], t_3)[0]
        t_13_chunks.append(t_13)
        chunk_id += 1
        
        with self.current_stream(7, chunk_id - 7):
            self.sync_with_prev_tasks(7, chunk_id - 7)
            t_13 = self.stage7(input1[chunk_id - 7], t_12)[0]
        with self.current_stream(6, chunk_id - 6):
            self.sync_with_prev_tasks(6, chunk_id - 6)
            t_12 = self.stage6(input1[chunk_id - 6], t_11)[0]
        with self.current_stream(5, chunk_id - 5):
            self.sync_with_prev_tasks(5, chunk_id - 5)
            t_11 = self.stage5(input1[chunk_id - 5], t_7, t_8, t_9, t_10)[0]
        with self.current_stream(4, chunk_id - 4):
            self.sync_with_prev_tasks(4, chunk_id - 4)
            t_7, t_8, t_9, t_10 = self.stage4(input1[chunk_id - 4], t_5, t_6)
        with self.current_stream(3, chunk_id - 3):
            self.sync_with_prev_tasks(3, chunk_id - 3)
            t_5, t_6 = self.stage3(input1[chunk_id - 3], t_4)
        t_13_chunks.append(t_13)
        chunk_id += 1
        
        with self.current_stream(7, chunk_id - 7):
            self.sync_with_prev_tasks(7, chunk_id - 7)
            t_13 = self.stage7(input1[chunk_id - 7], t_12)[0]
        with self.current_stream(6, chunk_id - 6):
            self.sync_with_prev_tasks(6, chunk_id - 6)
            t_12 = self.stage6(input1[chunk_id - 6], t_11)[0]
        with self.current_stream(5, chunk_id - 5):
            self.sync_with_prev_tasks(5, chunk_id - 5)
            t_11 = self.stage5(input1[chunk_id - 5], t_7, t_8, t_9, t_10)[0]
        with self.current_stream(4, chunk_id - 4):
            self.sync_with_prev_tasks(4, chunk_id - 4)
            t_7, t_8, t_9, t_10 = self.stage4(input1[chunk_id - 4], t_5, t_6)
        t_13_chunks.append(t_13)
        chunk_id += 1
        
        with self.current_stream(7, chunk_id - 7):
            self.sync_with_prev_tasks(7, chunk_id - 7)
            t_13 = self.stage7(input1[chunk_id - 7], t_12)[0]
        with self.current_stream(6, chunk_id - 6):
            self.sync_with_prev_tasks(6, chunk_id - 6)
            t_12 = self.stage6(input1[chunk_id - 6], t_11)[0]
        with self.current_stream(5, chunk_id - 5):
            self.sync_with_prev_tasks(5, chunk_id - 5)
            t_11 = self.stage5(input1[chunk_id - 5], t_7, t_8, t_9, t_10)[0]
        t_13_chunks.append(t_13)
        chunk_id += 1
        
        with self.current_stream(7, chunk_id - 7):
            self.sync_with_prev_tasks(7, chunk_id - 7)
            t_13 = self.stage7(input1[chunk_id - 7], t_12)[0]
        with self.current_stream(6, chunk_id - 6):
            self.sync_with_prev_tasks(6, chunk_id - 6)
            t_12 = self.stage6(input1[chunk_id - 6], t_11)[0]
        t_13_chunks.append(t_13)
        chunk_id += 1
        
        with self.current_stream(7, chunk_id - 7):
            self.sync_with_prev_tasks(7, chunk_id - 7)
            t_13 = self.stage7(input1[chunk_id - 7], t_12)[0]
        t_13_chunks.append(t_13)
        chunk_id += 1
        
        torch.cuda.current_stream().wait_stream(self.streams[-1][-1])
        return self.merge_outputs(t_13_chunks,True)

    def state_dict(self):
        return {**self.stage0.state_dict(),
                **self.stage1.state_dict(),
                **self.stage2.state_dict(),
                **self.stage3.state_dict(),
                **self.stage4.state_dict(),
                **self.stage5.state_dict(),
                **self.stage6.state_dict(),
                **self.stage7.state_dict()}

    def load_state_dict(self,state):
        self.stage0.load_state_dict(state)
        self.stage1.load_state_dict(state)
        self.stage2.load_state_dict(state)
        self.stage3.load_state_dict(state)
        self.stage4.load_state_dict(state)
        self.stage5.load_state_dict(state)
        self.stage6.load_state_dict(state)
        self.stage7.load_state_dict(state)

    def named_buffers(self):
        return chain(self.stage0.named_buffers(),
                     self.stage1.named_buffers(),
                     self.stage2.named_buffers(),
                     self.stage3.named_buffers(),
                     self.stage4.named_buffers(),
                     self.stage5.named_buffers(),
                     self.stage6.named_buffers(),
                     self.stage7.named_buffers())

    def named_parameters(self):
        return chain(self.stage0.named_parameters(),
                     self.stage1.named_parameters(),
                     self.stage2.named_parameters(),
                     self.stage3.named_parameters(),
                     self.stage4.named_parameters(),
                     self.stage5.named_parameters(),
                     self.stage6.named_parameters(),
                     self.stage7.named_parameters())

    def buffers(self):
        return [b for _,b in self.named_buffers()]

    def parameters(self):
        return [p for _,p in self.named_parameters()]


class Partition0(nn.Module):
    BASIC_BLOCKS=(
            Embedding,
            Linear,
            Dropout,
            LayerNorm,
        )
    LAYER_SCOPES=[
            'RobertaForSequenceClassification/RobertaModel[roberta]/RobertaEmbeddings[embeddings]/Embedding[word_embeddings]',
            'RobertaForSequenceClassification/RobertaModel[roberta]/RobertaEmbeddings[embeddings]/Embedding[position_embeddings]',
            'RobertaForSequenceClassification/RobertaModel[roberta]/RobertaEmbeddings[embeddings]/Embedding[token_type_embeddings]',
            'RobertaForSequenceClassification/RobertaModel[roberta]/RobertaEmbeddings[embeddings]/LayerNorm[LayerNorm]',
            'RobertaForSequenceClassification/RobertaModel[roberta]/RobertaEmbeddings[embeddings]/Dropout[dropout]',
            'RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[0]/BertAttention[attention]/BertSelfAttention[self]/Linear[query]',
            'RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[0]/BertAttention[attention]/BertSelfAttention[self]/Linear[key]',
            'RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[0]/BertAttention[attention]/BertSelfAttention[self]/Linear[value]',
        ]
    TENSORS=[
        ]
    def __init__(self, layers, tensors, device='cuda:0'):
        super(Partition0, self).__init__()

        #initialize partition layers
        for idx,layer_scope in enumerate(self.LAYER_SCOPES):
            self.add_module(f'l_{idx}',layers[layer_scope])

        #initialize partition tensors
        b=p=0
        for tensor_scope in self.TENSORS:
            tensor=tensors[tensor_scope]
            if isinstance(tensor,nn.Parameter):
                self.register_parameter(f'p_{p}',tensor)
                p+=1
            else:
                self.register_buffer(f'b_{b}',tensor)
                b+=1

        self.device = torch.device(device)
        self.input_structure = [1]
        self.lookup = { 'l_0': 'roberta.embeddings.word_embeddings',
                        'l_1': 'roberta.embeddings.position_embeddings',
                        'l_2': 'roberta.embeddings.token_type_embeddings',
                        'l_3': 'roberta.embeddings.LayerNorm',
                        'l_4': 'roberta.embeddings.dropout',
                        'l_5': 'roberta.encoder.0.attention.self.query',
                        'l_6': 'roberta.encoder.0.attention.self.key',
                        'l_7': 'roberta.encoder.0.attention.self.value'}
        self.to(self.device)

    def forward(self, *args):
        # RobertaForSequenceClassification/RobertaModel[roberta]/RobertaEmbeddings[embeddings]/Embedding[word_embeddings] <=> self.l_0
        # RobertaForSequenceClassification/RobertaModel[roberta]/RobertaEmbeddings[embeddings]/Embedding[position_embeddings] <=> self.l_1
        # RobertaForSequenceClassification/RobertaModel[roberta]/RobertaEmbeddings[embeddings]/Embedding[token_type_embeddings] <=> self.l_2
        # RobertaForSequenceClassification/RobertaModel[roberta]/RobertaEmbeddings[embeddings]/LayerNorm[LayerNorm] <=> self.l_3
        # RobertaForSequenceClassification/RobertaModel[roberta]/RobertaEmbeddings[embeddings]/Dropout[dropout] <=> self.l_4
        # RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[0]/BertAttention[attention]/BertSelfAttention[self]/Linear[query] <=> self.l_5
        # RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[0]/BertAttention[attention]/BertSelfAttention[self]/Linear[key] <=> self.l_6
        # RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[0]/BertAttention[attention]/BertSelfAttention[self]/Linear[value] <=> self.l_7
        # input0 <=> x0

        # moving inputs to current device no op if already on the correct device
        x0 = move_tensors(unflatten(args,self.input_structure), self.device)[0]
        t_0 = torch.zeros_like(x0)
        t_1 = x0.ne(1)
        t_1 = t_1.int()
        t_2 = torch.cumsum(t_1, dim=1)
        t_2 = t_2.type_as(t_1)
        t_1 = t_2 * t_1
        t_1 = t_1.long()
        t_1 = t_1 + 1
        t_1 = t_1.to(self.device)
        t_2 = self.l_0(x0)
        t_1 = self.l_1(t_1)
        t_0 = self.l_2(t_0)
        t_1 = t_2 + t_1
        t_0 = t_1 + t_0
        t_0 = self.l_3(t_0)
        t_0 = self.l_4(t_0)
        t_1 = self.l_5(t_0)
        t_2 = self.l_6(t_0)
        t_3 = self.l_7(t_0)
        t_4 = t_1.size()
        t_5 = slice(None, -1, None)
        t_5 = t_4[t_5]
        t_4 = (12, 64)
        t_4 = t_5 + t_4
        t_5 = t_4[0]
        t_6 = t_4[1]
        t_7 = t_4[2]
        t_4 = t_4[3]
        t_4 = t_1.view(t_5, t_6, t_7, t_4)
        t_4 = t_4.permute(0, 2, 1, 3)
        t_7 = t_2.size()
        t_6 = slice(None, -1, None)
        t_6 = t_7[t_6]
        t_7 = (12, 64)
        t_7 = t_6 + t_7
        t_6 = t_7[0]
        t_5 = t_7[1]
        t_1 = t_7[2]
        t_7 = t_7[3]
        t_7 = t_2.view(t_6, t_5, t_1, t_7)
        t_7 = t_7.permute(0, 2, 1, 3)
        t_1 = t_3.size()
        t_5 = slice(None, -1, None)
        t_5 = t_1[t_5]
        t_1 = (12, 64)
        t_1 = t_5 + t_1
        t_5 = t_1[0]
        t_6 = t_1[1]
        t_2 = t_1[2]
        t_1 = t_1[3]
        t_1 = t_3.view(t_5, t_6, t_2, t_1)
        t_1 = t_1.permute(0, 2, 1, 3)
        t_7 = t_7.transpose(-1, -2)
        t_7 = torch.matmul(t_4, t_7)
        # returning:
        # RobertaForSequenceClassification/RobertaModel[roberta]/RobertaEmbeddings[embeddings]/Dropout[dropout]
        # RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[0]/BertAttention[attention]/BertSelfAttention[self]/Tensor::permute_96
        # RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[0]/BertAttention[attention]/BertSelfAttention[self]/torch::matmul_100
        return list(flatten((t_0, t_1, t_7)))

    def state_dict(self,device=None):
        # we return the state dict of this part as it should be in the original model
        return state_dict(self,device=device)

    def load_state_dict(self, state):
        return load_state_dict(self,state)

    def named_parameters(self,recurse=True):
        # we return the named parameters of this part as it should be in the original model
        return named_parameters(self,recurse=recurse)

    def named_buffers(self,recurse=True):
        # we return the named buffers of this part as it should be in the original model
        return named_buffers(self,recurse=recurse)

    def cpu(self):
        return cpu(self)

    def cuda(self,device=None):
        return cuda(self,device=device)

    def to(self, *args, **kwargs):
        return to(self,*args,**kwargs)


class Partition1(nn.Module):
    BASIC_BLOCKS=(
            LayerNorm,
            Linear,
            Softmax,
            Dropout,
        )
    LAYER_SCOPES=[
            'RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[0]/BertAttention[attention]/BertSelfAttention[self]/Softmax[softmax]',
            'RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[0]/BertAttention[attention]/BertSelfAttention[self]/Dropout[dropout]',
            'RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[0]/BertAttention[attention]/BertSelfOutput[output]/Linear[dense]',
            'RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[0]/BertAttention[attention]/BertSelfOutput[output]/Dropout[dropout]',
            'RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[0]/BertAttention[attention]/BertSelfOutput[output]/LayerNorm[LayerNorm]',
            'RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[0]/BertIntermediate[intermediate]/Linear[dense]',
            'RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[0]/BertOutput[output]/Linear[dense]',
            'RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[0]/BertOutput[output]/Dropout[dropout]',
            'RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[0]/BertOutput[output]/LayerNorm[LayerNorm]',
            'RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[1]/BertAttention[attention]/BertSelfAttention[self]/Linear[query]',
            'RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[1]/BertAttention[attention]/BertSelfAttention[self]/Linear[key]',
            'RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[1]/BertAttention[attention]/BertSelfAttention[self]/Linear[value]',
            'RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[1]/BertAttention[attention]/BertSelfAttention[self]/Softmax[softmax]',
            'RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[1]/BertAttention[attention]/BertSelfAttention[self]/Dropout[dropout]',
            'RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[1]/BertAttention[attention]/BertSelfOutput[output]/Linear[dense]',
            'RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[1]/BertAttention[attention]/BertSelfOutput[output]/Dropout[dropout]',
            'RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[1]/BertAttention[attention]/BertSelfOutput[output]/LayerNorm[LayerNorm]',
            'RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[1]/BertIntermediate[intermediate]/Linear[dense]',
            'RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[1]/BertOutput[output]/Linear[dense]',
            'RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[1]/BertOutput[output]/Dropout[dropout]',
        ]
    TENSORS=[
        ]
    def __init__(self, layers, tensors, device='cuda:1'):
        super(Partition1, self).__init__()

        #initialize partition layers
        for idx,layer_scope in enumerate(self.LAYER_SCOPES):
            self.add_module(f'l_{idx}',layers[layer_scope])

        #initialize partition tensors
        b=p=0
        for tensor_scope in self.TENSORS:
            tensor=tensors[tensor_scope]
            if isinstance(tensor,nn.Parameter):
                self.register_parameter(f'p_{p}',tensor)
                p+=1
            else:
                self.register_buffer(f'b_{b}',tensor)
                b+=1

        self.device = torch.device(device)
        self.input_structure = [1, 1, 1, 1]
        self.lookup = { 'l_0': 'roberta.encoder.0.attention.self.softmax',
                        'l_1': 'roberta.encoder.0.attention.self.dropout',
                        'l_2': 'roberta.encoder.0.attention.output.dense',
                        'l_3': 'roberta.encoder.0.attention.output.dropout',
                        'l_4': 'roberta.encoder.0.attention.output.LayerNorm',
                        'l_5': 'roberta.encoder.0.intermediate.dense',
                        'l_6': 'roberta.encoder.0.output.dense',
                        'l_7': 'roberta.encoder.0.output.dropout',
                        'l_8': 'roberta.encoder.0.output.LayerNorm',
                        'l_9': 'roberta.encoder.1.attention.self.query',
                        'l_10': 'roberta.encoder.1.attention.self.key',
                        'l_11': 'roberta.encoder.1.attention.self.value',
                        'l_12': 'roberta.encoder.1.attention.self.softmax',
                        'l_13': 'roberta.encoder.1.attention.self.dropout',
                        'l_14': 'roberta.encoder.1.attention.output.dense',
                        'l_15': 'roberta.encoder.1.attention.output.dropout',
                        'l_16': 'roberta.encoder.1.attention.output.LayerNorm',
                        'l_17': 'roberta.encoder.1.intermediate.dense',
                        'l_18': 'roberta.encoder.1.output.dense',
                        'l_19': 'roberta.encoder.1.output.dropout'}
        self.to(self.device)

    def forward(self, *args):
        # RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[0]/BertAttention[attention]/BertSelfAttention[self]/Softmax[softmax] <=> self.l_0
        # RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[0]/BertAttention[attention]/BertSelfAttention[self]/Dropout[dropout] <=> self.l_1
        # RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[0]/BertAttention[attention]/BertSelfOutput[output]/Linear[dense] <=> self.l_2
        # RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[0]/BertAttention[attention]/BertSelfOutput[output]/Dropout[dropout] <=> self.l_3
        # RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[0]/BertAttention[attention]/BertSelfOutput[output]/LayerNorm[LayerNorm] <=> self.l_4
        # RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[0]/BertIntermediate[intermediate]/Linear[dense] <=> self.l_5
        # RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[0]/BertOutput[output]/Linear[dense] <=> self.l_6
        # RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[0]/BertOutput[output]/Dropout[dropout] <=> self.l_7
        # RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[0]/BertOutput[output]/LayerNorm[LayerNorm] <=> self.l_8
        # RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[1]/BertAttention[attention]/BertSelfAttention[self]/Linear[query] <=> self.l_9
        # RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[1]/BertAttention[attention]/BertSelfAttention[self]/Linear[key] <=> self.l_10
        # RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[1]/BertAttention[attention]/BertSelfAttention[self]/Linear[value] <=> self.l_11
        # RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[1]/BertAttention[attention]/BertSelfAttention[self]/Softmax[softmax] <=> self.l_12
        # RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[1]/BertAttention[attention]/BertSelfAttention[self]/Dropout[dropout] <=> self.l_13
        # RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[1]/BertAttention[attention]/BertSelfOutput[output]/Linear[dense] <=> self.l_14
        # RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[1]/BertAttention[attention]/BertSelfOutput[output]/Dropout[dropout] <=> self.l_15
        # RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[1]/BertAttention[attention]/BertSelfOutput[output]/LayerNorm[LayerNorm] <=> self.l_16
        # RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[1]/BertIntermediate[intermediate]/Linear[dense] <=> self.l_17
        # RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[1]/BertOutput[output]/Linear[dense] <=> self.l_18
        # RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[1]/BertOutput[output]/Dropout[dropout] <=> self.l_19
        # input1 <=> x0
        # RobertaForSequenceClassification/RobertaModel[roberta]/RobertaEmbeddings[embeddings]/Dropout[dropout] <=> x1
        # RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[0]/BertAttention[attention]/BertSelfAttention[self]/Tensor::permute_96 <=> x2
        # RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[0]/BertAttention[attention]/BertSelfAttention[self]/torch::matmul_100 <=> x3

        # moving inputs to current device no op if already on the correct device
        x0, x1, x2, x3 = move_tensors(unflatten(args,self.input_structure), self.device)
        t_0 = math.sqrt(64)
        t_0 = x3 / t_0
        t_0 = t_0 + x0
        t_0 = self.l_0(t_0)
        t_0 = self.l_1(t_0)
        t_0 = torch.matmul(t_0, x2)
        t_0 = t_0.permute(0, 2, 1, 3)
        t_0 = t_0.contiguous()
        t_1 = t_0.size()
        t_2 = slice(None, -2, None)
        t_2 = t_1[t_2]
        t_1 = (768,)
        t_1 = t_2 + t_1
        t_2 = t_1[0]
        t_3 = t_1[1]
        t_1 = t_1[2]
        t_1 = t_0.view(t_2, t_3, t_1)
        t_1 = self.l_2(t_1)
        t_1 = self.l_3(t_1)
        t_1 = t_1 + x1
        t_1 = self.l_4(t_1)
        t_3 = self.l_5(t_1)
        t_3 = torch.nn.functional.gelu(t_3)
        t_3 = self.l_6(t_3)
        t_3 = self.l_7(t_3)
        t_1 = t_3 + t_1
        t_1 = self.l_8(t_1)
        t_3 = self.l_9(t_1)
        t_2 = self.l_10(t_1)
        t_0 = self.l_11(t_1)
        t_4 = t_3.size()
        t_5 = slice(None, -1, None)
        t_5 = t_4[t_5]
        t_4 = (12, 64)
        t_4 = t_5 + t_4
        t_5 = t_4[0]
        t_6 = t_4[1]
        t_7 = t_4[2]
        t_4 = t_4[3]
        t_4 = t_3.view(t_5, t_6, t_7, t_4)
        t_4 = t_4.permute(0, 2, 1, 3)
        t_7 = t_2.size()
        t_6 = slice(None, -1, None)
        t_6 = t_7[t_6]
        t_7 = (12, 64)
        t_7 = t_6 + t_7
        t_6 = t_7[0]
        t_5 = t_7[1]
        t_3 = t_7[2]
        t_7 = t_7[3]
        t_7 = t_2.view(t_6, t_5, t_3, t_7)
        t_7 = t_7.permute(0, 2, 1, 3)
        t_3 = t_0.size()
        t_5 = slice(None, -1, None)
        t_5 = t_3[t_5]
        t_3 = (12, 64)
        t_3 = t_5 + t_3
        t_5 = t_3[0]
        t_6 = t_3[1]
        t_2 = t_3[2]
        t_3 = t_3[3]
        t_3 = t_0.view(t_5, t_6, t_2, t_3)
        t_3 = t_3.permute(0, 2, 1, 3)
        t_7 = t_7.transpose(-1, -2)
        t_7 = torch.matmul(t_4, t_7)
        t_4 = math.sqrt(64)
        t_4 = t_7 / t_4
        t_4 = t_4 + x0
        t_4 = self.l_12(t_4)
        t_4 = self.l_13(t_4)
        t_3 = torch.matmul(t_4, t_3)
        t_3 = t_3.permute(0, 2, 1, 3)
        t_3 = t_3.contiguous()
        t_4 = t_3.size()
        t_7 = slice(None, -2, None)
        t_7 = t_4[t_7]
        t_4 = (768,)
        t_4 = t_7 + t_4
        t_7 = t_4[0]
        t_2 = t_4[1]
        t_4 = t_4[2]
        t_4 = t_3.view(t_7, t_2, t_4)
        t_4 = self.l_14(t_4)
        t_4 = self.l_15(t_4)
        t_1 = t_4 + t_1
        t_1 = self.l_16(t_1)
        t_4 = self.l_17(t_1)
        t_4 = torch.nn.functional.gelu(t_4)
        t_4 = self.l_18(t_4)
        t_4 = self.l_19(t_4)
        t_1 = t_4 + t_1
        # returning:
        # RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[1]/BertOutput[output]/Tensor::__add___256
        return (t_1,)

    def state_dict(self,device=None):
        # we return the state dict of this part as it should be in the original model
        return state_dict(self,device=device)

    def load_state_dict(self, state):
        return load_state_dict(self,state)

    def named_parameters(self,recurse=True):
        # we return the named parameters of this part as it should be in the original model
        return named_parameters(self,recurse=recurse)

    def named_buffers(self,recurse=True):
        # we return the named buffers of this part as it should be in the original model
        return named_buffers(self,recurse=recurse)

    def cpu(self):
        return cpu(self)

    def cuda(self,device=None):
        return cuda(self,device=device)

    def to(self, *args, **kwargs):
        return to(self,*args,**kwargs)


class Partition2(nn.Module):
    BASIC_BLOCKS=(
            Linear,
            Softmax,
            Dropout,
            LayerNorm,
        )
    LAYER_SCOPES=[
            'RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[1]/BertOutput[output]/LayerNorm[LayerNorm]',
            'RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[2]/BertAttention[attention]/BertSelfAttention[self]/Linear[query]',
            'RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[2]/BertAttention[attention]/BertSelfAttention[self]/Linear[key]',
            'RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[2]/BertAttention[attention]/BertSelfAttention[self]/Linear[value]',
            'RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[2]/BertAttention[attention]/BertSelfAttention[self]/Softmax[softmax]',
            'RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[2]/BertAttention[attention]/BertSelfAttention[self]/Dropout[dropout]',
            'RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[2]/BertAttention[attention]/BertSelfOutput[output]/Linear[dense]',
            'RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[2]/BertAttention[attention]/BertSelfOutput[output]/Dropout[dropout]',
            'RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[2]/BertAttention[attention]/BertSelfOutput[output]/LayerNorm[LayerNorm]',
            'RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[2]/BertIntermediate[intermediate]/Linear[dense]',
            'RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[2]/BertOutput[output]/Linear[dense]',
            'RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[2]/BertOutput[output]/Dropout[dropout]',
            'RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[2]/BertOutput[output]/LayerNorm[LayerNorm]',
            'RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[3]/BertAttention[attention]/BertSelfAttention[self]/Linear[query]',
            'RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[3]/BertAttention[attention]/BertSelfAttention[self]/Linear[key]',
            'RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[3]/BertAttention[attention]/BertSelfAttention[self]/Linear[value]',
            'RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[3]/BertAttention[attention]/BertSelfAttention[self]/Softmax[softmax]',
            'RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[3]/BertAttention[attention]/BertSelfAttention[self]/Dropout[dropout]',
            'RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[3]/BertAttention[attention]/BertSelfOutput[output]/Linear[dense]',
            'RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[3]/BertAttention[attention]/BertSelfOutput[output]/Dropout[dropout]',
        ]
    TENSORS=[
        ]
    def __init__(self, layers, tensors, device='cuda:2'):
        super(Partition2, self).__init__()

        #initialize partition layers
        for idx,layer_scope in enumerate(self.LAYER_SCOPES):
            self.add_module(f'l_{idx}',layers[layer_scope])

        #initialize partition tensors
        b=p=0
        for tensor_scope in self.TENSORS:
            tensor=tensors[tensor_scope]
            if isinstance(tensor,nn.Parameter):
                self.register_parameter(f'p_{p}',tensor)
                p+=1
            else:
                self.register_buffer(f'b_{b}',tensor)
                b+=1

        self.device = torch.device(device)
        self.input_structure = [1, 1]
        self.lookup = { 'l_0': 'roberta.encoder.1.output.LayerNorm',
                        'l_1': 'roberta.encoder.2.attention.self.query',
                        'l_2': 'roberta.encoder.2.attention.self.key',
                        'l_3': 'roberta.encoder.2.attention.self.value',
                        'l_4': 'roberta.encoder.2.attention.self.softmax',
                        'l_5': 'roberta.encoder.2.attention.self.dropout',
                        'l_6': 'roberta.encoder.2.attention.output.dense',
                        'l_7': 'roberta.encoder.2.attention.output.dropout',
                        'l_8': 'roberta.encoder.2.attention.output.LayerNorm',
                        'l_9': 'roberta.encoder.2.intermediate.dense',
                        'l_10': 'roberta.encoder.2.output.dense',
                        'l_11': 'roberta.encoder.2.output.dropout',
                        'l_12': 'roberta.encoder.2.output.LayerNorm',
                        'l_13': 'roberta.encoder.3.attention.self.query',
                        'l_14': 'roberta.encoder.3.attention.self.key',
                        'l_15': 'roberta.encoder.3.attention.self.value',
                        'l_16': 'roberta.encoder.3.attention.self.softmax',
                        'l_17': 'roberta.encoder.3.attention.self.dropout',
                        'l_18': 'roberta.encoder.3.attention.output.dense',
                        'l_19': 'roberta.encoder.3.attention.output.dropout'}
        self.to(self.device)

    def forward(self, *args):
        # RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[1]/BertOutput[output]/LayerNorm[LayerNorm] <=> self.l_0
        # RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[2]/BertAttention[attention]/BertSelfAttention[self]/Linear[query] <=> self.l_1
        # RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[2]/BertAttention[attention]/BertSelfAttention[self]/Linear[key] <=> self.l_2
        # RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[2]/BertAttention[attention]/BertSelfAttention[self]/Linear[value] <=> self.l_3
        # RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[2]/BertAttention[attention]/BertSelfAttention[self]/Softmax[softmax] <=> self.l_4
        # RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[2]/BertAttention[attention]/BertSelfAttention[self]/Dropout[dropout] <=> self.l_5
        # RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[2]/BertAttention[attention]/BertSelfOutput[output]/Linear[dense] <=> self.l_6
        # RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[2]/BertAttention[attention]/BertSelfOutput[output]/Dropout[dropout] <=> self.l_7
        # RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[2]/BertAttention[attention]/BertSelfOutput[output]/LayerNorm[LayerNorm] <=> self.l_8
        # RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[2]/BertIntermediate[intermediate]/Linear[dense] <=> self.l_9
        # RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[2]/BertOutput[output]/Linear[dense] <=> self.l_10
        # RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[2]/BertOutput[output]/Dropout[dropout] <=> self.l_11
        # RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[2]/BertOutput[output]/LayerNorm[LayerNorm] <=> self.l_12
        # RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[3]/BertAttention[attention]/BertSelfAttention[self]/Linear[query] <=> self.l_13
        # RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[3]/BertAttention[attention]/BertSelfAttention[self]/Linear[key] <=> self.l_14
        # RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[3]/BertAttention[attention]/BertSelfAttention[self]/Linear[value] <=> self.l_15
        # RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[3]/BertAttention[attention]/BertSelfAttention[self]/Softmax[softmax] <=> self.l_16
        # RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[3]/BertAttention[attention]/BertSelfAttention[self]/Dropout[dropout] <=> self.l_17
        # RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[3]/BertAttention[attention]/BertSelfOutput[output]/Linear[dense] <=> self.l_18
        # RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[3]/BertAttention[attention]/BertSelfOutput[output]/Dropout[dropout] <=> self.l_19
        # input1 <=> x0
        # RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[1]/BertOutput[output]/Tensor::__add___256 <=> x1

        # moving inputs to current device no op if already on the correct device
        x0, x1 = move_tensors(unflatten(args,self.input_structure), self.device)
        t_0 = self.l_0(x1)
        t_1 = self.l_1(t_0)
        t_2 = self.l_2(t_0)
        t_3 = self.l_3(t_0)
        t_4 = t_1.size()
        t_5 = slice(None, -1, None)
        t_5 = t_4[t_5]
        t_4 = (12, 64)
        t_4 = t_5 + t_4
        t_5 = t_4[0]
        t_6 = t_4[1]
        t_7 = t_4[2]
        t_4 = t_4[3]
        t_4 = t_1.view(t_5, t_6, t_7, t_4)
        t_4 = t_4.permute(0, 2, 1, 3)
        t_7 = t_2.size()
        t_6 = slice(None, -1, None)
        t_6 = t_7[t_6]
        t_7 = (12, 64)
        t_7 = t_6 + t_7
        t_6 = t_7[0]
        t_5 = t_7[1]
        t_1 = t_7[2]
        t_7 = t_7[3]
        t_7 = t_2.view(t_6, t_5, t_1, t_7)
        t_7 = t_7.permute(0, 2, 1, 3)
        t_1 = t_3.size()
        t_5 = slice(None, -1, None)
        t_5 = t_1[t_5]
        t_1 = (12, 64)
        t_1 = t_5 + t_1
        t_5 = t_1[0]
        t_6 = t_1[1]
        t_2 = t_1[2]
        t_1 = t_1[3]
        t_1 = t_3.view(t_5, t_6, t_2, t_1)
        t_1 = t_1.permute(0, 2, 1, 3)
        t_7 = t_7.transpose(-1, -2)
        t_7 = torch.matmul(t_4, t_7)
        t_4 = math.sqrt(64)
        t_4 = t_7 / t_4
        t_4 = t_4 + x0
        t_4 = self.l_4(t_4)
        t_4 = self.l_5(t_4)
        t_1 = torch.matmul(t_4, t_1)
        t_1 = t_1.permute(0, 2, 1, 3)
        t_1 = t_1.contiguous()
        t_4 = t_1.size()
        t_7 = slice(None, -2, None)
        t_7 = t_4[t_7]
        t_4 = (768,)
        t_4 = t_7 + t_4
        t_7 = t_4[0]
        t_2 = t_4[1]
        t_4 = t_4[2]
        t_4 = t_1.view(t_7, t_2, t_4)
        t_4 = self.l_6(t_4)
        t_4 = self.l_7(t_4)
        t_0 = t_4 + t_0
        t_0 = self.l_8(t_0)
        t_4 = self.l_9(t_0)
        t_4 = torch.nn.functional.gelu(t_4)
        t_4 = self.l_10(t_4)
        t_4 = self.l_11(t_4)
        t_0 = t_4 + t_0
        t_0 = self.l_12(t_0)
        t_4 = self.l_13(t_0)
        t_2 = self.l_14(t_0)
        t_7 = self.l_15(t_0)
        t_1 = t_4.size()
        t_6 = slice(None, -1, None)
        t_6 = t_1[t_6]
        t_1 = (12, 64)
        t_1 = t_6 + t_1
        t_6 = t_1[0]
        t_5 = t_1[1]
        t_3 = t_1[2]
        t_1 = t_1[3]
        t_1 = t_4.view(t_6, t_5, t_3, t_1)
        t_1 = t_1.permute(0, 2, 1, 3)
        t_3 = t_2.size()
        t_5 = slice(None, -1, None)
        t_5 = t_3[t_5]
        t_3 = (12, 64)
        t_3 = t_5 + t_3
        t_5 = t_3[0]
        t_6 = t_3[1]
        t_4 = t_3[2]
        t_3 = t_3[3]
        t_3 = t_2.view(t_5, t_6, t_4, t_3)
        t_3 = t_3.permute(0, 2, 1, 3)
        t_4 = t_7.size()
        t_6 = slice(None, -1, None)
        t_6 = t_4[t_6]
        t_4 = (12, 64)
        t_4 = t_6 + t_4
        t_6 = t_4[0]
        t_5 = t_4[1]
        t_2 = t_4[2]
        t_4 = t_4[3]
        t_4 = t_7.view(t_6, t_5, t_2, t_4)
        t_4 = t_4.permute(0, 2, 1, 3)
        t_3 = t_3.transpose(-1, -2)
        t_3 = torch.matmul(t_1, t_3)
        t_1 = math.sqrt(64)
        t_1 = t_3 / t_1
        t_1 = t_1 + x0
        t_1 = self.l_16(t_1)
        t_1 = self.l_17(t_1)
        t_4 = torch.matmul(t_1, t_4)
        t_4 = t_4.permute(0, 2, 1, 3)
        t_4 = t_4.contiguous()
        t_1 = t_4.size()
        t_3 = slice(None, -2, None)
        t_3 = t_1[t_3]
        t_1 = (768,)
        t_1 = t_3 + t_1
        t_3 = t_1[0]
        t_2 = t_1[1]
        t_1 = t_1[2]
        t_1 = t_4.view(t_3, t_2, t_1)
        t_1 = self.l_18(t_1)
        t_1 = self.l_19(t_1)
        t_0 = t_1 + t_0
        # returning:
        # RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[3]/BertAttention[attention]/BertSelfOutput[output]/Tensor::__add___486
        return (t_0,)

    def state_dict(self,device=None):
        # we return the state dict of this part as it should be in the original model
        return state_dict(self,device=device)

    def load_state_dict(self, state):
        return load_state_dict(self,state)

    def named_parameters(self,recurse=True):
        # we return the named parameters of this part as it should be in the original model
        return named_parameters(self,recurse=recurse)

    def named_buffers(self,recurse=True):
        # we return the named buffers of this part as it should be in the original model
        return named_buffers(self,recurse=recurse)

    def cpu(self):
        return cpu(self)

    def cuda(self,device=None):
        return cuda(self,device=device)

    def to(self, *args, **kwargs):
        return to(self,*args,**kwargs)


class Partition3(nn.Module):
    BASIC_BLOCKS=(
            Linear,
            Softmax,
            Dropout,
            LayerNorm,
        )
    LAYER_SCOPES=[
            'RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[3]/BertAttention[attention]/BertSelfOutput[output]/LayerNorm[LayerNorm]',
            'RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[3]/BertIntermediate[intermediate]/Linear[dense]',
            'RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[3]/BertOutput[output]/Linear[dense]',
            'RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[3]/BertOutput[output]/Dropout[dropout]',
            'RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[3]/BertOutput[output]/LayerNorm[LayerNorm]',
            'RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[4]/BertAttention[attention]/BertSelfAttention[self]/Linear[query]',
            'RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[4]/BertAttention[attention]/BertSelfAttention[self]/Linear[key]',
            'RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[4]/BertAttention[attention]/BertSelfAttention[self]/Linear[value]',
            'RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[4]/BertAttention[attention]/BertSelfAttention[self]/Softmax[softmax]',
            'RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[4]/BertAttention[attention]/BertSelfAttention[self]/Dropout[dropout]',
            'RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[4]/BertAttention[attention]/BertSelfOutput[output]/Linear[dense]',
            'RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[4]/BertAttention[attention]/BertSelfOutput[output]/Dropout[dropout]',
            'RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[4]/BertAttention[attention]/BertSelfOutput[output]/LayerNorm[LayerNorm]',
            'RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[4]/BertIntermediate[intermediate]/Linear[dense]',
            'RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[4]/BertOutput[output]/Linear[dense]',
            'RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[4]/BertOutput[output]/Dropout[dropout]',
            'RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[4]/BertOutput[output]/LayerNorm[LayerNorm]',
            'RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[5]/BertAttention[attention]/BertSelfAttention[self]/Linear[query]',
            'RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[5]/BertAttention[attention]/BertSelfAttention[self]/Linear[key]',
            'RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[5]/BertAttention[attention]/BertSelfAttention[self]/Linear[value]',
            'RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[5]/BertAttention[attention]/BertSelfAttention[self]/Softmax[softmax]',
            'RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[5]/BertAttention[attention]/BertSelfAttention[self]/Dropout[dropout]',
        ]
    TENSORS=[
        ]
    def __init__(self, layers, tensors, device='cuda:3'):
        super(Partition3, self).__init__()

        #initialize partition layers
        for idx,layer_scope in enumerate(self.LAYER_SCOPES):
            self.add_module(f'l_{idx}',layers[layer_scope])

        #initialize partition tensors
        b=p=0
        for tensor_scope in self.TENSORS:
            tensor=tensors[tensor_scope]
            if isinstance(tensor,nn.Parameter):
                self.register_parameter(f'p_{p}',tensor)
                p+=1
            else:
                self.register_buffer(f'b_{b}',tensor)
                b+=1

        self.device = torch.device(device)
        self.input_structure = [1, 1]
        self.lookup = { 'l_0': 'roberta.encoder.3.attention.output.LayerNorm',
                        'l_1': 'roberta.encoder.3.intermediate.dense',
                        'l_2': 'roberta.encoder.3.output.dense',
                        'l_3': 'roberta.encoder.3.output.dropout',
                        'l_4': 'roberta.encoder.3.output.LayerNorm',
                        'l_5': 'roberta.encoder.4.attention.self.query',
                        'l_6': 'roberta.encoder.4.attention.self.key',
                        'l_7': 'roberta.encoder.4.attention.self.value',
                        'l_8': 'roberta.encoder.4.attention.self.softmax',
                        'l_9': 'roberta.encoder.4.attention.self.dropout',
                        'l_10': 'roberta.encoder.4.attention.output.dense',
                        'l_11': 'roberta.encoder.4.attention.output.dropout',
                        'l_12': 'roberta.encoder.4.attention.output.LayerNorm',
                        'l_13': 'roberta.encoder.4.intermediate.dense',
                        'l_14': 'roberta.encoder.4.output.dense',
                        'l_15': 'roberta.encoder.4.output.dropout',
                        'l_16': 'roberta.encoder.4.output.LayerNorm',
                        'l_17': 'roberta.encoder.5.attention.self.query',
                        'l_18': 'roberta.encoder.5.attention.self.key',
                        'l_19': 'roberta.encoder.5.attention.self.value',
                        'l_20': 'roberta.encoder.5.attention.self.softmax',
                        'l_21': 'roberta.encoder.5.attention.self.dropout'}
        self.to(self.device)

    def forward(self, *args):
        # RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[3]/BertAttention[attention]/BertSelfOutput[output]/LayerNorm[LayerNorm] <=> self.l_0
        # RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[3]/BertIntermediate[intermediate]/Linear[dense] <=> self.l_1
        # RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[3]/BertOutput[output]/Linear[dense] <=> self.l_2
        # RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[3]/BertOutput[output]/Dropout[dropout] <=> self.l_3
        # RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[3]/BertOutput[output]/LayerNorm[LayerNorm] <=> self.l_4
        # RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[4]/BertAttention[attention]/BertSelfAttention[self]/Linear[query] <=> self.l_5
        # RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[4]/BertAttention[attention]/BertSelfAttention[self]/Linear[key] <=> self.l_6
        # RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[4]/BertAttention[attention]/BertSelfAttention[self]/Linear[value] <=> self.l_7
        # RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[4]/BertAttention[attention]/BertSelfAttention[self]/Softmax[softmax] <=> self.l_8
        # RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[4]/BertAttention[attention]/BertSelfAttention[self]/Dropout[dropout] <=> self.l_9
        # RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[4]/BertAttention[attention]/BertSelfOutput[output]/Linear[dense] <=> self.l_10
        # RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[4]/BertAttention[attention]/BertSelfOutput[output]/Dropout[dropout] <=> self.l_11
        # RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[4]/BertAttention[attention]/BertSelfOutput[output]/LayerNorm[LayerNorm] <=> self.l_12
        # RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[4]/BertIntermediate[intermediate]/Linear[dense] <=> self.l_13
        # RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[4]/BertOutput[output]/Linear[dense] <=> self.l_14
        # RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[4]/BertOutput[output]/Dropout[dropout] <=> self.l_15
        # RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[4]/BertOutput[output]/LayerNorm[LayerNorm] <=> self.l_16
        # RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[5]/BertAttention[attention]/BertSelfAttention[self]/Linear[query] <=> self.l_17
        # RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[5]/BertAttention[attention]/BertSelfAttention[self]/Linear[key] <=> self.l_18
        # RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[5]/BertAttention[attention]/BertSelfAttention[self]/Linear[value] <=> self.l_19
        # RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[5]/BertAttention[attention]/BertSelfAttention[self]/Softmax[softmax] <=> self.l_20
        # RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[5]/BertAttention[attention]/BertSelfAttention[self]/Dropout[dropout] <=> self.l_21
        # input1 <=> x0
        # RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[3]/BertAttention[attention]/BertSelfOutput[output]/Tensor::__add___486 <=> x1

        # moving inputs to current device no op if already on the correct device
        x0, x1 = move_tensors(unflatten(args,self.input_structure), self.device)
        t_0 = self.l_0(x1)
        t_1 = self.l_1(t_0)
        t_1 = torch.nn.functional.gelu(t_1)
        t_1 = self.l_2(t_1)
        t_1 = self.l_3(t_1)
        t_0 = t_1 + t_0
        t_0 = self.l_4(t_0)
        t_1 = self.l_5(t_0)
        t_2 = self.l_6(t_0)
        t_3 = self.l_7(t_0)
        t_4 = t_1.size()
        t_5 = slice(None, -1, None)
        t_5 = t_4[t_5]
        t_4 = (12, 64)
        t_4 = t_5 + t_4
        t_5 = t_4[0]
        t_6 = t_4[1]
        t_7 = t_4[2]
        t_4 = t_4[3]
        t_4 = t_1.view(t_5, t_6, t_7, t_4)
        t_4 = t_4.permute(0, 2, 1, 3)
        t_7 = t_2.size()
        t_6 = slice(None, -1, None)
        t_6 = t_7[t_6]
        t_7 = (12, 64)
        t_7 = t_6 + t_7
        t_6 = t_7[0]
        t_5 = t_7[1]
        t_1 = t_7[2]
        t_7 = t_7[3]
        t_7 = t_2.view(t_6, t_5, t_1, t_7)
        t_7 = t_7.permute(0, 2, 1, 3)
        t_1 = t_3.size()
        t_5 = slice(None, -1, None)
        t_5 = t_1[t_5]
        t_1 = (12, 64)
        t_1 = t_5 + t_1
        t_5 = t_1[0]
        t_6 = t_1[1]
        t_2 = t_1[2]
        t_1 = t_1[3]
        t_1 = t_3.view(t_5, t_6, t_2, t_1)
        t_1 = t_1.permute(0, 2, 1, 3)
        t_7 = t_7.transpose(-1, -2)
        t_7 = torch.matmul(t_4, t_7)
        t_4 = math.sqrt(64)
        t_4 = t_7 / t_4
        t_4 = t_4 + x0
        t_4 = self.l_8(t_4)
        t_4 = self.l_9(t_4)
        t_1 = torch.matmul(t_4, t_1)
        t_1 = t_1.permute(0, 2, 1, 3)
        t_1 = t_1.contiguous()
        t_4 = t_1.size()
        t_7 = slice(None, -2, None)
        t_7 = t_4[t_7]
        t_4 = (768,)
        t_4 = t_7 + t_4
        t_7 = t_4[0]
        t_2 = t_4[1]
        t_4 = t_4[2]
        t_4 = t_1.view(t_7, t_2, t_4)
        t_4 = self.l_10(t_4)
        t_4 = self.l_11(t_4)
        t_0 = t_4 + t_0
        t_0 = self.l_12(t_0)
        t_4 = self.l_13(t_0)
        t_4 = torch.nn.functional.gelu(t_4)
        t_4 = self.l_14(t_4)
        t_4 = self.l_15(t_4)
        t_0 = t_4 + t_0
        t_0 = self.l_16(t_0)
        t_4 = self.l_17(t_0)
        t_2 = self.l_18(t_0)
        t_7 = self.l_19(t_0)
        t_1 = t_4.size()
        t_6 = slice(None, -1, None)
        t_6 = t_1[t_6]
        t_1 = (12, 64)
        t_1 = t_6 + t_1
        t_6 = t_1[0]
        t_5 = t_1[1]
        t_3 = t_1[2]
        t_1 = t_1[3]
        t_1 = t_4.view(t_6, t_5, t_3, t_1)
        t_1 = t_1.permute(0, 2, 1, 3)
        t_3 = t_2.size()
        t_5 = slice(None, -1, None)
        t_5 = t_3[t_5]
        t_3 = (12, 64)
        t_3 = t_5 + t_3
        t_5 = t_3[0]
        t_6 = t_3[1]
        t_4 = t_3[2]
        t_3 = t_3[3]
        t_3 = t_2.view(t_5, t_6, t_4, t_3)
        t_3 = t_3.permute(0, 2, 1, 3)
        t_4 = t_7.size()
        t_6 = slice(None, -1, None)
        t_6 = t_4[t_6]
        t_4 = (12, 64)
        t_4 = t_6 + t_4
        t_6 = t_4[0]
        t_5 = t_4[1]
        t_2 = t_4[2]
        t_4 = t_4[3]
        t_4 = t_7.view(t_6, t_5, t_2, t_4)
        t_4 = t_4.permute(0, 2, 1, 3)
        t_3 = t_3.transpose(-1, -2)
        t_3 = torch.matmul(t_1, t_3)
        t_1 = math.sqrt(64)
        t_1 = t_3 / t_1
        t_1 = t_1 + x0
        t_1 = self.l_20(t_1)
        t_1 = self.l_21(t_1)
        t_4 = torch.matmul(t_1, t_4)
        # returning:
        # RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[4]/BertOutput[output]/LayerNorm[LayerNorm]
        # RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[5]/BertAttention[attention]/BertSelfAttention[self]/torch::matmul_697
        return list(flatten((t_0, t_4)))

    def state_dict(self,device=None):
        # we return the state dict of this part as it should be in the original model
        return state_dict(self,device=device)

    def load_state_dict(self, state):
        return load_state_dict(self,state)

    def named_parameters(self,recurse=True):
        # we return the named parameters of this part as it should be in the original model
        return named_parameters(self,recurse=recurse)

    def named_buffers(self,recurse=True):
        # we return the named buffers of this part as it should be in the original model
        return named_buffers(self,recurse=recurse)

    def cpu(self):
        return cpu(self)

    def cuda(self,device=None):
        return cuda(self,device=device)

    def to(self, *args, **kwargs):
        return to(self,*args,**kwargs)


class Partition4(nn.Module):
    BASIC_BLOCKS=(
            LayerNorm,
            Linear,
            Softmax,
            Dropout,
        )
    LAYER_SCOPES=[
            'RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[5]/BertAttention[attention]/BertSelfOutput[output]/Linear[dense]',
            'RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[5]/BertAttention[attention]/BertSelfOutput[output]/Dropout[dropout]',
            'RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[5]/BertAttention[attention]/BertSelfOutput[output]/LayerNorm[LayerNorm]',
            'RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[5]/BertIntermediate[intermediate]/Linear[dense]',
            'RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[5]/BertOutput[output]/Linear[dense]',
            'RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[5]/BertOutput[output]/Dropout[dropout]',
            'RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[5]/BertOutput[output]/LayerNorm[LayerNorm]',
            'RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[6]/BertAttention[attention]/BertSelfAttention[self]/Linear[query]',
            'RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[6]/BertAttention[attention]/BertSelfAttention[self]/Linear[key]',
            'RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[6]/BertAttention[attention]/BertSelfAttention[self]/Linear[value]',
            'RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[6]/BertAttention[attention]/BertSelfAttention[self]/Softmax[softmax]',
            'RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[6]/BertAttention[attention]/BertSelfAttention[self]/Dropout[dropout]',
            'RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[6]/BertAttention[attention]/BertSelfOutput[output]/Linear[dense]',
            'RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[6]/BertAttention[attention]/BertSelfOutput[output]/Dropout[dropout]',
            'RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[6]/BertAttention[attention]/BertSelfOutput[output]/LayerNorm[LayerNorm]',
            'RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[6]/BertIntermediate[intermediate]/Linear[dense]',
            'RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[6]/BertOutput[output]/Linear[dense]',
            'RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[6]/BertOutput[output]/Dropout[dropout]',
            'RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[6]/BertOutput[output]/LayerNorm[LayerNorm]',
            'RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[7]/BertAttention[attention]/BertSelfAttention[self]/Linear[query]',
            'RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[7]/BertAttention[attention]/BertSelfAttention[self]/Linear[key]',
        ]
    TENSORS=[
        ]
    def __init__(self, layers, tensors, device='cuda:4'):
        super(Partition4, self).__init__()

        #initialize partition layers
        for idx,layer_scope in enumerate(self.LAYER_SCOPES):
            self.add_module(f'l_{idx}',layers[layer_scope])

        #initialize partition tensors
        b=p=0
        for tensor_scope in self.TENSORS:
            tensor=tensors[tensor_scope]
            if isinstance(tensor,nn.Parameter):
                self.register_parameter(f'p_{p}',tensor)
                p+=1
            else:
                self.register_buffer(f'b_{b}',tensor)
                b+=1

        self.device = torch.device(device)
        self.input_structure = [1, 1, 1]
        self.lookup = { 'l_0': 'roberta.encoder.5.attention.output.dense',
                        'l_1': 'roberta.encoder.5.attention.output.dropout',
                        'l_2': 'roberta.encoder.5.attention.output.LayerNorm',
                        'l_3': 'roberta.encoder.5.intermediate.dense',
                        'l_4': 'roberta.encoder.5.output.dense',
                        'l_5': 'roberta.encoder.5.output.dropout',
                        'l_6': 'roberta.encoder.5.output.LayerNorm',
                        'l_7': 'roberta.encoder.6.attention.self.query',
                        'l_8': 'roberta.encoder.6.attention.self.key',
                        'l_9': 'roberta.encoder.6.attention.self.value',
                        'l_10': 'roberta.encoder.6.attention.self.softmax',
                        'l_11': 'roberta.encoder.6.attention.self.dropout',
                        'l_12': 'roberta.encoder.6.attention.output.dense',
                        'l_13': 'roberta.encoder.6.attention.output.dropout',
                        'l_14': 'roberta.encoder.6.attention.output.LayerNorm',
                        'l_15': 'roberta.encoder.6.intermediate.dense',
                        'l_16': 'roberta.encoder.6.output.dense',
                        'l_17': 'roberta.encoder.6.output.dropout',
                        'l_18': 'roberta.encoder.6.output.LayerNorm',
                        'l_19': 'roberta.encoder.7.attention.self.query',
                        'l_20': 'roberta.encoder.7.attention.self.key'}
        self.to(self.device)

    def forward(self, *args):
        # RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[5]/BertAttention[attention]/BertSelfOutput[output]/Linear[dense] <=> self.l_0
        # RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[5]/BertAttention[attention]/BertSelfOutput[output]/Dropout[dropout] <=> self.l_1
        # RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[5]/BertAttention[attention]/BertSelfOutput[output]/LayerNorm[LayerNorm] <=> self.l_2
        # RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[5]/BertIntermediate[intermediate]/Linear[dense] <=> self.l_3
        # RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[5]/BertOutput[output]/Linear[dense] <=> self.l_4
        # RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[5]/BertOutput[output]/Dropout[dropout] <=> self.l_5
        # RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[5]/BertOutput[output]/LayerNorm[LayerNorm] <=> self.l_6
        # RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[6]/BertAttention[attention]/BertSelfAttention[self]/Linear[query] <=> self.l_7
        # RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[6]/BertAttention[attention]/BertSelfAttention[self]/Linear[key] <=> self.l_8
        # RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[6]/BertAttention[attention]/BertSelfAttention[self]/Linear[value] <=> self.l_9
        # RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[6]/BertAttention[attention]/BertSelfAttention[self]/Softmax[softmax] <=> self.l_10
        # RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[6]/BertAttention[attention]/BertSelfAttention[self]/Dropout[dropout] <=> self.l_11
        # RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[6]/BertAttention[attention]/BertSelfOutput[output]/Linear[dense] <=> self.l_12
        # RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[6]/BertAttention[attention]/BertSelfOutput[output]/Dropout[dropout] <=> self.l_13
        # RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[6]/BertAttention[attention]/BertSelfOutput[output]/LayerNorm[LayerNorm] <=> self.l_14
        # RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[6]/BertIntermediate[intermediate]/Linear[dense] <=> self.l_15
        # RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[6]/BertOutput[output]/Linear[dense] <=> self.l_16
        # RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[6]/BertOutput[output]/Dropout[dropout] <=> self.l_17
        # RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[6]/BertOutput[output]/LayerNorm[LayerNorm] <=> self.l_18
        # RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[7]/BertAttention[attention]/BertSelfAttention[self]/Linear[query] <=> self.l_19
        # RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[7]/BertAttention[attention]/BertSelfAttention[self]/Linear[key] <=> self.l_20
        # input1 <=> x0
        # RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[4]/BertOutput[output]/LayerNorm[LayerNorm] <=> x1
        # RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[5]/BertAttention[attention]/BertSelfAttention[self]/torch::matmul_697 <=> x2

        # moving inputs to current device no op if already on the correct device
        x0, x1, x2 = move_tensors(unflatten(args,self.input_structure), self.device)
        t_0 = x2.permute(0, 2, 1, 3)
        t_0 = t_0.contiguous()
        t_1 = t_0.size()
        t_2 = slice(None, -2, None)
        t_2 = t_1[t_2]
        t_1 = (768,)
        t_1 = t_2 + t_1
        t_2 = t_1[0]
        t_3 = t_1[1]
        t_1 = t_1[2]
        t_1 = t_0.view(t_2, t_3, t_1)
        t_1 = self.l_0(t_1)
        t_1 = self.l_1(t_1)
        t_1 = t_1 + x1
        t_1 = self.l_2(t_1)
        t_3 = self.l_3(t_1)
        t_3 = torch.nn.functional.gelu(t_3)
        t_3 = self.l_4(t_3)
        t_3 = self.l_5(t_3)
        t_1 = t_3 + t_1
        t_1 = self.l_6(t_1)
        t_3 = self.l_7(t_1)
        t_2 = self.l_8(t_1)
        t_0 = self.l_9(t_1)
        t_4 = t_3.size()
        t_5 = slice(None, -1, None)
        t_5 = t_4[t_5]
        t_4 = (12, 64)
        t_4 = t_5 + t_4
        t_5 = t_4[0]
        t_6 = t_4[1]
        t_7 = t_4[2]
        t_4 = t_4[3]
        t_4 = t_3.view(t_5, t_6, t_7, t_4)
        t_4 = t_4.permute(0, 2, 1, 3)
        t_7 = t_2.size()
        t_6 = slice(None, -1, None)
        t_6 = t_7[t_6]
        t_7 = (12, 64)
        t_7 = t_6 + t_7
        t_6 = t_7[0]
        t_5 = t_7[1]
        t_3 = t_7[2]
        t_7 = t_7[3]
        t_7 = t_2.view(t_6, t_5, t_3, t_7)
        t_7 = t_7.permute(0, 2, 1, 3)
        t_3 = t_0.size()
        t_5 = slice(None, -1, None)
        t_5 = t_3[t_5]
        t_3 = (12, 64)
        t_3 = t_5 + t_3
        t_5 = t_3[0]
        t_6 = t_3[1]
        t_2 = t_3[2]
        t_3 = t_3[3]
        t_3 = t_0.view(t_5, t_6, t_2, t_3)
        t_3 = t_3.permute(0, 2, 1, 3)
        t_7 = t_7.transpose(-1, -2)
        t_7 = torch.matmul(t_4, t_7)
        t_4 = math.sqrt(64)
        t_4 = t_7 / t_4
        t_4 = t_4 + x0
        t_4 = self.l_10(t_4)
        t_4 = self.l_11(t_4)
        t_3 = torch.matmul(t_4, t_3)
        t_3 = t_3.permute(0, 2, 1, 3)
        t_3 = t_3.contiguous()
        t_4 = t_3.size()
        t_7 = slice(None, -2, None)
        t_7 = t_4[t_7]
        t_4 = (768,)
        t_4 = t_7 + t_4
        t_7 = t_4[0]
        t_2 = t_4[1]
        t_4 = t_4[2]
        t_4 = t_3.view(t_7, t_2, t_4)
        t_4 = self.l_12(t_4)
        t_4 = self.l_13(t_4)
        t_1 = t_4 + t_1
        t_1 = self.l_14(t_1)
        t_4 = self.l_15(t_1)
        t_4 = torch.nn.functional.gelu(t_4)
        t_4 = self.l_16(t_4)
        t_4 = self.l_17(t_4)
        t_1 = t_4 + t_1
        t_1 = self.l_18(t_1)
        t_4 = self.l_19(t_1)
        t_2 = self.l_20(t_1)
        t_7 = t_4.size()
        t_3 = slice(None, -1, None)
        t_3 = t_7[t_3]
        t_7 = (12, 64)
        t_7 = t_3 + t_7
        t_3 = t_2.size()
        t_6 = slice(None, -1, None)
        t_6 = t_3[t_6]
        t_3 = (12, 64)
        t_3 = t_6 + t_3
        t_6 = t_3[0]
        t_5 = t_3[1]
        t_0 = t_3[2]
        t_3 = t_3[3]
        t_3 = t_2.view(t_6, t_5, t_0, t_3)
        # returning:
        # RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[6]/BertOutput[output]/LayerNorm[LayerNorm]
        # RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[7]/BertAttention[attention]/BertSelfAttention[self]/Linear[query]
        # RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[7]/BertAttention[attention]/BertSelfAttention[self]/Size::__add___860
        # RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[7]/BertAttention[attention]/BertSelfAttention[self]/Tensor::view_893
        return list(flatten((t_1, t_4, t_7, t_3)))

    def state_dict(self,device=None):
        # we return the state dict of this part as it should be in the original model
        return state_dict(self,device=device)

    def load_state_dict(self, state):
        return load_state_dict(self,state)

    def named_parameters(self,recurse=True):
        # we return the named parameters of this part as it should be in the original model
        return named_parameters(self,recurse=recurse)

    def named_buffers(self,recurse=True):
        # we return the named buffers of this part as it should be in the original model
        return named_buffers(self,recurse=recurse)

    def cpu(self):
        return cpu(self)

    def cuda(self,device=None):
        return cuda(self,device=device)

    def to(self, *args, **kwargs):
        return to(self,*args,**kwargs)


class Partition5(nn.Module):
    BASIC_BLOCKS=(
            LayerNorm,
            Linear,
            Softmax,
            Dropout,
        )
    LAYER_SCOPES=[
            'RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[7]/BertAttention[attention]/BertSelfAttention[self]/Linear[value]',
            'RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[7]/BertAttention[attention]/BertSelfAttention[self]/Softmax[softmax]',
            'RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[7]/BertAttention[attention]/BertSelfAttention[self]/Dropout[dropout]',
            'RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[7]/BertAttention[attention]/BertSelfOutput[output]/Linear[dense]',
            'RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[7]/BertAttention[attention]/BertSelfOutput[output]/Dropout[dropout]',
            'RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[7]/BertAttention[attention]/BertSelfOutput[output]/LayerNorm[LayerNorm]',
            'RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[7]/BertIntermediate[intermediate]/Linear[dense]',
            'RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[7]/BertOutput[output]/Linear[dense]',
            'RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[7]/BertOutput[output]/Dropout[dropout]',
            'RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[7]/BertOutput[output]/LayerNorm[LayerNorm]',
            'RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[8]/BertAttention[attention]/BertSelfAttention[self]/Linear[query]',
            'RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[8]/BertAttention[attention]/BertSelfAttention[self]/Linear[key]',
            'RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[8]/BertAttention[attention]/BertSelfAttention[self]/Linear[value]',
            'RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[8]/BertAttention[attention]/BertSelfAttention[self]/Softmax[softmax]',
            'RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[8]/BertAttention[attention]/BertSelfAttention[self]/Dropout[dropout]',
            'RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[8]/BertAttention[attention]/BertSelfOutput[output]/Linear[dense]',
            'RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[8]/BertAttention[attention]/BertSelfOutput[output]/Dropout[dropout]',
        ]
    TENSORS=[
        ]
    def __init__(self, layers, tensors, device='cuda:5'):
        super(Partition5, self).__init__()

        #initialize partition layers
        for idx,layer_scope in enumerate(self.LAYER_SCOPES):
            self.add_module(f'l_{idx}',layers[layer_scope])

        #initialize partition tensors
        b=p=0
        for tensor_scope in self.TENSORS:
            tensor=tensors[tensor_scope]
            if isinstance(tensor,nn.Parameter):
                self.register_parameter(f'p_{p}',tensor)
                p+=1
            else:
                self.register_buffer(f'b_{b}',tensor)
                b+=1

        self.device = torch.device(device)
        self.input_structure = [1, 1, 1, 1, 1]
        self.lookup = { 'l_0': 'roberta.encoder.7.attention.self.value',
                        'l_1': 'roberta.encoder.7.attention.self.softmax',
                        'l_2': 'roberta.encoder.7.attention.self.dropout',
                        'l_3': 'roberta.encoder.7.attention.output.dense',
                        'l_4': 'roberta.encoder.7.attention.output.dropout',
                        'l_5': 'roberta.encoder.7.attention.output.LayerNorm',
                        'l_6': 'roberta.encoder.7.intermediate.dense',
                        'l_7': 'roberta.encoder.7.output.dense',
                        'l_8': 'roberta.encoder.7.output.dropout',
                        'l_9': 'roberta.encoder.7.output.LayerNorm',
                        'l_10': 'roberta.encoder.8.attention.self.query',
                        'l_11': 'roberta.encoder.8.attention.self.key',
                        'l_12': 'roberta.encoder.8.attention.self.value',
                        'l_13': 'roberta.encoder.8.attention.self.softmax',
                        'l_14': 'roberta.encoder.8.attention.self.dropout',
                        'l_15': 'roberta.encoder.8.attention.output.dense',
                        'l_16': 'roberta.encoder.8.attention.output.dropout'}
        self.to(self.device)

    def forward(self, *args):
        # RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[7]/BertAttention[attention]/BertSelfAttention[self]/Linear[value] <=> self.l_0
        # RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[7]/BertAttention[attention]/BertSelfAttention[self]/Softmax[softmax] <=> self.l_1
        # RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[7]/BertAttention[attention]/BertSelfAttention[self]/Dropout[dropout] <=> self.l_2
        # RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[7]/BertAttention[attention]/BertSelfOutput[output]/Linear[dense] <=> self.l_3
        # RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[7]/BertAttention[attention]/BertSelfOutput[output]/Dropout[dropout] <=> self.l_4
        # RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[7]/BertAttention[attention]/BertSelfOutput[output]/LayerNorm[LayerNorm] <=> self.l_5
        # RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[7]/BertIntermediate[intermediate]/Linear[dense] <=> self.l_6
        # RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[7]/BertOutput[output]/Linear[dense] <=> self.l_7
        # RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[7]/BertOutput[output]/Dropout[dropout] <=> self.l_8
        # RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[7]/BertOutput[output]/LayerNorm[LayerNorm] <=> self.l_9
        # RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[8]/BertAttention[attention]/BertSelfAttention[self]/Linear[query] <=> self.l_10
        # RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[8]/BertAttention[attention]/BertSelfAttention[self]/Linear[key] <=> self.l_11
        # RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[8]/BertAttention[attention]/BertSelfAttention[self]/Linear[value] <=> self.l_12
        # RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[8]/BertAttention[attention]/BertSelfAttention[self]/Softmax[softmax] <=> self.l_13
        # RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[8]/BertAttention[attention]/BertSelfAttention[self]/Dropout[dropout] <=> self.l_14
        # RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[8]/BertAttention[attention]/BertSelfOutput[output]/Linear[dense] <=> self.l_15
        # RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[8]/BertAttention[attention]/BertSelfOutput[output]/Dropout[dropout] <=> self.l_16
        # input1 <=> x0
        # RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[6]/BertOutput[output]/LayerNorm[LayerNorm] <=> x1
        # RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[7]/BertAttention[attention]/BertSelfAttention[self]/Linear[query] <=> x2
        # RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[7]/BertAttention[attention]/BertSelfAttention[self]/Size::__add___860 <=> x3
        # RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[7]/BertAttention[attention]/BertSelfAttention[self]/Tensor::view_893 <=> x4

        # moving inputs to current device no op if already on the correct device
        x0, x1, x2, x3, x4 = move_tensors(unflatten(args,self.input_structure), self.device)
        t_0 = self.l_0(x1)
        t_1 = x3[0]
        t_2 = x3[1]
        t_3 = x3[2]
        t_4 = x3[3]
        t_4 = x2.view(t_1, t_2, t_3, t_4)
        t_4 = t_4.permute(0, 2, 1, 3)
        t_3 = x4.permute(0, 2, 1, 3)
        t_2 = t_0.size()
        t_1 = slice(None, -1, None)
        t_1 = t_2[t_1]
        t_2 = (12, 64)
        t_2 = t_1 + t_2
        t_1 = t_2[0]
        t_5 = t_2[1]
        t_6 = t_2[2]
        t_2 = t_2[3]
        t_2 = t_0.view(t_1, t_5, t_6, t_2)
        t_2 = t_2.permute(0, 2, 1, 3)
        t_3 = t_3.transpose(-1, -2)
        t_3 = torch.matmul(t_4, t_3)
        t_4 = math.sqrt(64)
        t_4 = t_3 / t_4
        t_4 = t_4 + x0
        t_4 = self.l_1(t_4)
        t_4 = self.l_2(t_4)
        t_2 = torch.matmul(t_4, t_2)
        t_2 = t_2.permute(0, 2, 1, 3)
        t_2 = t_2.contiguous()
        t_4 = t_2.size()
        t_3 = slice(None, -2, None)
        t_3 = t_4[t_3]
        t_4 = (768,)
        t_4 = t_3 + t_4
        t_3 = t_4[0]
        t_6 = t_4[1]
        t_4 = t_4[2]
        t_4 = t_2.view(t_3, t_6, t_4)
        t_4 = self.l_3(t_4)
        t_4 = self.l_4(t_4)
        t_4 = t_4 + x1
        t_4 = self.l_5(t_4)
        t_6 = self.l_6(t_4)
        t_6 = torch.nn.functional.gelu(t_6)
        t_6 = self.l_7(t_6)
        t_6 = self.l_8(t_6)
        t_4 = t_6 + t_4
        t_4 = self.l_9(t_4)
        t_6 = self.l_10(t_4)
        t_3 = self.l_11(t_4)
        t_2 = self.l_12(t_4)
        t_5 = t_6.size()
        t_1 = slice(None, -1, None)
        t_1 = t_5[t_1]
        t_5 = (12, 64)
        t_5 = t_1 + t_5
        t_1 = t_5[0]
        t_0 = t_5[1]
        t_7 = t_5[2]
        t_5 = t_5[3]
        t_5 = t_6.view(t_1, t_0, t_7, t_5)
        t_5 = t_5.permute(0, 2, 1, 3)
        t_7 = t_3.size()
        t_0 = slice(None, -1, None)
        t_0 = t_7[t_0]
        t_7 = (12, 64)
        t_7 = t_0 + t_7
        t_0 = t_7[0]
        t_1 = t_7[1]
        t_6 = t_7[2]
        t_7 = t_7[3]
        t_7 = t_3.view(t_0, t_1, t_6, t_7)
        t_7 = t_7.permute(0, 2, 1, 3)
        t_6 = t_2.size()
        t_1 = slice(None, -1, None)
        t_1 = t_6[t_1]
        t_6 = (12, 64)
        t_6 = t_1 + t_6
        t_1 = t_6[0]
        t_0 = t_6[1]
        t_3 = t_6[2]
        t_6 = t_6[3]
        t_6 = t_2.view(t_1, t_0, t_3, t_6)
        t_6 = t_6.permute(0, 2, 1, 3)
        t_7 = t_7.transpose(-1, -2)
        t_7 = torch.matmul(t_5, t_7)
        t_5 = math.sqrt(64)
        t_5 = t_7 / t_5
        t_5 = t_5 + x0
        t_5 = self.l_13(t_5)
        t_5 = self.l_14(t_5)
        t_6 = torch.matmul(t_5, t_6)
        t_6 = t_6.permute(0, 2, 1, 3)
        t_6 = t_6.contiguous()
        t_5 = t_6.size()
        t_7 = slice(None, -2, None)
        t_7 = t_5[t_7]
        t_5 = (768,)
        t_5 = t_7 + t_5
        t_7 = t_5[0]
        t_3 = t_5[1]
        t_5 = t_5[2]
        t_5 = t_6.view(t_7, t_3, t_5)
        t_5 = self.l_15(t_5)
        t_5 = self.l_16(t_5)
        t_4 = t_5 + t_4
        # returning:
        # RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[8]/BertAttention[attention]/BertSelfOutput[output]/Tensor::__add___1076
        return (t_4,)

    def state_dict(self,device=None):
        # we return the state dict of this part as it should be in the original model
        return state_dict(self,device=device)

    def load_state_dict(self, state):
        return load_state_dict(self,state)

    def named_parameters(self,recurse=True):
        # we return the named parameters of this part as it should be in the original model
        return named_parameters(self,recurse=recurse)

    def named_buffers(self,recurse=True):
        # we return the named buffers of this part as it should be in the original model
        return named_buffers(self,recurse=recurse)

    def cpu(self):
        return cpu(self)

    def cuda(self,device=None):
        return cuda(self,device=device)

    def to(self, *args, **kwargs):
        return to(self,*args,**kwargs)


class Partition6(nn.Module):
    BASIC_BLOCKS=(
            Linear,
            Softmax,
            Dropout,
            LayerNorm,
        )
    LAYER_SCOPES=[
            'RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[8]/BertAttention[attention]/BertSelfOutput[output]/LayerNorm[LayerNorm]',
            'RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[8]/BertIntermediate[intermediate]/Linear[dense]',
            'RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[8]/BertOutput[output]/Linear[dense]',
            'RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[8]/BertOutput[output]/Dropout[dropout]',
            'RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[8]/BertOutput[output]/LayerNorm[LayerNorm]',
            'RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[9]/BertAttention[attention]/BertSelfAttention[self]/Linear[query]',
            'RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[9]/BertAttention[attention]/BertSelfAttention[self]/Linear[key]',
            'RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[9]/BertAttention[attention]/BertSelfAttention[self]/Linear[value]',
            'RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[9]/BertAttention[attention]/BertSelfAttention[self]/Softmax[softmax]',
            'RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[9]/BertAttention[attention]/BertSelfAttention[self]/Dropout[dropout]',
            'RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[9]/BertAttention[attention]/BertSelfOutput[output]/Linear[dense]',
            'RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[9]/BertAttention[attention]/BertSelfOutput[output]/Dropout[dropout]',
            'RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[9]/BertAttention[attention]/BertSelfOutput[output]/LayerNorm[LayerNorm]',
            'RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[9]/BertIntermediate[intermediate]/Linear[dense]',
            'RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[9]/BertOutput[output]/Linear[dense]',
            'RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[9]/BertOutput[output]/Dropout[dropout]',
        ]
    TENSORS=[
        ]
    def __init__(self, layers, tensors, device='cuda:6'):
        super(Partition6, self).__init__()

        #initialize partition layers
        for idx,layer_scope in enumerate(self.LAYER_SCOPES):
            self.add_module(f'l_{idx}',layers[layer_scope])

        #initialize partition tensors
        b=p=0
        for tensor_scope in self.TENSORS:
            tensor=tensors[tensor_scope]
            if isinstance(tensor,nn.Parameter):
                self.register_parameter(f'p_{p}',tensor)
                p+=1
            else:
                self.register_buffer(f'b_{b}',tensor)
                b+=1

        self.device = torch.device(device)
        self.input_structure = [1, 1]
        self.lookup = { 'l_0': 'roberta.encoder.8.attention.output.LayerNorm',
                        'l_1': 'roberta.encoder.8.intermediate.dense',
                        'l_2': 'roberta.encoder.8.output.dense',
                        'l_3': 'roberta.encoder.8.output.dropout',
                        'l_4': 'roberta.encoder.8.output.LayerNorm',
                        'l_5': 'roberta.encoder.9.attention.self.query',
                        'l_6': 'roberta.encoder.9.attention.self.key',
                        'l_7': 'roberta.encoder.9.attention.self.value',
                        'l_8': 'roberta.encoder.9.attention.self.softmax',
                        'l_9': 'roberta.encoder.9.attention.self.dropout',
                        'l_10': 'roberta.encoder.9.attention.output.dense',
                        'l_11': 'roberta.encoder.9.attention.output.dropout',
                        'l_12': 'roberta.encoder.9.attention.output.LayerNorm',
                        'l_13': 'roberta.encoder.9.intermediate.dense',
                        'l_14': 'roberta.encoder.9.output.dense',
                        'l_15': 'roberta.encoder.9.output.dropout'}
        self.to(self.device)

    def forward(self, *args):
        # RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[8]/BertAttention[attention]/BertSelfOutput[output]/LayerNorm[LayerNorm] <=> self.l_0
        # RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[8]/BertIntermediate[intermediate]/Linear[dense] <=> self.l_1
        # RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[8]/BertOutput[output]/Linear[dense] <=> self.l_2
        # RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[8]/BertOutput[output]/Dropout[dropout] <=> self.l_3
        # RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[8]/BertOutput[output]/LayerNorm[LayerNorm] <=> self.l_4
        # RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[9]/BertAttention[attention]/BertSelfAttention[self]/Linear[query] <=> self.l_5
        # RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[9]/BertAttention[attention]/BertSelfAttention[self]/Linear[key] <=> self.l_6
        # RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[9]/BertAttention[attention]/BertSelfAttention[self]/Linear[value] <=> self.l_7
        # RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[9]/BertAttention[attention]/BertSelfAttention[self]/Softmax[softmax] <=> self.l_8
        # RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[9]/BertAttention[attention]/BertSelfAttention[self]/Dropout[dropout] <=> self.l_9
        # RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[9]/BertAttention[attention]/BertSelfOutput[output]/Linear[dense] <=> self.l_10
        # RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[9]/BertAttention[attention]/BertSelfOutput[output]/Dropout[dropout] <=> self.l_11
        # RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[9]/BertAttention[attention]/BertSelfOutput[output]/LayerNorm[LayerNorm] <=> self.l_12
        # RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[9]/BertIntermediate[intermediate]/Linear[dense] <=> self.l_13
        # RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[9]/BertOutput[output]/Linear[dense] <=> self.l_14
        # RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[9]/BertOutput[output]/Dropout[dropout] <=> self.l_15
        # input1 <=> x0
        # RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[8]/BertAttention[attention]/BertSelfOutput[output]/Tensor::__add___1076 <=> x1

        # moving inputs to current device no op if already on the correct device
        x0, x1 = move_tensors(unflatten(args,self.input_structure), self.device)
        t_0 = self.l_0(x1)
        t_1 = self.l_1(t_0)
        t_1 = torch.nn.functional.gelu(t_1)
        t_1 = self.l_2(t_1)
        t_1 = self.l_3(t_1)
        t_0 = t_1 + t_0
        t_0 = self.l_4(t_0)
        t_1 = self.l_5(t_0)
        t_2 = self.l_6(t_0)
        t_3 = self.l_7(t_0)
        t_4 = t_1.size()
        t_5 = slice(None, -1, None)
        t_5 = t_4[t_5]
        t_4 = (12, 64)
        t_4 = t_5 + t_4
        t_5 = t_4[0]
        t_6 = t_4[1]
        t_7 = t_4[2]
        t_4 = t_4[3]
        t_4 = t_1.view(t_5, t_6, t_7, t_4)
        t_4 = t_4.permute(0, 2, 1, 3)
        t_7 = t_2.size()
        t_6 = slice(None, -1, None)
        t_6 = t_7[t_6]
        t_7 = (12, 64)
        t_7 = t_6 + t_7
        t_6 = t_7[0]
        t_5 = t_7[1]
        t_1 = t_7[2]
        t_7 = t_7[3]
        t_7 = t_2.view(t_6, t_5, t_1, t_7)
        t_7 = t_7.permute(0, 2, 1, 3)
        t_1 = t_3.size()
        t_5 = slice(None, -1, None)
        t_5 = t_1[t_5]
        t_1 = (12, 64)
        t_1 = t_5 + t_1
        t_5 = t_1[0]
        t_6 = t_1[1]
        t_2 = t_1[2]
        t_1 = t_1[3]
        t_1 = t_3.view(t_5, t_6, t_2, t_1)
        t_1 = t_1.permute(0, 2, 1, 3)
        t_7 = t_7.transpose(-1, -2)
        t_7 = torch.matmul(t_4, t_7)
        t_4 = math.sqrt(64)
        t_4 = t_7 / t_4
        t_4 = t_4 + x0
        t_4 = self.l_8(t_4)
        t_4 = self.l_9(t_4)
        t_1 = torch.matmul(t_4, t_1)
        t_1 = t_1.permute(0, 2, 1, 3)
        t_1 = t_1.contiguous()
        t_4 = t_1.size()
        t_7 = slice(None, -2, None)
        t_7 = t_4[t_7]
        t_4 = (768,)
        t_4 = t_7 + t_4
        t_7 = t_4[0]
        t_2 = t_4[1]
        t_4 = t_4[2]
        t_4 = t_1.view(t_7, t_2, t_4)
        t_4 = self.l_10(t_4)
        t_4 = self.l_11(t_4)
        t_0 = t_4 + t_0
        t_0 = self.l_12(t_0)
        t_4 = self.l_13(t_0)
        t_4 = torch.nn.functional.gelu(t_4)
        t_4 = self.l_14(t_4)
        t_4 = self.l_15(t_4)
        t_0 = t_4 + t_0
        # returning:
        # RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[9]/BertOutput[output]/Tensor::__add___1200
        return (t_0,)

    def state_dict(self,device=None):
        # we return the state dict of this part as it should be in the original model
        return state_dict(self,device=device)

    def load_state_dict(self, state):
        return load_state_dict(self,state)

    def named_parameters(self,recurse=True):
        # we return the named parameters of this part as it should be in the original model
        return named_parameters(self,recurse=recurse)

    def named_buffers(self,recurse=True):
        # we return the named buffers of this part as it should be in the original model
        return named_buffers(self,recurse=recurse)

    def cpu(self):
        return cpu(self)

    def cuda(self,device=None):
        return cuda(self,device=device)

    def to(self, *args, **kwargs):
        return to(self,*args,**kwargs)


class Partition7(nn.Module):
    BASIC_BLOCKS=(
            Linear,
            Softmax,
            Tanh,
            LayerNorm,
            Dropout,
        )
    LAYER_SCOPES=[
            'RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[9]/BertOutput[output]/LayerNorm[LayerNorm]',
            'RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[10]/BertAttention[attention]/BertSelfAttention[self]/Linear[query]',
            'RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[10]/BertAttention[attention]/BertSelfAttention[self]/Linear[key]',
            'RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[10]/BertAttention[attention]/BertSelfAttention[self]/Linear[value]',
            'RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[10]/BertAttention[attention]/BertSelfAttention[self]/Softmax[softmax]',
            'RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[10]/BertAttention[attention]/BertSelfAttention[self]/Dropout[dropout]',
            'RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[10]/BertAttention[attention]/BertSelfOutput[output]/Linear[dense]',
            'RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[10]/BertAttention[attention]/BertSelfOutput[output]/Dropout[dropout]',
            'RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[10]/BertAttention[attention]/BertSelfOutput[output]/LayerNorm[LayerNorm]',
            'RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[10]/BertIntermediate[intermediate]/Linear[dense]',
            'RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[10]/BertOutput[output]/Linear[dense]',
            'RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[10]/BertOutput[output]/Dropout[dropout]',
            'RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[10]/BertOutput[output]/LayerNorm[LayerNorm]',
            'RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[11]/BertAttention[attention]/BertSelfAttention[self]/Linear[query]',
            'RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[11]/BertAttention[attention]/BertSelfAttention[self]/Linear[key]',
            'RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[11]/BertAttention[attention]/BertSelfAttention[self]/Linear[value]',
            'RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[11]/BertAttention[attention]/BertSelfAttention[self]/Softmax[softmax]',
            'RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[11]/BertAttention[attention]/BertSelfAttention[self]/Dropout[dropout]',
            'RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[11]/BertAttention[attention]/BertSelfOutput[output]/Linear[dense]',
            'RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[11]/BertAttention[attention]/BertSelfOutput[output]/Dropout[dropout]',
            'RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[11]/BertAttention[attention]/BertSelfOutput[output]/LayerNorm[LayerNorm]',
            'RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[11]/BertIntermediate[intermediate]/Linear[dense]',
            'RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[11]/BertOutput[output]/Linear[dense]',
            'RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[11]/BertOutput[output]/Dropout[dropout]',
            'RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[11]/BertOutput[output]/LayerNorm[LayerNorm]',
            'RobertaForSequenceClassification/RobertaModel[roberta]/BertPooler[pooler]/Linear[dense]',
            'RobertaForSequenceClassification/RobertaModel[roberta]/BertPooler[pooler]/Tanh[activation]',
            'RobertaForSequenceClassification/RobertaClassificationHead[classifier]/Dropout[dropout]',
            'RobertaForSequenceClassification/RobertaClassificationHead[classifier]/Linear[dense]',
            'RobertaForSequenceClassification/RobertaClassificationHead[classifier]/Dropout[dropout]',
            'RobertaForSequenceClassification/RobertaClassificationHead[classifier]/Linear[out_proj]',
        ]
    TENSORS=[
        ]
    def __init__(self, layers, tensors, device='cuda:7'):
        super(Partition7, self).__init__()

        #initialize partition layers
        for idx,layer_scope in enumerate(self.LAYER_SCOPES):
            self.add_module(f'l_{idx}',layers[layer_scope])

        #initialize partition tensors
        b=p=0
        for tensor_scope in self.TENSORS:
            tensor=tensors[tensor_scope]
            if isinstance(tensor,nn.Parameter):
                self.register_parameter(f'p_{p}',tensor)
                p+=1
            else:
                self.register_buffer(f'b_{b}',tensor)
                b+=1

        self.device = torch.device(device)
        self.input_structure = [1, 1]
        self.lookup = { 'l_0': 'roberta.encoder.9.output.LayerNorm',
                        'l_1': 'roberta.encoder.10.attention.self.query',
                        'l_2': 'roberta.encoder.10.attention.self.key',
                        'l_3': 'roberta.encoder.10.attention.self.value',
                        'l_4': 'roberta.encoder.10.attention.self.softmax',
                        'l_5': 'roberta.encoder.10.attention.self.dropout',
                        'l_6': 'roberta.encoder.10.attention.output.dense',
                        'l_7': 'roberta.encoder.10.attention.output.dropout',
                        'l_8': 'roberta.encoder.10.attention.output.LayerNorm',
                        'l_9': 'roberta.encoder.10.intermediate.dense',
                        'l_10': 'roberta.encoder.10.output.dense',
                        'l_11': 'roberta.encoder.10.output.dropout',
                        'l_12': 'roberta.encoder.10.output.LayerNorm',
                        'l_13': 'roberta.encoder.11.attention.self.query',
                        'l_14': 'roberta.encoder.11.attention.self.key',
                        'l_15': 'roberta.encoder.11.attention.self.value',
                        'l_16': 'roberta.encoder.11.attention.self.softmax',
                        'l_17': 'roberta.encoder.11.attention.self.dropout',
                        'l_18': 'roberta.encoder.11.attention.output.dense',
                        'l_19': 'roberta.encoder.11.attention.output.dropout',
                        'l_20': 'roberta.encoder.11.attention.output.LayerNorm',
                        'l_21': 'roberta.encoder.11.intermediate.dense',
                        'l_22': 'roberta.encoder.11.output.dense',
                        'l_23': 'roberta.encoder.11.output.dropout',
                        'l_24': 'roberta.encoder.11.output.LayerNorm',
                        'l_25': 'roberta.pooler.dense',
                        'l_26': 'roberta.pooler.activation',
                        'l_27': 'classifier.dropout',
                        'l_28': 'classifier.dense',
                        'l_29': 'classifier.dropout',
                        'l_30': 'classifier.out_proj'}
        self.to(self.device)

    def forward(self, *args):
        # RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[9]/BertOutput[output]/LayerNorm[LayerNorm] <=> self.l_0
        # RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[10]/BertAttention[attention]/BertSelfAttention[self]/Linear[query] <=> self.l_1
        # RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[10]/BertAttention[attention]/BertSelfAttention[self]/Linear[key] <=> self.l_2
        # RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[10]/BertAttention[attention]/BertSelfAttention[self]/Linear[value] <=> self.l_3
        # RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[10]/BertAttention[attention]/BertSelfAttention[self]/Softmax[softmax] <=> self.l_4
        # RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[10]/BertAttention[attention]/BertSelfAttention[self]/Dropout[dropout] <=> self.l_5
        # RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[10]/BertAttention[attention]/BertSelfOutput[output]/Linear[dense] <=> self.l_6
        # RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[10]/BertAttention[attention]/BertSelfOutput[output]/Dropout[dropout] <=> self.l_7
        # RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[10]/BertAttention[attention]/BertSelfOutput[output]/LayerNorm[LayerNorm] <=> self.l_8
        # RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[10]/BertIntermediate[intermediate]/Linear[dense] <=> self.l_9
        # RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[10]/BertOutput[output]/Linear[dense] <=> self.l_10
        # RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[10]/BertOutput[output]/Dropout[dropout] <=> self.l_11
        # RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[10]/BertOutput[output]/LayerNorm[LayerNorm] <=> self.l_12
        # RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[11]/BertAttention[attention]/BertSelfAttention[self]/Linear[query] <=> self.l_13
        # RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[11]/BertAttention[attention]/BertSelfAttention[self]/Linear[key] <=> self.l_14
        # RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[11]/BertAttention[attention]/BertSelfAttention[self]/Linear[value] <=> self.l_15
        # RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[11]/BertAttention[attention]/BertSelfAttention[self]/Softmax[softmax] <=> self.l_16
        # RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[11]/BertAttention[attention]/BertSelfAttention[self]/Dropout[dropout] <=> self.l_17
        # RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[11]/BertAttention[attention]/BertSelfOutput[output]/Linear[dense] <=> self.l_18
        # RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[11]/BertAttention[attention]/BertSelfOutput[output]/Dropout[dropout] <=> self.l_19
        # RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[11]/BertAttention[attention]/BertSelfOutput[output]/LayerNorm[LayerNorm] <=> self.l_20
        # RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[11]/BertIntermediate[intermediate]/Linear[dense] <=> self.l_21
        # RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[11]/BertOutput[output]/Linear[dense] <=> self.l_22
        # RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[11]/BertOutput[output]/Dropout[dropout] <=> self.l_23
        # RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[11]/BertOutput[output]/LayerNorm[LayerNorm] <=> self.l_24
        # RobertaForSequenceClassification/RobertaModel[roberta]/BertPooler[pooler]/Linear[dense] <=> self.l_25
        # RobertaForSequenceClassification/RobertaModel[roberta]/BertPooler[pooler]/Tanh[activation] <=> self.l_26
        # RobertaForSequenceClassification/RobertaClassificationHead[classifier]/Dropout[dropout] <=> self.l_27
        # RobertaForSequenceClassification/RobertaClassificationHead[classifier]/Linear[dense] <=> self.l_28
        # RobertaForSequenceClassification/RobertaClassificationHead[classifier]/Dropout[dropout] <=> self.l_29
        # RobertaForSequenceClassification/RobertaClassificationHead[classifier]/Linear[out_proj] <=> self.l_30
        # input1 <=> x0
        # RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[9]/BertOutput[output]/Tensor::__add___1200 <=> x1

        # moving inputs to current device no op if already on the correct device
        x0, x1 = move_tensors(unflatten(args,self.input_structure), self.device)
        t_0 = self.l_0(x1)
        t_1 = self.l_1(t_0)
        t_2 = self.l_2(t_0)
        t_3 = self.l_3(t_0)
        t_4 = t_1.size()
        t_5 = slice(None, -1, None)
        t_5 = t_4[t_5]
        t_4 = (12, 64)
        t_4 = t_5 + t_4
        t_5 = t_4[0]
        t_6 = t_4[1]
        t_7 = t_4[2]
        t_4 = t_4[3]
        t_4 = t_1.view(t_5, t_6, t_7, t_4)
        t_4 = t_4.permute(0, 2, 1, 3)
        t_7 = t_2.size()
        t_6 = slice(None, -1, None)
        t_6 = t_7[t_6]
        t_7 = (12, 64)
        t_7 = t_6 + t_7
        t_6 = t_7[0]
        t_5 = t_7[1]
        t_1 = t_7[2]
        t_7 = t_7[3]
        t_7 = t_2.view(t_6, t_5, t_1, t_7)
        t_7 = t_7.permute(0, 2, 1, 3)
        t_1 = t_3.size()
        t_5 = slice(None, -1, None)
        t_5 = t_1[t_5]
        t_1 = (12, 64)
        t_1 = t_5 + t_1
        t_5 = t_1[0]
        t_6 = t_1[1]
        t_2 = t_1[2]
        t_1 = t_1[3]
        t_1 = t_3.view(t_5, t_6, t_2, t_1)
        t_1 = t_1.permute(0, 2, 1, 3)
        t_7 = t_7.transpose(-1, -2)
        t_7 = torch.matmul(t_4, t_7)
        t_4 = math.sqrt(64)
        t_4 = t_7 / t_4
        t_4 = t_4 + x0
        t_4 = self.l_4(t_4)
        t_4 = self.l_5(t_4)
        t_1 = torch.matmul(t_4, t_1)
        t_1 = t_1.permute(0, 2, 1, 3)
        t_1 = t_1.contiguous()
        t_4 = t_1.size()
        t_7 = slice(None, -2, None)
        t_7 = t_4[t_7]
        t_4 = (768,)
        t_4 = t_7 + t_4
        t_7 = t_4[0]
        t_2 = t_4[1]
        t_4 = t_4[2]
        t_4 = t_1.view(t_7, t_2, t_4)
        t_4 = self.l_6(t_4)
        t_4 = self.l_7(t_4)
        t_0 = t_4 + t_0
        t_0 = self.l_8(t_0)
        t_4 = self.l_9(t_0)
        t_4 = torch.nn.functional.gelu(t_4)
        t_4 = self.l_10(t_4)
        t_4 = self.l_11(t_4)
        t_0 = t_4 + t_0
        t_0 = self.l_12(t_0)
        t_4 = self.l_13(t_0)
        t_2 = self.l_14(t_0)
        t_7 = self.l_15(t_0)
        t_1 = t_4.size()
        t_6 = slice(None, -1, None)
        t_6 = t_1[t_6]
        t_1 = (12, 64)
        t_1 = t_6 + t_1
        t_6 = t_1[0]
        t_5 = t_1[1]
        t_3 = t_1[2]
        t_1 = t_1[3]
        t_1 = t_4.view(t_6, t_5, t_3, t_1)
        t_1 = t_1.permute(0, 2, 1, 3)
        t_3 = t_2.size()
        t_5 = slice(None, -1, None)
        t_5 = t_3[t_5]
        t_3 = (12, 64)
        t_3 = t_5 + t_3
        t_5 = t_3[0]
        t_6 = t_3[1]
        t_4 = t_3[2]
        t_3 = t_3[3]
        t_3 = t_2.view(t_5, t_6, t_4, t_3)
        t_3 = t_3.permute(0, 2, 1, 3)
        t_4 = t_7.size()
        t_6 = slice(None, -1, None)
        t_6 = t_4[t_6]
        t_4 = (12, 64)
        t_4 = t_6 + t_4
        t_6 = t_4[0]
        t_5 = t_4[1]
        t_2 = t_4[2]
        t_4 = t_4[3]
        t_4 = t_7.view(t_6, t_5, t_2, t_4)
        t_4 = t_4.permute(0, 2, 1, 3)
        t_3 = t_3.transpose(-1, -2)
        t_3 = torch.matmul(t_1, t_3)
        t_1 = math.sqrt(64)
        t_1 = t_3 / t_1
        t_1 = t_1 + x0
        t_1 = self.l_16(t_1)
        t_1 = self.l_17(t_1)
        t_4 = torch.matmul(t_1, t_4)
        t_4 = t_4.permute(0, 2, 1, 3)
        t_4 = t_4.contiguous()
        t_1 = t_4.size()
        t_3 = slice(None, -2, None)
        t_3 = t_1[t_3]
        t_1 = (768,)
        t_1 = t_3 + t_1
        t_3 = t_1[0]
        t_2 = t_1[1]
        t_1 = t_1[2]
        t_1 = t_4.view(t_3, t_2, t_1)
        t_1 = self.l_18(t_1)
        t_1 = self.l_19(t_1)
        t_0 = t_1 + t_0
        t_0 = self.l_20(t_0)
        t_1 = self.l_21(t_0)
        t_1 = torch.nn.functional.gelu(t_1)
        t_1 = self.l_22(t_1)
        t_1 = self.l_23(t_1)
        t_0 = t_1 + t_0
        t_0 = self.l_24(t_0)
        t_1 = slice(None, None, None)
        t_1 = (t_1, 0)
        t_1 = t_0[t_1]
        t_1 = self.l_25(t_1)
        t_1 = self.l_26(t_1)
        t_1 = (t_0, t_1)
        t_1 = t_1[0]
        t_0 = slice(None, None, None)
        t_2 = slice(None, None, None)
        t_2 = (t_0, 0, t_2)
        t_2 = t_1[t_2]
        t_2 = self.l_27(t_2)
        t_2 = self.l_28(t_2)
        t_2 = torch.tanh(t_2)
        t_2 = self.l_29(t_2)
        t_2 = self.l_30(t_2)
        # returning:
        # RobertaForSequenceClassification/RobertaClassificationHead[classifier]/Linear[out_proj]
        return (t_2,)

    def state_dict(self,device=None):
        # we return the state dict of this part as it should be in the original model
        return state_dict(self,device=device)

    def load_state_dict(self, state):
        return load_state_dict(self,state)

    def named_parameters(self,recurse=True):
        # we return the named parameters of this part as it should be in the original model
        return named_parameters(self,recurse=recurse)

    def named_buffers(self,recurse=True):
        # we return the named buffers of this part as it should be in the original model
        return named_buffers(self,recurse=recurse)

    def cpu(self):
        return cpu(self)

    def cuda(self,device=None):
        return cuda(self,device=device)

    def to(self, *args, **kwargs):
        return to(self,*args,**kwargs)


def traverse_model(module: nn.Module, depth: int, prefix: Optional[str] = None,
                   basic_blocks: Tuple[nn.Module] = (), full: bool = False) -> Iterator[Tuple[nn.Module, str, nn.Module]]:
    '''
    iterate over model layers yielding the layer,layer_scope,encasing_module
    Parameters:
    -----------
    model:
        the model to iterate over
    depth:
        how far down in the model tree to go
    basic_blocks:
        a list of modules that if encountered will not be broken down
    full:
        whether to yield only layers specified by the depth and basick_block options or to yield all layers
    '''
    if prefix is None:
        prefix = type(module).__name__

    for name, sub_module in module.named_children():
        scope = prefix + "/" + type(sub_module).__name__ + f"[{name}]"
        if len(list(sub_module.children())) == 0 or isinstance(sub_module, tuple(basic_blocks)) or depth == 0:
            if full:
                yield sub_module, scope, module, True
            else:
                yield sub_module, scope, module
        else:
            if full:
                yield sub_module, scope, module, False
            yield from traverse_model(sub_module, depth - 1, scope, basic_blocks, full)


def layerDict(model: nn.Module, depth=1000, basic_blocks=()) -> Dict[str, nn.Module]:
    return {s: l for l, s, _ in traverse_model(model, depth, basic_blocks=basic_blocks)}


def traverse_params_buffs(module: nn.Module, prefix: Optional[str] = None) -> Iterator[Tuple[torch.tensor, str]]:
    '''
    iterate over model's buffers and parameters yielding obj,obj_scope

    Parameters:
    -----------
    model:
        the model to iterate over
    '''
    if prefix is None:
        prefix = type(module).__name__

    # params
    for param_name, param in module.named_parameters(recurse=False):
        param_scope = f"{prefix}/{type(param).__name__}[{param_name}]"
        yield param, param_scope

    # buffs
    for buffer_name, buffer in module.named_buffers(recurse=False):
        buffer_scope = f"{prefix}/{type(buffer).__name__}[{buffer_name}]"
        yield buffer, buffer_scope

    # recurse
    for name, sub_module in module.named_children():
        yield from traverse_params_buffs(sub_module, prefix + "/" + type(sub_module).__name__ + f"[{name}]")


def tensorDict(model: nn.Module) -> OrderedDict[str, Tensor]:
    return collections.OrderedDict((s, t)for t, s in traverse_params_buffs(model))


def move_tensors(ts, device):
    def move(t):
        if isinstance(t, (nn.Module, Tensor)):
            return t.to(device)
        return t

    return nested_map(move, ts)


def nested_map(func, ts,full=False):
    if isinstance(ts, torch.Size):
        # size is inheriting from tuple which is stupid
        return func(ts)
    elif isinstance(ts, (list, tuple, set)):
        return type(ts)(nested_map(func, t,full=full) for t in ts)
    elif isinstance(ts, dict):
        return {k: nested_map(func, v,full=full) for k, v in ts.items()}
    elif isinstance(ts, slice) and full:
        start = nested_map(func, ts.start,full=full)
        stop = nested_map(func, ts.stop,full=full)
        step = nested_map(func, ts.step,full=full)
        return slice(start, stop, step)
    return func(ts)


def flatten(ts):
    if isinstance(ts,torch.Size):
        # size is inheriting from tuple which is stupid
        yield ts
    elif isinstance(ts, (list, tuple, set)):
        yield from chain(*[flatten(t) for t in ts])
    elif isinstance(ts, dict):
        yield from chain(*[flatten(t) for k,t in sorted(ts.items(),key=lambda t:t[0])])
    else:
        yield ts


def unflatten(xs,structure):
    return _unflatten(xs,structure)[0]


def _unflatten(xs,structure):
    if isinstance(structure,torch.Size):
        #torch.Size is subclass of tuple which is stupid
        return xs[0],1

    if not isinstance(structure,(list,tuple,set,dict)):
        return xs[0],1
    
    if isinstance(structure,(list,tuple,set)):
        offset=0
        elements = []
        for s in structure:
            e,n = _unflatten(xs[offset:],s)
            elements.append(e)
            offset += n
        
        return type(structure)(elements),offset
    
    assert isinstance(structure,dict)
    offset = 0
    elements = dict()
    for k,v in sorted(structure.items(),key=lambda t: t[0]):
        e,n = _unflatten(xs[offset:],v)
        elements[k] = e
        offset += n
    
    return elements,offset


def state_dict(partition, device=None):
    # we return the state dict of this part as it should be in the original model
    state = nn.Module.state_dict(partition)
    lookup = partition.lookup
    result = dict()
    for k, v in state.items():
        if k in lookup:
            result[lookup[k]] = v if device is None else v.to(device)
        else:
            assert '.' in k
            split_idx = k.find('.')
            new_k = lookup[k[:split_idx]] + k[split_idx:]
            result[new_k] = v if device is None else v.to(device)
    return result


def load_state_dict(partition, state):
    reverse_lookup = {v: k for k, v in partition.lookup.items()}
    device = partition.device
    keys = list(partition.state_dict(None).keys())
    new_state = dict()
    for k in keys:
        if k in reverse_lookup:
            new_state[reverse_lookup[k]] = state[k].to(device)
            continue
        idx = k.rfind(".")
        to_replace = k[:idx]
        if to_replace in reverse_lookup:
            key = reverse_lookup[to_replace] + k[idx:]
            new_state[key] = state[k].to(device)
    nn.Module.load_state_dict(partition, new_state, strict=True)


def named_buffers(partition, recurse=True):
    # we return the named buffers of this part as it should be in the original model
    params = nn.Module.named_buffers(partition, recurse=recurse)
    lookup = partition.lookup
    for k, v in params:
        if k in lookup:
            yield (lookup[k], v)
        else:
            assert '.' in k
            split_idx = k.find('.')
            new_k = lookup[k[:split_idx]] + k[split_idx:]
            yield (new_k, v)


def named_parameters(partition, recurse=True):
    # we return the named parameters of this part as it should be in the original model
    params = nn.Module.named_parameters(partition, recurse=recurse)
    lookup = partition.lookup
    for k, v in params:
        if k in lookup:
            yield (lookup[k], v)
        else:
            assert '.' in k
            split_idx = k.find('.')
            new_k = lookup[k[:split_idx]] + k[split_idx:]
            yield (new_k, v)


def cpu(partition):
    partition.device = torch.device('cpu')
    return nn.Module.cpu(partition)


def cuda(partition, device=None):
    if device is None:
        device = torch.cuda.current_device()
    partition.device = torch.device(device)
    return nn.Module.cuda(partition, partition.device)


def to(partition, *args, **kwargs):
    device = None
    if 'device' in kwargs:
        device = kwargs['device']
    elif 'tensor' in kwargs:
        device = kwargs['tensor'].device
    if args:
        if isinstance(args[0], (torch.device, int, str)):
            device = args[0]
        if torch.is_tensor(args[0]):
            device = args[0].device
    if not (device is None):
        partition.device = torch.device(device)
    return nn.Module.to(partition, *args, **kwargs)

"""analysis summary
-I- Printing Report
warnings:
Partition0 output:RobertaForSequenceClassification/RobertaModel[roberta]/BertEncoder[encoder]/BertLayer[0]/BertAttention[attention]/BertSelfAttention[self]/Tensor::permute_96 is not contiguous!
Number of stages: 8
cutting edges are edges between partitions
number of cutting edges: 27

backward times include recomputation
Analysis for async_pipeline=True: last partition will not do recomputation.

real times are based on real measurements of execution time of generated partitions ms
forward {0: 6.7, 1: 12.73, 2: 10.69, 3: 14.82, 4: 15.6, 5: 9.44, 6: 11.56, 7: 13.19}
backward {0: 7.53, 1: 33.94, 2: 25.88, 3: 34.28, 4: 33.44, 5: 24.88, 6: 27.41, 7: 24.3}

balance is ratio of computation time between fastest and slowest parts. (between 0 and 1 higher is better)

real balance:
forward 0.429
backward 0.220

Assuming bandwidth of 11.0 GBps between GPUs

communication volumes size of activations of each partition
0: input size:'0.03 MB', recieve_time:'0.00 ms', out:'50.33 MB', send time:'4.58 ms'
1: input size:'50.35 MB', recieve_time:'4.58 ms', out:'12.58 MB', send time:'1.14 ms'
2: input size:'12.60 MB', recieve_time:'1.15 ms', out:'12.58 MB', send time:'1.14 ms'
3: input size:'12.60 MB', recieve_time:'1.15 ms', out:'25.17 MB', send time:'2.29 ms'
4: input size:'25.18 MB', recieve_time:'2.29 ms', out:'37.75 MB', send time:'3.43 ms'
5: input size:'37.77 MB', recieve_time:'3.43 ms', out:'12.58 MB', send time:'1.14 ms'
6: input size:'12.60 MB', recieve_time:'1.15 ms', out:'12.58 MB', send time:'1.14 ms'
7: input size:'12.60 MB', recieve_time:'1.15 ms', out:'0.00 MB', send time:'0.00 ms'

Compuatation Communication ratio (comp/(comp+comm)):
forward {0: 0.32, 1: 0.91, 2: 0.89, 3: 0.85, 4: 0.78, 5: 0.88, 6: 0.9, 7: 1.0} 
backward {0: 1.0, 1: 0.87, 2: 0.96, 3: 0.97, 4: 0.93, 5: 0.86, 6: 0.96, 7: 0.95}

Pipeline Slowdown: (compared to sequential executation with no communication, and same recompute policy)
forward 1.563
backward 1.394

Expected utilization by partition
forward {0: 0.14, 1: 0.75, 2: 0.62, 3: 0.8, 4: 0.78, 5: 0.54, 6: 0.67, 7: 0.85}
backward {0: 0.22, 1: 0.86, 2: 0.72, 3: 0.97, 4: 0.91, 5: 0.63, 6: 0.77, 7: 0.68}

worstcase: bwd: 34.284 fwd: 15.598
expected_speedup_compared_to_seq_no_recomp_no_comm: 4.350
Expected speedup for 8 partitions is: 5.530
"""