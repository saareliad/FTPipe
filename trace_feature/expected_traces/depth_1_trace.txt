graph(%self.1 : __torch__.torch.nn.modules.module.___torch_mangle_68.Module,
      %input.1 : Float(100, 100)):
  %85 : __torch__.torch.nn.modules.module.___torch_mangle_67.Module = prim::GetAttr[name="b2"](%self.1)
  %75 : __torch__.torch.nn.modules.module.___torch_mangle_59.Module = prim::GetAttr[name="b1"](%self.1)
  %118 : __torch__.torch.nn.modules.module.___torch_mangle_58.Module = prim::GetAttr[name="op"](%75)
  %119 : __torch__.torch.nn.modules.module.___torch_mangle_56.Module = prim::GetAttr[name="l0"](%75)
  %120 : Tensor = prim::CallMethod[name="forward"](%119, %input.1)
  %121 : Tensor = prim::CallMethod[name="forward"](%118, %input.1)
  %122 : (Tensor, Tensor) = prim::TupleConstruct(%121, %120)
  %105 : Tensor, %106 : Tensor = prim::TupleUnpack(%122)
  %123 : __torch__.torch.nn.modules.module.___torch_mangle_66.Module = prim::GetAttr[name="op"](%85)
  %124 : __torch__.torch.nn.modules.module.___torch_mangle_61.Module = prim::GetAttr[name="l0"](%85)
  %125 : Tensor = prim::CallMethod[name="forward"](%124, %105)
  %126 : (Tensor, Tensor) = prim::CallMethod[name="forward"](%123, %106, %125)
  %127 : Tensor, %128 : Tensor = prim::TupleUnpack(%126)
  %129 : (Tensor, Tensor, Tensor) = prim::TupleConstruct(%127, %128, %125)
  %113 : Tensor, %114 : Tensor, %115 : Tensor = prim::TupleUnpack(%129)
  %54 : (Float(100, 100), Float(100, 100)) = prim::TupleConstruct(%113, %114)
  %55 : ((Float(100, 100), Float(100, 100)), Float(100, 100)) = prim::TupleConstruct(%54, %115)
  return (%55)
