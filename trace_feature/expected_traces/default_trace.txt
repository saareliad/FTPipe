graph(%self.1 : __torch__.torch.nn.modules.module.___torch_mangle_96.Module,
      %input.1 : Float(100, 100)):
  %85 : __torch__.torch.nn.modules.module.___torch_mangle_95.Module = prim::GetAttr[name="b2"](%self.1)
  %75 : __torch__.torch.nn.modules.module.___torch_mangle_87.Module = prim::GetAttr[name="b1"](%self.1)
  %118 : __torch__.torch.nn.modules.module.___torch_mangle_86.Module = prim::GetAttr[name="op"](%75)
  %119 : __torch__.torch.nn.modules.module.___torch_mangle_84.Module = prim::GetAttr[name="l0"](%75)
  %120 : __torch__.torch.nn.modules.module.___torch_mangle_83.Module = prim::GetAttr[name="act"](%119)
  %121 : Float(100, 100) = aten::relu(%input.1), scope: __module.b1/__module.b1.l0/__module.b1.l0.act # /opt/conda/lib/python3.7/site-packages/torch/nn/functional.py:914:0
  %122 : Long() = prim::Constant[value={5}](), scope: __module.b1/__module.b1.l0 # feature_test.py:57:0
  %input.3 : Float(100, 100) = aten::mul(%121, %122), scope: __module.b1/__module.b1.l0 # feature_test.py:57:0
  %124 : __torch__.torch.nn.modules.module.___torch_mangle_85.Module = prim::GetAttr[name="act"](%118)
  %125 : Tensor = prim::GetAttr[name="bias"](%124)
  %126 : Tensor = prim::GetAttr[name="weight"](%124)
  %127 : Float(100, 100) = aten::t(%126), scope: __module.b1/__module.b1.op/__module.b1.op.act # /opt/conda/lib/python3.7/site-packages/torch/nn/functional.py:1370:0
  %128 : int = prim::Constant[value=1](), scope: __module.b1/__module.b1.op/__module.b1.op.act # /opt/conda/lib/python3.7/site-packages/torch/nn/functional.py:1370:0
  %129 : int = prim::Constant[value=1](), scope: __module.b1/__module.b1.op/__module.b1.op.act # /opt/conda/lib/python3.7/site-packages/torch/nn/functional.py:1370:0
  %130 : Float(100, 100) = aten::addmm(%125, %input.1, %127, %128, %129), scope: __module.b1/__module.b1.op/__module.b1.op.act # /opt/conda/lib/python3.7/site-packages/torch/nn/functional.py:1370:0
  %131 : Long() = prim::Constant[value={5}](), scope: __module.b1/__module.b1.op # feature_test.py:57:0
  %input.2 : Float(100, 100) = aten::mul(%130, %131), scope: __module.b1/__module.b1.op # feature_test.py:57:0
  %133 : (Tensor, Tensor) = prim::TupleConstruct(%input.2, %input.3)
  %105 : Tensor, %106 : Tensor = prim::TupleUnpack(%133)
  %134 : __torch__.torch.nn.modules.module.___torch_mangle_94.Module = prim::GetAttr[name="op"](%85)
  %135 : __torch__.torch.nn.modules.module.___torch_mangle_89.Module = prim::GetAttr[name="l0"](%85)
  %136 : __torch__.torch.nn.modules.module.___torch_mangle_88.Module = prim::GetAttr[name="act"](%135)
  %137 : Float(100, 100) = aten::relu(%105), scope: __module.b2/__module.b2.l0/__module.b2.l0.act # /opt/conda/lib/python3.7/site-packages/torch/nn/functional.py:914:0
  %138 : Long() = prim::Constant[value={5}](), scope: __module.b2/__module.b2.l0 # feature_test.py:57:0
  %input : Float(100, 100) = aten::mul(%137, %138), scope: __module.b2/__module.b2.l0 # feature_test.py:57:0
  %140 : __torch__.torch.nn.modules.module.___torch_mangle_93.Module = prim::GetAttr[name="op"](%134)
  %141 : __torch__.torch.nn.modules.module.___torch_mangle_91.Module = prim::GetAttr[name="l0"](%134)
  %142 : __torch__.torch.nn.modules.module.___torch_mangle_90.Module = prim::GetAttr[name="act"](%141)
  %143 : Float(100, 100) = aten::relu(%106), scope: __module.b2/__module.b2.op/__module.b2.op.l0/__module.b2.op.l0.act # /opt/conda/lib/python3.7/site-packages/torch/nn/functional.py:914:0
  %144 : Long() = prim::Constant[value={5}](), scope: __module.b2/__module.b2.op/__module.b2.op.l0 # feature_test.py:57:0
  %145 : Float(100, 100) = aten::mul(%143, %144), scope: __module.b2/__module.b2.op/__module.b2.op.l0 # feature_test.py:57:0
  %146 : __torch__.torch.nn.modules.module.___torch_mangle_92.Module = prim::GetAttr[name="act"](%140)
  %147 : Tensor = prim::GetAttr[name="bias"](%146)
  %148 : Tensor = prim::GetAttr[name="weight"](%146)
  %149 : Float(100, 100) = aten::t(%148), scope: __module.b2/__module.b2.op/__module.b2.op.op/__module.b2.op.op.act # /opt/conda/lib/python3.7/site-packages/torch/nn/functional.py:1370:0
  %150 : int = prim::Constant[value=1](), scope: __module.b2/__module.b2.op/__module.b2.op.op/__module.b2.op.op.act # /opt/conda/lib/python3.7/site-packages/torch/nn/functional.py:1370:0
  %151 : int = prim::Constant[value=1](), scope: __module.b2/__module.b2.op/__module.b2.op.op/__module.b2.op.op.act # /opt/conda/lib/python3.7/site-packages/torch/nn/functional.py:1370:0
  %152 : Float(100, 100) = aten::addmm(%147, %input, %149, %150, %151), scope: __module.b2/__module.b2.op/__module.b2.op.op/__module.b2.op.op.act # /opt/conda/lib/python3.7/site-packages/torch/nn/functional.py:1370:0
  %153 : Long() = prim::Constant[value={5}](), scope: __module.b2/__module.b2.op/__module.b2.op.op # feature_test.py:57:0
  %154 : Float(100, 100) = aten::mul(%152, %153), scope: __module.b2/__module.b2.op/__module.b2.op.op # feature_test.py:57:0
  %155 : (Tensor, Tensor) = prim::TupleConstruct(%154, %145)
  %156 : Tensor, %157 : Tensor = prim::TupleUnpack(%155)
  %158 : (Tensor, Tensor, Tensor) = prim::TupleConstruct(%156, %157, %input)
  %113 : Tensor, %114 : Tensor, %115 : Tensor = prim::TupleUnpack(%158)
  %54 : (Float(100, 100), Float(100, 100)) = prim::TupleConstruct(%113, %114)
  %55 : ((Float(100, 100), Float(100, 100)), Float(100, 100)) = prim::TupleConstruct(%54, %115)
  return (%55)
