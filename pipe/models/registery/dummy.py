from pipe.models.registery.model_handler import CommonModelHandler
from autopipe.tasks.dummy_t5 import DumT5Partitioner, T5Tokenizer
from types import SimpleNamespace

class DummyModelHandler(CommonModelHandler):
    def __init__(self, *args, **kw):
        super().__init__(*args, **kw)

    def _get_normal_model_instance(self, *args, **kwargs):
        if self.normal_model_instance is None:

            args = SimpleNamespace()
            p = DumT5Partitioner(args)
            args.lmhead = True
            args.stateless_tied = True
            args.precompute_masks = False
            self.normal_model_instance = p.get_model(args)
            self.tokenizer = p.tokenizer
            self.config = p.config

        return self.normal_model_instance

    def get_extra(self, *args, **kw):
        return dict(config=self.config, tokenizer=self.tokenizer)


DummyModelHandler().register_autogenerated("DUMMY_LAYERSt5_base_tied_lmheads_512_4_2p_bw12_squad1_pipedream")
DummyModelHandler().register_autogenerated("DUMMY_t5_base_tied_lmheads_512_4_2p_bw12_squad1_pipedream")
DummyModelHandler().register_autogenerated("DUMMY_LAYERSt5_base_tied_lmheads_512_4_2p_bw12_squad1_mpipe")
DummyModelHandler().register_autogenerated("DUMMY_t5_base_tied_lmheads_512_4_2p_bw12_squad1_mpipe")
