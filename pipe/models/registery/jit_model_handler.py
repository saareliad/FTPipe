import pickle
import torch

from models.normal.vision_models.WideResNet import WideResNet
from pipe.models.transformers_cfg import bert_base_uncaseds_384_2p_bw12_pipedream
from pipe.models.transformers_utils import pretrained_model_config_and_tokenizer

from pipe.models.registery.model_handler import CommonModelHandler
from pipe.models.jit_partitioning_config import JitPipelineConfig

_PARTITIONED_JIT_MODELS_PACKAGE = "models.partitioned_jit"


class JitModelHandler(CommonModelHandler):
    def __init__(self, model, sample_batch, extra_kw=None):
        super(JitModelHandler, self).__init__(partitioned_models_package=_PARTITIONED_JIT_MODELS_PACKAGE)
        self.model = model
        self.sample_batch = sample_batch
        self.extra_kw = extra_kw

    def _get_normal_model_instance(self, *args, **kw):
        raise NotImplementedError()

    def get_pipe_config(self) -> JitPipelineConfig:
        if self.pipe_config is None:
            file_name = self.generated_file_name_or_path
            config_path = self.partitioned_models_package.replace('.', '/') + '/' + file_name
            config = pickle.load(open(config_path, 'rb'))
            self.pipe_config = JitPipelineConfig(d=config,
                                                 model=model,
                                                 sample_batch=self.sample_batch)
        return self.pipe_config

    def realize_stage_for_rank(self, batch_size, my_rank, **kwargs):
        pipe_config = self.get_pipe_config()
        return pipe_config.realize_stage_for_rank(batch_size, my_rank, **kwargs)

    def get_extra(self):
        return self.extra_kw


JitModelHandler(model=WideResNet(depth=16, num_classes=10, widen_factor=4, drop_rate=0.0),
                sample_batch=torch.rand(4, 3, 32, 32)) \
    .register_autogenerated(generated_file_name_or_path='wrn_16x4_c10_p2_jit')

model, tokenizer, config = pretrained_model_config_and_tokenizer(**bert_base_uncaseds_384_2p_bw12_pipedream(), torchscript=True)
model.double()
dummy_inputs = tokenizer("Hello, my dog is cute", return_tensors='pt')
JitModelHandler(model=model,
                sample_batch=(dummy_inputs['input_ids'], dummy_inputs['attention_mask'], dummy_inputs['token_type_ids']),
                extra_kw=dict(config=config, tokenizer=tokenizer)) \
    .register_autogenerated(generated_file_name_or_path='bert_base_uncaseds_384_2p_bw12_pipedream_jit')
