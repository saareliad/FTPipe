import pickle
import torch

from models.normal.vision_models.WideResNet import WideResNet
from pipe.models.registery.model_handler import CommonModelHandler
from pipe.models.jit_partitioning_config import JitPipelineConfig

_PARTITIONED_JIT_MODELS_PACKAGE = "models.partitioned_jit"


class JitModelHandler(CommonModelHandler):
    def __init__(self, model_class, sample_batch, dict_params):
        super(JitModelHandler, self).__init__(partitioned_models_package=_PARTITIONED_JIT_MODELS_PACKAGE)
        self.dict_params = dict_params
        self.model_class = model_class
        self.sample_batch = sample_batch

    def _get_normal_model_instance(self, *args, **kw):
        raise NotImplementedError()

    def get_pipe_config(self) -> JitPipelineConfig:
        if self.pipe_config is None:
            file_name = self.generated_file_name_or_path
            config_path = self.partitioned_models_package.replace('.', '/') + '/' + file_name
            config = pickle.load(open(config_path, 'rb'))
            self.pipe_config = JitPipelineConfig(d=config,
                                                 model=self.model_class(**self.dict_params),
                                                 sample_batch=self.sample_batch)
        return self.pipe_config

    def realize_stage_for_rank(self, batch_size, my_rank, **kwargs):
        pipe_config = self.get_pipe_config()
        return pipe_config.realize_stage_for_rank(batch_size, my_rank, **kwargs)


JitModelHandler(dict_params=dict(depth=16, num_classes=10, widen_factor=4, drop_rate=0.0),
                model_class=WideResNet,
                sample_batch=torch.rand(4, 3, 32, 32)) \
    .register_autogenerated(generated_file_name_or_path='wrn_16x4_c10_p2_jit')
