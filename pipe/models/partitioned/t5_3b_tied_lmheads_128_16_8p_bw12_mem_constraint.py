"""AutoGenerated with:
python partitioning_script.py --partitioning_task t5 --auto_infer_node_bwd_to_fwd_ratio --bwd_to_fwd_ratio 1 --t5_task squad1 --lmhead --n_iter 10 --n_partitions 8 --analysis_batch_size 1 --partitioning_batch_size 1 --multilevel --precompute_masks --stateless_tied --model_name_or_path t5-3b --save_memory_mode --constraint memory --objective stage_time --max_seq_length 128 --answer_max_seq_length 16
"""
import torch.nn.functional
import math
import torch
import torch.functional
from torch import Tensor
import torch.nn as nn
from itertools import chain
from typing import Optional, Tuple, Iterator, Iterable, OrderedDict, Dict
import collections

from torch.nn.modules.loss import CrossEntropyLoss
from torch.nn.modules.linear import Linear
from models.normal.NLP_models.stateless import StatelessEmbedding
from torch.nn.modules.dropout import Dropout
from torch.nn.modules.sparse import Embedding
from models.normal.NLP_models.modeling_t5 import T5LayerNorm
# this is an auto generated file do not edit unless you know what you are doing


# partition adjacency
# model inputs {0, 4, 7}
# partition 0 {'inputs': {'input_ids', 'attention_mask', 'decoder_input_ids', 'decoder_attention_mask'}, 'outputs': {1, 2, 3, 4}}
# partition 1 {'inputs': {0}, 'outputs': {2, 3, 4}}
# partition 2 {'inputs': {0, 1}, 'outputs': {3, 4}}
# partition 3 {'inputs': {0, 1, 2}, 'outputs': {4, 5, 6, 7}}
# partition 4 {'inputs': {0, 1, 2, 3, 'inverted_encoder_attention_mask'}, 'outputs': {5, 6, 7}}
# partition 5 {'inputs': {3, 4}, 'outputs': {6}}
# partition 6 {'inputs': {3, 4, 5}, 'outputs': {7}}
# partition 7 {'inputs': {'lm_labels', 3, 4, 6}, 'outputs': {'output'}}
# model outputs {7}


def create_pipeline_configuration(DEBUG=False, batch_size=1):
    config = {
        'batch_dim': 0,
        'depth': 10000,
        'basic_blocks': (CrossEntropyLoss,Linear,StatelessEmbedding,Dropout,Embedding,T5LayerNorm),
        'model_inputs': {
            'attention_mask': {
                'shape': torch.Size([1, 1, 1, 128]),
                'dtype': torch.float32,
                'is_batched': True,
                'used_by': [0]},
            'decoder_attention_mask': {
                'shape': torch.Size([1, 1, 16, 16]),
                'dtype': torch.float32,
                'is_batched': True,
                'used_by': [0]},
            'decoder_input_ids': {
                'shape': torch.Size([1, 16]),
                'dtype': torch.int64,
                'is_batched': True,
                'used_by': [0]},
            'input_ids': {
                'shape': torch.Size([1, 128]),
                'dtype': torch.int64,
                'is_batched': True,
                'used_by': [0]},
            'inverted_encoder_attention_mask': {
                'shape': torch.Size([1, 1, 1, 128]),
                'dtype': torch.float32,
                'is_batched': True,
                'used_by': [4]},
            'lm_labels': {
                'shape': torch.Size([1, 16]),
                'dtype': torch.int64,
                'is_batched': True,
                'used_by': [7]}},
        'model_outputs': {
            'T5ForConditionalGeneration/CrossEntropyLoss[lm_loss]': {
                'shape': torch.Size([1]),
                'dtype': torch.float32,
                'is_batched': False,
                'created_by': 7}},
        'stages': {
            0: {
                'stage_cls': Partition0,
                'inputs': {
                    'attention_mask': {
                        'shape': torch.Size([1, 1, 1, 128]),
                        'dtype': torch.float32,
                        'req_grad': False,
                        'is_batched': True,
                        'created_by': -1},
                    'decoder_attention_mask': {
                        'shape': torch.Size([1, 1, 16, 16]),
                        'dtype': torch.float32,
                        'req_grad': False,
                        'is_batched': True,
                        'created_by': -1},
                    'decoder_input_ids': {
                        'shape': torch.Size([1, 16]),
                        'dtype': torch.int64,
                        'req_grad': False,
                        'is_batched': True,
                        'created_by': -1},
                    'input_ids': {
                        'shape': torch.Size([1, 128]),
                        'dtype': torch.int64,
                        'req_grad': False,
                        'is_batched': True,
                        'created_by': -1}},
                'outputs': {
                    'T5ForConditionalGeneration/T5Stack[encoder]/tuple::__getitem___149_1': {
                        'shape': torch.Size([1, 32, 128, 128]),
                        'dtype': torch.float32,
                        'req_grad': True,
                        'is_batched': True,
                        'used_by': [1]},
                    'T5ForConditionalGeneration/T5Stack[encoder]/T5Block[5]/T5LayerFF[1]/Tensor::__add___444': {
                        'shape': torch.Size([1, 128, 1024]),
                        'dtype': torch.float32,
                        'req_grad': True,
                        'is_batched': True,
                        'used_by': [1]},
                    'T5ForConditionalGeneration/T5Stack[encoder]/T5Block[6]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Tensor::view_492': {
                        'shape': torch.Size([1, 128, 4096]),
                        'dtype': torch.float32,
                        'req_grad': True,
                        'is_batched': True,
                        'used_by': [1]},
                    'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[0]/T5LayerSelfAttention[0]/prim::TupleConstruct_1628_0': {
                        'shape': torch.Size([1, 16, 1024]),
                        'dtype': torch.float32,
                        'req_grad': True,
                        'is_batched': True,
                        'used_by': [2]},
                    'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[0]/T5LayerSelfAttention[0]/prim::TupleConstruct_1628_1': {
                        'shape': torch.Size([1, 32, 16, 16]),
                        'dtype': torch.float32,
                        'req_grad': True,
                        'is_batched': True,
                        'used_by': [2]},
                    'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[0]/tuple::__getitem___1630': {
                        'shape': torch.Size([1, 16, 1024]),
                        'dtype': torch.float32,
                        'req_grad': True,
                        'is_batched': True,
                        'used_by': [4]},
                    'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[0]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Tensor::size_1634': {
                        'shape': None,
                        'dtype': torch.Size,
                        'req_grad': False,
                        'is_batched': False,
                        'used_by': [1]},
                    'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[0]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Linear[q]': {
                        'shape': torch.Size([1, 16, 4096]),
                        'dtype': torch.float32,
                        'req_grad': True,
                        'is_batched': True,
                        'used_by': [2]}},
                'devices': ['cpu' if DEBUG else 'cuda:0']},
            1: {
                'stage_cls': Partition1,
                'inputs': {
                    'T5ForConditionalGeneration/T5Stack[encoder]/tuple::__getitem___149_1': {
                        'shape': torch.Size([1, 32, 128, 128]),
                        'dtype': torch.float32,
                        'req_grad': True,
                        'is_batched': True,
                        'created_by': 0},
                    'T5ForConditionalGeneration/T5Stack[encoder]/T5Block[5]/T5LayerFF[1]/Tensor::__add___444': {
                        'shape': torch.Size([1, 128, 1024]),
                        'dtype': torch.float32,
                        'req_grad': True,
                        'is_batched': True,
                        'created_by': 0},
                    'T5ForConditionalGeneration/T5Stack[encoder]/T5Block[6]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Tensor::view_492': {
                        'shape': torch.Size([1, 128, 4096]),
                        'dtype': torch.float32,
                        'req_grad': True,
                        'is_batched': True,
                        'created_by': 0},
                    'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[0]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Tensor::size_1634': {
                        'shape': None,
                        'dtype': torch.Size,
                        'req_grad': False,
                        'is_batched': False,
                        'created_by': 0}},
                'outputs': {
                    'T5ForConditionalGeneration/T5Stack[encoder]/tuple::__getitem___149_2': {
                        'shape': torch.Size([1, 32, 128, 128]),
                        'dtype': torch.float32,
                        'req_grad': True,
                        'is_batched': True,
                        'used_by': [2]},
                    'T5ForConditionalGeneration/T5Stack[encoder]/T5Block[12]/T5LayerFF[1]/Tensor::__add___857': {
                        'shape': torch.Size([1, 128, 1024]),
                        'dtype': torch.float32,
                        'req_grad': True,
                        'is_batched': True,
                        'used_by': [2]},
                    'T5ForConditionalGeneration/T5Stack[encoder]/T5Block[13]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Linear[o]': {
                        'shape': torch.Size([1, 128, 1024]),
                        'dtype': torch.float32,
                        'req_grad': True,
                        'is_batched': True,
                        'used_by': [2]},
                    'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[0]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Size::__getitem___1636_2': {
                        'shape': None,
                        'dtype': int,
                        'req_grad': False,
                        'is_batched': False,
                        'used_by': [2]},
                    'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[0]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/torch::arange_1670': {
                        'shape': torch.Size([16]),
                        'dtype': torch.int64,
                        'req_grad': False,
                        'is_batched': False,
                        'used_by': [3]}},
                'devices': ['cpu' if DEBUG else 'cuda:1']},
            2: {
                'stage_cls': Partition2,
                'inputs': {
                    'T5ForConditionalGeneration/T5Stack[encoder]/tuple::__getitem___149_2': {
                        'shape': torch.Size([1, 32, 128, 128]),
                        'dtype': torch.float32,
                        'req_grad': True,
                        'is_batched': True,
                        'created_by': 1},
                    'T5ForConditionalGeneration/T5Stack[encoder]/T5Block[12]/T5LayerFF[1]/Tensor::__add___857': {
                        'shape': torch.Size([1, 128, 1024]),
                        'dtype': torch.float32,
                        'req_grad': True,
                        'is_batched': True,
                        'created_by': 1},
                    'T5ForConditionalGeneration/T5Stack[encoder]/T5Block[13]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Linear[o]': {
                        'shape': torch.Size([1, 128, 1024]),
                        'dtype': torch.float32,
                        'req_grad': True,
                        'is_batched': True,
                        'created_by': 1},
                    'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[0]/T5LayerSelfAttention[0]/prim::TupleConstruct_1628_0': {
                        'shape': torch.Size([1, 16, 1024]),
                        'dtype': torch.float32,
                        'req_grad': True,
                        'is_batched': True,
                        'created_by': 0},
                    'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[0]/T5LayerSelfAttention[0]/prim::TupleConstruct_1628_1': {
                        'shape': torch.Size([1, 32, 16, 16]),
                        'dtype': torch.float32,
                        'req_grad': True,
                        'is_batched': True,
                        'created_by': 0},
                    'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[0]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Size::__getitem___1636_2': {
                        'shape': None,
                        'dtype': int,
                        'req_grad': False,
                        'is_batched': False,
                        'created_by': 1},
                    'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[0]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Linear[q]': {
                        'shape': torch.Size([1, 16, 4096]),
                        'dtype': torch.float32,
                        'req_grad': True,
                        'is_batched': True,
                        'created_by': 0}},
                'outputs': {
                    'T5ForConditionalGeneration/T5Stack[encoder]/tuple::__getitem___149_3': {
                        'shape': torch.Size([1, 32, 128, 128]),
                        'dtype': torch.float32,
                        'req_grad': True,
                        'is_batched': True,
                        'used_by': [3]},
                    'T5ForConditionalGeneration/T5Stack[encoder]/T5Block[19]/T5LayerFF[1]/Tensor::__add___1270': {
                        'shape': torch.Size([1, 128, 1024]),
                        'dtype': torch.float32,
                        'req_grad': True,
                        'is_batched': True,
                        'used_by': [3]},
                    'T5ForConditionalGeneration/T5Stack[encoder]/T5Block[20]/T5LayerSelfAttention[0]/Dropout[dropout]': {
                        'shape': torch.Size([1, 128, 1024]),
                        'dtype': torch.float32,
                        'req_grad': True,
                        'is_batched': True,
                        'used_by': [3]},
                    'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[0]/tuple::__getitem___1632': {
                        'shape': torch.Size([1, 32, 16, 16]),
                        'dtype': torch.float32,
                        'req_grad': True,
                        'is_batched': True,
                        'used_by': [4]},
                    'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[0]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Size::__getitem___1636_3': {
                        'shape': None,
                        'dtype': int,
                        'req_grad': False,
                        'is_batched': False,
                        'used_by': [3]},
                    'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[0]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Tensor::transpose_1648': {
                        'shape': torch.Size([1, 32, 16, 128]),
                        'dtype': torch.float32,
                        'req_grad': True,
                        'is_batched': True,
                        'used_by': [4]}},
                'devices': ['cpu' if DEBUG else 'cuda:2']},
            3: {
                'stage_cls': Partition3,
                'inputs': {
                    'T5ForConditionalGeneration/T5Stack[encoder]/tuple::__getitem___149_3': {
                        'shape': torch.Size([1, 32, 128, 128]),
                        'dtype': torch.float32,
                        'req_grad': True,
                        'is_batched': True,
                        'created_by': 2},
                    'T5ForConditionalGeneration/T5Stack[encoder]/T5Block[19]/T5LayerFF[1]/Tensor::__add___1270': {
                        'shape': torch.Size([1, 128, 1024]),
                        'dtype': torch.float32,
                        'req_grad': True,
                        'is_batched': True,
                        'created_by': 2},
                    'T5ForConditionalGeneration/T5Stack[encoder]/T5Block[20]/T5LayerSelfAttention[0]/Dropout[dropout]': {
                        'shape': torch.Size([1, 128, 1024]),
                        'dtype': torch.float32,
                        'req_grad': True,
                        'is_batched': True,
                        'created_by': 2},
                    'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[0]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Size::__getitem___1636_3': {
                        'shape': None,
                        'dtype': int,
                        'req_grad': False,
                        'is_batched': False,
                        'created_by': 2},
                    'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[0]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/torch::arange_1670': {
                        'shape': torch.Size([16]),
                        'dtype': torch.int64,
                        'req_grad': False,
                        'is_batched': False,
                        'created_by': 1}},
                'outputs': {
                    'T5ForConditionalGeneration/T5Stack[encoder]/Dropout[dropout]': {
                        'shape': torch.Size([1, 128, 1024]),
                        'dtype': torch.float32,
                        'req_grad': True,
                        'is_batched': True,
                        'used_by': [4]},
                    'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[0]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Size::__getitem___1636_4': {
                        'shape': None,
                        'dtype': int,
                        'req_grad': False,
                        'is_batched': False,
                        'used_by': [4]},
                    'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[0]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Tensor::transpose_1664': {
                        'shape': torch.Size([1, 32, 128, 128]),
                        'dtype': torch.float32,
                        'req_grad': True,
                        'is_batched': True,
                        'used_by': [4]},
                    'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[0]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Tensor::__neg___1688': {
                        'shape': torch.Size([16, 128]),
                        'dtype': torch.int64,
                        'req_grad': False,
                        'is_batched': False,
                        'used_by': [4]},
                    'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[1]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Linear[k]': {
                        'shape': torch.Size([1, 128, 4096]),
                        'dtype': torch.float32,
                        'req_grad': True,
                        'is_batched': True,
                        'used_by': [4]},
                    'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[1]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Linear[v]': {
                        'shape': torch.Size([1, 128, 4096]),
                        'dtype': torch.float32,
                        'req_grad': True,
                        'is_batched': True,
                        'used_by': [4]},
                    'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[2]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Linear[k]': {
                        'shape': torch.Size([1, 128, 4096]),
                        'dtype': torch.float32,
                        'req_grad': True,
                        'is_batched': True,
                        'used_by': [4]},
                    'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[2]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Linear[v]': {
                        'shape': torch.Size([1, 128, 4096]),
                        'dtype': torch.float32,
                        'req_grad': True,
                        'is_batched': True,
                        'used_by': [4]},
                    'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[3]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Linear[k]': {
                        'shape': torch.Size([1, 128, 4096]),
                        'dtype': torch.float32,
                        'req_grad': True,
                        'is_batched': True,
                        'used_by': [4]},
                    'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[3]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Linear[v]': {
                        'shape': torch.Size([1, 128, 4096]),
                        'dtype': torch.float32,
                        'req_grad': True,
                        'is_batched': True,
                        'used_by': [4]},
                    'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[4]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Linear[k]': {
                        'shape': torch.Size([1, 128, 4096]),
                        'dtype': torch.float32,
                        'req_grad': True,
                        'is_batched': True,
                        'used_by': [4]},
                    'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[4]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Linear[v]': {
                        'shape': torch.Size([1, 128, 4096]),
                        'dtype': torch.float32,
                        'req_grad': True,
                        'is_batched': True,
                        'used_by': [4]},
                    'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[5]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Linear[k]': {
                        'shape': torch.Size([1, 128, 4096]),
                        'dtype': torch.float32,
                        'req_grad': True,
                        'is_batched': True,
                        'used_by': [4]},
                    'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[5]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Linear[v]': {
                        'shape': torch.Size([1, 128, 4096]),
                        'dtype': torch.float32,
                        'req_grad': True,
                        'is_batched': True,
                        'used_by': [4]},
                    'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[6]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Linear[k]': {
                        'shape': torch.Size([1, 128, 4096]),
                        'dtype': torch.float32,
                        'req_grad': True,
                        'is_batched': True,
                        'used_by': [5]},
                    'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[6]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Linear[v]': {
                        'shape': torch.Size([1, 128, 4096]),
                        'dtype': torch.float32,
                        'req_grad': True,
                        'is_batched': True,
                        'used_by': [5]},
                    'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[7]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Linear[k]': {
                        'shape': torch.Size([1, 128, 4096]),
                        'dtype': torch.float32,
                        'req_grad': True,
                        'is_batched': True,
                        'used_by': [5]},
                    'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[7]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Linear[v]': {
                        'shape': torch.Size([1, 128, 4096]),
                        'dtype': torch.float32,
                        'req_grad': True,
                        'is_batched': True,
                        'used_by': [5]},
                    'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[8]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Linear[k]': {
                        'shape': torch.Size([1, 128, 4096]),
                        'dtype': torch.float32,
                        'req_grad': True,
                        'is_batched': True,
                        'used_by': [5]},
                    'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[8]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Linear[v]': {
                        'shape': torch.Size([1, 128, 4096]),
                        'dtype': torch.float32,
                        'req_grad': True,
                        'is_batched': True,
                        'used_by': [5]},
                    'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[9]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Linear[k]': {
                        'shape': torch.Size([1, 128, 4096]),
                        'dtype': torch.float32,
                        'req_grad': True,
                        'is_batched': True,
                        'used_by': [5]},
                    'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[9]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Linear[v]': {
                        'shape': torch.Size([1, 128, 4096]),
                        'dtype': torch.float32,
                        'req_grad': True,
                        'is_batched': True,
                        'used_by': [5]},
                    'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[10]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Linear[k]': {
                        'shape': torch.Size([1, 128, 4096]),
                        'dtype': torch.float32,
                        'req_grad': True,
                        'is_batched': True,
                        'used_by': [5]},
                    'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[10]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Linear[v]': {
                        'shape': torch.Size([1, 128, 4096]),
                        'dtype': torch.float32,
                        'req_grad': True,
                        'is_batched': True,
                        'used_by': [5]},
                    'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[11]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Linear[k]': {
                        'shape': torch.Size([1, 128, 4096]),
                        'dtype': torch.float32,
                        'req_grad': True,
                        'is_batched': True,
                        'used_by': [5]},
                    'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[11]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Linear[v]': {
                        'shape': torch.Size([1, 128, 4096]),
                        'dtype': torch.float32,
                        'req_grad': True,
                        'is_batched': True,
                        'used_by': [5]},
                    'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[12]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Linear[k]': {
                        'shape': torch.Size([1, 128, 4096]),
                        'dtype': torch.float32,
                        'req_grad': True,
                        'is_batched': True,
                        'used_by': [6]},
                    'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[12]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Linear[v]': {
                        'shape': torch.Size([1, 128, 4096]),
                        'dtype': torch.float32,
                        'req_grad': True,
                        'is_batched': True,
                        'used_by': [6]},
                    'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[13]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Linear[k]': {
                        'shape': torch.Size([1, 128, 4096]),
                        'dtype': torch.float32,
                        'req_grad': True,
                        'is_batched': True,
                        'used_by': [6]},
                    'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[13]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Linear[v]': {
                        'shape': torch.Size([1, 128, 4096]),
                        'dtype': torch.float32,
                        'req_grad': True,
                        'is_batched': True,
                        'used_by': [6]},
                    'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[14]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Linear[k]': {
                        'shape': torch.Size([1, 128, 4096]),
                        'dtype': torch.float32,
                        'req_grad': True,
                        'is_batched': True,
                        'used_by': [6]},
                    'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[14]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Linear[v]': {
                        'shape': torch.Size([1, 128, 4096]),
                        'dtype': torch.float32,
                        'req_grad': True,
                        'is_batched': True,
                        'used_by': [6]},
                    'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[15]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Linear[k]': {
                        'shape': torch.Size([1, 128, 4096]),
                        'dtype': torch.float32,
                        'req_grad': True,
                        'is_batched': True,
                        'used_by': [6]},
                    'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[15]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Linear[v]': {
                        'shape': torch.Size([1, 128, 4096]),
                        'dtype': torch.float32,
                        'req_grad': True,
                        'is_batched': True,
                        'used_by': [6]},
                    'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[16]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Linear[k]': {
                        'shape': torch.Size([1, 128, 4096]),
                        'dtype': torch.float32,
                        'req_grad': True,
                        'is_batched': True,
                        'used_by': [6]},
                    'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[16]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Linear[v]': {
                        'shape': torch.Size([1, 128, 4096]),
                        'dtype': torch.float32,
                        'req_grad': True,
                        'is_batched': True,
                        'used_by': [6]},
                    'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[17]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Linear[k]': {
                        'shape': torch.Size([1, 128, 4096]),
                        'dtype': torch.float32,
                        'req_grad': True,
                        'is_batched': True,
                        'used_by': [6]},
                    'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[18]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Linear[k]': {
                        'shape': torch.Size([1, 128, 4096]),
                        'dtype': torch.float32,
                        'req_grad': True,
                        'is_batched': True,
                        'used_by': [7]},
                    'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[18]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Linear[v]': {
                        'shape': torch.Size([1, 128, 4096]),
                        'dtype': torch.float32,
                        'req_grad': True,
                        'is_batched': True,
                        'used_by': [7]},
                    'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[19]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Linear[k]': {
                        'shape': torch.Size([1, 128, 4096]),
                        'dtype': torch.float32,
                        'req_grad': True,
                        'is_batched': True,
                        'used_by': [7]},
                    'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[19]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Linear[v]': {
                        'shape': torch.Size([1, 128, 4096]),
                        'dtype': torch.float32,
                        'req_grad': True,
                        'is_batched': True,
                        'used_by': [7]},
                    'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[20]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Linear[k]': {
                        'shape': torch.Size([1, 128, 4096]),
                        'dtype': torch.float32,
                        'req_grad': True,
                        'is_batched': True,
                        'used_by': [7]},
                    'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[20]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Linear[v]': {
                        'shape': torch.Size([1, 128, 4096]),
                        'dtype': torch.float32,
                        'req_grad': True,
                        'is_batched': True,
                        'used_by': [7]},
                    'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[21]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Linear[k]': {
                        'shape': torch.Size([1, 128, 4096]),
                        'dtype': torch.float32,
                        'req_grad': True,
                        'is_batched': True,
                        'used_by': [7]},
                    'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[21]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Linear[v]': {
                        'shape': torch.Size([1, 128, 4096]),
                        'dtype': torch.float32,
                        'req_grad': True,
                        'is_batched': True,
                        'used_by': [7]},
                    'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[22]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Linear[k]': {
                        'shape': torch.Size([1, 128, 4096]),
                        'dtype': torch.float32,
                        'req_grad': True,
                        'is_batched': True,
                        'used_by': [7]},
                    'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[22]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Linear[v]': {
                        'shape': torch.Size([1, 128, 4096]),
                        'dtype': torch.float32,
                        'req_grad': True,
                        'is_batched': True,
                        'used_by': [7]},
                    'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[23]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Linear[k]': {
                        'shape': torch.Size([1, 128, 4096]),
                        'dtype': torch.float32,
                        'req_grad': True,
                        'is_batched': True,
                        'used_by': [7]},
                    'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[23]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Linear[v]': {
                        'shape': torch.Size([1, 128, 4096]),
                        'dtype': torch.float32,
                        'req_grad': True,
                        'is_batched': True,
                        'used_by': [7]}},
                'devices': ['cpu' if DEBUG else 'cuda:3']},
            4: {
                'stage_cls': Partition4,
                'inputs': {
                    'inverted_encoder_attention_mask': {
                        'shape': torch.Size([1, 1, 1, 128]),
                        'dtype': torch.float32,
                        'req_grad': False,
                        'is_batched': True,
                        'created_by': -1},
                    'T5ForConditionalGeneration/T5Stack[encoder]/Dropout[dropout]': {
                        'shape': torch.Size([1, 128, 1024]),
                        'dtype': torch.float32,
                        'req_grad': True,
                        'is_batched': True,
                        'created_by': 3},
                    'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[0]/tuple::__getitem___1630': {
                        'shape': torch.Size([1, 16, 1024]),
                        'dtype': torch.float32,
                        'req_grad': True,
                        'is_batched': True,
                        'created_by': 0},
                    'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[0]/tuple::__getitem___1632': {
                        'shape': torch.Size([1, 32, 16, 16]),
                        'dtype': torch.float32,
                        'req_grad': True,
                        'is_batched': True,
                        'created_by': 2},
                    'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[0]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Size::__getitem___1636_4': {
                        'shape': None,
                        'dtype': int,
                        'req_grad': False,
                        'is_batched': False,
                        'created_by': 3},
                    'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[0]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Tensor::transpose_1648': {
                        'shape': torch.Size([1, 32, 16, 128]),
                        'dtype': torch.float32,
                        'req_grad': True,
                        'is_batched': True,
                        'created_by': 2},
                    'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[0]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Tensor::transpose_1664': {
                        'shape': torch.Size([1, 32, 128, 128]),
                        'dtype': torch.float32,
                        'req_grad': True,
                        'is_batched': True,
                        'created_by': 3},
                    'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[0]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Tensor::__neg___1688': {
                        'shape': torch.Size([16, 128]),
                        'dtype': torch.int64,
                        'req_grad': False,
                        'is_batched': False,
                        'created_by': 3},
                    'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[1]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Linear[k]': {
                        'shape': torch.Size([1, 128, 4096]),
                        'dtype': torch.float32,
                        'req_grad': True,
                        'is_batched': True,
                        'created_by': 3},
                    'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[1]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Linear[v]': {
                        'shape': torch.Size([1, 128, 4096]),
                        'dtype': torch.float32,
                        'req_grad': True,
                        'is_batched': True,
                        'created_by': 3},
                    'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[2]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Linear[k]': {
                        'shape': torch.Size([1, 128, 4096]),
                        'dtype': torch.float32,
                        'req_grad': True,
                        'is_batched': True,
                        'created_by': 3},
                    'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[2]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Linear[v]': {
                        'shape': torch.Size([1, 128, 4096]),
                        'dtype': torch.float32,
                        'req_grad': True,
                        'is_batched': True,
                        'created_by': 3},
                    'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[3]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Linear[k]': {
                        'shape': torch.Size([1, 128, 4096]),
                        'dtype': torch.float32,
                        'req_grad': True,
                        'is_batched': True,
                        'created_by': 3},
                    'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[3]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Linear[v]': {
                        'shape': torch.Size([1, 128, 4096]),
                        'dtype': torch.float32,
                        'req_grad': True,
                        'is_batched': True,
                        'created_by': 3},
                    'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[4]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Linear[k]': {
                        'shape': torch.Size([1, 128, 4096]),
                        'dtype': torch.float32,
                        'req_grad': True,
                        'is_batched': True,
                        'created_by': 3},
                    'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[4]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Linear[v]': {
                        'shape': torch.Size([1, 128, 4096]),
                        'dtype': torch.float32,
                        'req_grad': True,
                        'is_batched': True,
                        'created_by': 3},
                    'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[5]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Linear[k]': {
                        'shape': torch.Size([1, 128, 4096]),
                        'dtype': torch.float32,
                        'req_grad': True,
                        'is_batched': True,
                        'created_by': 3},
                    'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[5]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Linear[v]': {
                        'shape': torch.Size([1, 128, 4096]),
                        'dtype': torch.float32,
                        'req_grad': True,
                        'is_batched': True,
                        'created_by': 3}},
                'outputs': {
                    'T5ForConditionalGeneration/T5Stack[decoder]/tuple::__getitem___1764_5': {
                        'shape': torch.Size([1, 32, 16, 16]),
                        'dtype': torch.float32,
                        'req_grad': True,
                        'is_batched': True,
                        'used_by': [5]},
                    'T5ForConditionalGeneration/T5Stack[decoder]/tuple::__getitem___1766_5': {
                        'shape': torch.Size([1, 32, 16, 128]),
                        'dtype': torch.float32,
                        'req_grad': True,
                        'is_batched': True,
                        'used_by': [5]},
                    'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[5]/T5LayerFF[2]/Tensor::__add___2316': {
                        'shape': torch.Size([1, 16, 1024]),
                        'dtype': torch.float32,
                        'req_grad': True,
                        'is_batched': True,
                        'used_by': [5]},
                    'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[6]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Size::__getitem___2320': {
                        'shape': None,
                        'dtype': int,
                        'req_grad': False,
                        'is_batched': False,
                        'used_by': [5]},
                    'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[6]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Linear[q]': {
                        'shape': torch.Size([1, 16, 4096]),
                        'dtype': torch.float32,
                        'req_grad': True,
                        'is_batched': True,
                        'used_by': [5]},
                    'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[6]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Tensor::transpose_2336': {
                        'shape': torch.Size([1, 32, 16, 128]),
                        'dtype': torch.float32,
                        'req_grad': True,
                        'is_batched': True,
                        'used_by': [5]},
                    'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[6]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Linear[v]': {
                        'shape': torch.Size([1, 16, 4096]),
                        'dtype': torch.float32,
                        'req_grad': True,
                        'is_batched': True,
                        'used_by': [5]},
                    'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[17]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Linear[v]': {
                        'shape': torch.Size([1, 128, 4096]),
                        'dtype': torch.float32,
                        'req_grad': True,
                        'is_batched': True,
                        'used_by': [6]}},
                'devices': ['cpu' if DEBUG else 'cuda:4']},
            5: {
                'stage_cls': Partition5,
                'inputs': {
                    'T5ForConditionalGeneration/T5Stack[decoder]/tuple::__getitem___1764_5': {
                        'shape': torch.Size([1, 32, 16, 16]),
                        'dtype': torch.float32,
                        'req_grad': True,
                        'is_batched': True,
                        'created_by': 4},
                    'T5ForConditionalGeneration/T5Stack[decoder]/tuple::__getitem___1766_5': {
                        'shape': torch.Size([1, 32, 16, 128]),
                        'dtype': torch.float32,
                        'req_grad': True,
                        'is_batched': True,
                        'created_by': 4},
                    'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[5]/T5LayerFF[2]/Tensor::__add___2316': {
                        'shape': torch.Size([1, 16, 1024]),
                        'dtype': torch.float32,
                        'req_grad': True,
                        'is_batched': True,
                        'created_by': 4},
                    'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[6]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Size::__getitem___2320': {
                        'shape': None,
                        'dtype': int,
                        'req_grad': False,
                        'is_batched': False,
                        'created_by': 4},
                    'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[6]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Linear[q]': {
                        'shape': torch.Size([1, 16, 4096]),
                        'dtype': torch.float32,
                        'req_grad': True,
                        'is_batched': True,
                        'created_by': 4},
                    'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[6]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Tensor::transpose_2336': {
                        'shape': torch.Size([1, 32, 16, 128]),
                        'dtype': torch.float32,
                        'req_grad': True,
                        'is_batched': True,
                        'created_by': 4},
                    'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[6]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Linear[v]': {
                        'shape': torch.Size([1, 16, 4096]),
                        'dtype': torch.float32,
                        'req_grad': True,
                        'is_batched': True,
                        'created_by': 4},
                    'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[6]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Linear[k]': {
                        'shape': torch.Size([1, 128, 4096]),
                        'dtype': torch.float32,
                        'req_grad': True,
                        'is_batched': True,
                        'created_by': 3},
                    'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[6]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Linear[v]': {
                        'shape': torch.Size([1, 128, 4096]),
                        'dtype': torch.float32,
                        'req_grad': True,
                        'is_batched': True,
                        'created_by': 3},
                    'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[7]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Linear[k]': {
                        'shape': torch.Size([1, 128, 4096]),
                        'dtype': torch.float32,
                        'req_grad': True,
                        'is_batched': True,
                        'created_by': 3},
                    'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[7]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Linear[v]': {
                        'shape': torch.Size([1, 128, 4096]),
                        'dtype': torch.float32,
                        'req_grad': True,
                        'is_batched': True,
                        'created_by': 3},
                    'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[8]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Linear[k]': {
                        'shape': torch.Size([1, 128, 4096]),
                        'dtype': torch.float32,
                        'req_grad': True,
                        'is_batched': True,
                        'created_by': 3},
                    'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[8]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Linear[v]': {
                        'shape': torch.Size([1, 128, 4096]),
                        'dtype': torch.float32,
                        'req_grad': True,
                        'is_batched': True,
                        'created_by': 3},
                    'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[9]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Linear[k]': {
                        'shape': torch.Size([1, 128, 4096]),
                        'dtype': torch.float32,
                        'req_grad': True,
                        'is_batched': True,
                        'created_by': 3},
                    'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[9]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Linear[v]': {
                        'shape': torch.Size([1, 128, 4096]),
                        'dtype': torch.float32,
                        'req_grad': True,
                        'is_batched': True,
                        'created_by': 3},
                    'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[10]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Linear[k]': {
                        'shape': torch.Size([1, 128, 4096]),
                        'dtype': torch.float32,
                        'req_grad': True,
                        'is_batched': True,
                        'created_by': 3},
                    'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[10]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Linear[v]': {
                        'shape': torch.Size([1, 128, 4096]),
                        'dtype': torch.float32,
                        'req_grad': True,
                        'is_batched': True,
                        'created_by': 3},
                    'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[11]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Linear[k]': {
                        'shape': torch.Size([1, 128, 4096]),
                        'dtype': torch.float32,
                        'req_grad': True,
                        'is_batched': True,
                        'created_by': 3},
                    'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[11]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Linear[v]': {
                        'shape': torch.Size([1, 128, 4096]),
                        'dtype': torch.float32,
                        'req_grad': True,
                        'is_batched': True,
                        'created_by': 3}},
                'outputs': {
                    'T5ForConditionalGeneration/T5Stack[decoder]/tuple::__getitem___1764_6': {
                        'shape': torch.Size([1, 32, 16, 16]),
                        'dtype': torch.float32,
                        'req_grad': True,
                        'is_batched': True,
                        'used_by': [6]},
                    'T5ForConditionalGeneration/T5Stack[decoder]/tuple::__getitem___1766_6': {
                        'shape': torch.Size([1, 32, 16, 128]),
                        'dtype': torch.float32,
                        'req_grad': True,
                        'is_batched': True,
                        'used_by': [6]},
                    'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[11]/T5LayerFF[2]/Tensor::__add___2976': {
                        'shape': torch.Size([1, 16, 1024]),
                        'dtype': torch.float32,
                        'req_grad': True,
                        'is_batched': True,
                        'used_by': [6]},
                    'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[12]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Size::__getitem___2980': {
                        'shape': None,
                        'dtype': int,
                        'req_grad': False,
                        'is_batched': False,
                        'used_by': [6]},
                    'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[12]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Linear[v]': {
                        'shape': torch.Size([1, 16, 4096]),
                        'dtype': torch.float32,
                        'req_grad': True,
                        'is_batched': True,
                        'used_by': [6]},
                    'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[12]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Dropout[dropout]': {
                        'shape': torch.Size([1, 32, 16, 16]),
                        'dtype': torch.float32,
                        'req_grad': True,
                        'is_batched': True,
                        'used_by': [6]}},
                'devices': ['cpu' if DEBUG else 'cuda:5']},
            6: {
                'stage_cls': Partition6,
                'inputs': {
                    'T5ForConditionalGeneration/T5Stack[decoder]/tuple::__getitem___1764_6': {
                        'shape': torch.Size([1, 32, 16, 16]),
                        'dtype': torch.float32,
                        'req_grad': True,
                        'is_batched': True,
                        'created_by': 5},
                    'T5ForConditionalGeneration/T5Stack[decoder]/tuple::__getitem___1766_6': {
                        'shape': torch.Size([1, 32, 16, 128]),
                        'dtype': torch.float32,
                        'req_grad': True,
                        'is_batched': True,
                        'created_by': 5},
                    'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[11]/T5LayerFF[2]/Tensor::__add___2976': {
                        'shape': torch.Size([1, 16, 1024]),
                        'dtype': torch.float32,
                        'req_grad': True,
                        'is_batched': True,
                        'created_by': 5},
                    'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[12]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Size::__getitem___2980': {
                        'shape': None,
                        'dtype': int,
                        'req_grad': False,
                        'is_batched': False,
                        'created_by': 5},
                    'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[12]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Linear[v]': {
                        'shape': torch.Size([1, 16, 4096]),
                        'dtype': torch.float32,
                        'req_grad': True,
                        'is_batched': True,
                        'created_by': 5},
                    'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[12]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Dropout[dropout]': {
                        'shape': torch.Size([1, 32, 16, 16]),
                        'dtype': torch.float32,
                        'req_grad': True,
                        'is_batched': True,
                        'created_by': 5},
                    'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[12]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Linear[k]': {
                        'shape': torch.Size([1, 128, 4096]),
                        'dtype': torch.float32,
                        'req_grad': True,
                        'is_batched': True,
                        'created_by': 3},
                    'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[12]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Linear[v]': {
                        'shape': torch.Size([1, 128, 4096]),
                        'dtype': torch.float32,
                        'req_grad': True,
                        'is_batched': True,
                        'created_by': 3},
                    'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[13]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Linear[k]': {
                        'shape': torch.Size([1, 128, 4096]),
                        'dtype': torch.float32,
                        'req_grad': True,
                        'is_batched': True,
                        'created_by': 3},
                    'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[13]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Linear[v]': {
                        'shape': torch.Size([1, 128, 4096]),
                        'dtype': torch.float32,
                        'req_grad': True,
                        'is_batched': True,
                        'created_by': 3},
                    'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[14]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Linear[k]': {
                        'shape': torch.Size([1, 128, 4096]),
                        'dtype': torch.float32,
                        'req_grad': True,
                        'is_batched': True,
                        'created_by': 3},
                    'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[14]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Linear[v]': {
                        'shape': torch.Size([1, 128, 4096]),
                        'dtype': torch.float32,
                        'req_grad': True,
                        'is_batched': True,
                        'created_by': 3},
                    'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[15]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Linear[k]': {
                        'shape': torch.Size([1, 128, 4096]),
                        'dtype': torch.float32,
                        'req_grad': True,
                        'is_batched': True,
                        'created_by': 3},
                    'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[15]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Linear[v]': {
                        'shape': torch.Size([1, 128, 4096]),
                        'dtype': torch.float32,
                        'req_grad': True,
                        'is_batched': True,
                        'created_by': 3},
                    'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[16]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Linear[k]': {
                        'shape': torch.Size([1, 128, 4096]),
                        'dtype': torch.float32,
                        'req_grad': True,
                        'is_batched': True,
                        'created_by': 3},
                    'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[16]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Linear[v]': {
                        'shape': torch.Size([1, 128, 4096]),
                        'dtype': torch.float32,
                        'req_grad': True,
                        'is_batched': True,
                        'created_by': 3},
                    'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[17]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Linear[k]': {
                        'shape': torch.Size([1, 128, 4096]),
                        'dtype': torch.float32,
                        'req_grad': True,
                        'is_batched': True,
                        'created_by': 3},
                    'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[17]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Linear[v]': {
                        'shape': torch.Size([1, 128, 4096]),
                        'dtype': torch.float32,
                        'req_grad': True,
                        'is_batched': True,
                        'created_by': 4}},
                'outputs': {
                    'T5ForConditionalGeneration/T5Stack[decoder]/tuple::__getitem___1764_7': {
                        'shape': torch.Size([1, 32, 16, 16]),
                        'dtype': torch.float32,
                        'req_grad': True,
                        'is_batched': True,
                        'used_by': [7]},
                    'T5ForConditionalGeneration/T5Stack[decoder]/tuple::__getitem___1766_7': {
                        'shape': torch.Size([1, 32, 16, 128]),
                        'dtype': torch.float32,
                        'req_grad': True,
                        'is_batched': True,
                        'used_by': [7]},
                    'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[17]/T5LayerFF[2]/Tensor::__add___3636': {
                        'shape': torch.Size([1, 16, 1024]),
                        'dtype': torch.float32,
                        'req_grad': True,
                        'is_batched': True,
                        'used_by': [7]},
                    'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[18]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Size::__getitem___3640': {
                        'shape': None,
                        'dtype': int,
                        'req_grad': False,
                        'is_batched': False,
                        'used_by': [7]},
                    'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[18]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Tensor::view_3661': {
                        'shape': torch.Size([1, 16, 32, 128]),
                        'dtype': torch.float32,
                        'req_grad': True,
                        'is_batched': True,
                        'used_by': [7]},
                    'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[18]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Dropout[dropout]': {
                        'shape': torch.Size([1, 32, 16, 16]),
                        'dtype': torch.float32,
                        'req_grad': True,
                        'is_batched': True,
                        'used_by': [7]}},
                'devices': ['cpu' if DEBUG else 'cuda:6']},
            7: {
                'stage_cls': Partition7,
                'inputs': {
                    'lm_labels': {
                        'shape': torch.Size([1, 16]),
                        'dtype': torch.int64,
                        'req_grad': False,
                        'is_batched': True,
                        'created_by': -1},
                    'T5ForConditionalGeneration/T5Stack[decoder]/tuple::__getitem___1764_7': {
                        'shape': torch.Size([1, 32, 16, 16]),
                        'dtype': torch.float32,
                        'req_grad': True,
                        'is_batched': True,
                        'created_by': 6},
                    'T5ForConditionalGeneration/T5Stack[decoder]/tuple::__getitem___1766_7': {
                        'shape': torch.Size([1, 32, 16, 128]),
                        'dtype': torch.float32,
                        'req_grad': True,
                        'is_batched': True,
                        'created_by': 6},
                    'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[17]/T5LayerFF[2]/Tensor::__add___3636': {
                        'shape': torch.Size([1, 16, 1024]),
                        'dtype': torch.float32,
                        'req_grad': True,
                        'is_batched': True,
                        'created_by': 6},
                    'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[18]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Size::__getitem___3640': {
                        'shape': None,
                        'dtype': int,
                        'req_grad': False,
                        'is_batched': False,
                        'created_by': 6},
                    'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[18]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Tensor::view_3661': {
                        'shape': torch.Size([1, 16, 32, 128]),
                        'dtype': torch.float32,
                        'req_grad': True,
                        'is_batched': True,
                        'created_by': 6},
                    'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[18]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Dropout[dropout]': {
                        'shape': torch.Size([1, 32, 16, 16]),
                        'dtype': torch.float32,
                        'req_grad': True,
                        'is_batched': True,
                        'created_by': 6},
                    'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[18]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Linear[k]': {
                        'shape': torch.Size([1, 128, 4096]),
                        'dtype': torch.float32,
                        'req_grad': True,
                        'is_batched': True,
                        'created_by': 3},
                    'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[18]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Linear[v]': {
                        'shape': torch.Size([1, 128, 4096]),
                        'dtype': torch.float32,
                        'req_grad': True,
                        'is_batched': True,
                        'created_by': 3},
                    'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[19]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Linear[k]': {
                        'shape': torch.Size([1, 128, 4096]),
                        'dtype': torch.float32,
                        'req_grad': True,
                        'is_batched': True,
                        'created_by': 3},
                    'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[19]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Linear[v]': {
                        'shape': torch.Size([1, 128, 4096]),
                        'dtype': torch.float32,
                        'req_grad': True,
                        'is_batched': True,
                        'created_by': 3},
                    'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[20]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Linear[k]': {
                        'shape': torch.Size([1, 128, 4096]),
                        'dtype': torch.float32,
                        'req_grad': True,
                        'is_batched': True,
                        'created_by': 3},
                    'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[20]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Linear[v]': {
                        'shape': torch.Size([1, 128, 4096]),
                        'dtype': torch.float32,
                        'req_grad': True,
                        'is_batched': True,
                        'created_by': 3},
                    'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[21]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Linear[k]': {
                        'shape': torch.Size([1, 128, 4096]),
                        'dtype': torch.float32,
                        'req_grad': True,
                        'is_batched': True,
                        'created_by': 3},
                    'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[21]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Linear[v]': {
                        'shape': torch.Size([1, 128, 4096]),
                        'dtype': torch.float32,
                        'req_grad': True,
                        'is_batched': True,
                        'created_by': 3},
                    'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[22]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Linear[k]': {
                        'shape': torch.Size([1, 128, 4096]),
                        'dtype': torch.float32,
                        'req_grad': True,
                        'is_batched': True,
                        'created_by': 3},
                    'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[22]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Linear[v]': {
                        'shape': torch.Size([1, 128, 4096]),
                        'dtype': torch.float32,
                        'req_grad': True,
                        'is_batched': True,
                        'created_by': 3},
                    'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[23]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Linear[k]': {
                        'shape': torch.Size([1, 128, 4096]),
                        'dtype': torch.float32,
                        'req_grad': True,
                        'is_batched': True,
                        'created_by': 3},
                    'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[23]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Linear[v]': {
                        'shape': torch.Size([1, 128, 4096]),
                        'dtype': torch.float32,
                        'req_grad': True,
                        'is_batched': True,
                        'created_by': 3}},
                'outputs': {
                    'T5ForConditionalGeneration/CrossEntropyLoss[lm_loss]': {
                        'shape': torch.Size([1]),
                        'dtype': torch.float32,
                        'req_grad': True,
                        'is_batched': False,
                        'used_by': [-1]}},
                'devices': ['cpu' if DEBUG else 'cuda:7']}}}
    
    
    # switching batch size
    batch_dim = config['batch_dim']
    for d in chain(config['model_inputs'].values(),config['model_outputs'].values()):
        if d['is_batched']:
            shape = d['shape']
            d['shape'] = torch.Size(shape[:batch_dim] + (batch_size,) + shape[batch_dim+1:])
    
    for s in config['stages'].values():
        for d in chain(s['inputs'].values(),s['outputs'].values()):
            if d['is_batched']:
                shape = d['shape']
                d['shape'] = torch.Size(shape[:batch_dim] + (batch_size,) + shape[batch_dim+1:])
    
    return config

class Partition0(nn.Module):
    LAYER_SCOPES=[
            'T5ForConditionalGeneration/T5Stack[encoder]/StatelessEmbedding[embed_tokens]',
            'T5ForConditionalGeneration/T5Stack[encoder]/Dropout[dropout]',
            'T5ForConditionalGeneration/T5Stack[encoder]/T5Block[0]/T5LayerSelfAttention[0]/T5LayerNorm[layer_norm]',
            'T5ForConditionalGeneration/T5Stack[encoder]/T5Block[0]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Linear[q]',
            'T5ForConditionalGeneration/T5Stack[encoder]/T5Block[0]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Linear[k]',
            'T5ForConditionalGeneration/T5Stack[encoder]/T5Block[0]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Linear[v]',
            'T5ForConditionalGeneration/T5Stack[encoder]/T5Block[0]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Embedding[relative_attention_bias]',
            'T5ForConditionalGeneration/T5Stack[encoder]/T5Block[0]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Dropout[dropout]',
            'T5ForConditionalGeneration/T5Stack[encoder]/T5Block[0]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Linear[o]',
            'T5ForConditionalGeneration/T5Stack[encoder]/T5Block[0]/T5LayerSelfAttention[0]/Dropout[dropout]',
            'T5ForConditionalGeneration/T5Stack[encoder]/T5Block[0]/T5LayerFF[1]/T5LayerNorm[layer_norm]',
            'T5ForConditionalGeneration/T5Stack[encoder]/T5Block[0]/T5LayerFF[1]/T5DenseReluDense[DenseReluDense]/Linear[wi]',
            'T5ForConditionalGeneration/T5Stack[encoder]/T5Block[0]/T5LayerFF[1]/T5DenseReluDense[DenseReluDense]/Dropout[dropout]',
            'T5ForConditionalGeneration/T5Stack[encoder]/T5Block[0]/T5LayerFF[1]/T5DenseReluDense[DenseReluDense]/Linear[wo]',
            'T5ForConditionalGeneration/T5Stack[encoder]/T5Block[0]/T5LayerFF[1]/Dropout[dropout]',
            'T5ForConditionalGeneration/T5Stack[encoder]/T5Block[1]/T5LayerSelfAttention[0]/T5LayerNorm[layer_norm]',
            'T5ForConditionalGeneration/T5Stack[encoder]/T5Block[1]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Linear[q]',
            'T5ForConditionalGeneration/T5Stack[encoder]/T5Block[1]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Linear[k]',
            'T5ForConditionalGeneration/T5Stack[encoder]/T5Block[1]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Linear[v]',
            'T5ForConditionalGeneration/T5Stack[encoder]/T5Block[1]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Dropout[dropout]',
            'T5ForConditionalGeneration/T5Stack[encoder]/T5Block[1]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Linear[o]',
            'T5ForConditionalGeneration/T5Stack[encoder]/T5Block[1]/T5LayerSelfAttention[0]/Dropout[dropout]',
            'T5ForConditionalGeneration/T5Stack[encoder]/T5Block[1]/T5LayerFF[1]/T5LayerNorm[layer_norm]',
            'T5ForConditionalGeneration/T5Stack[encoder]/T5Block[1]/T5LayerFF[1]/T5DenseReluDense[DenseReluDense]/Linear[wi]',
            'T5ForConditionalGeneration/T5Stack[encoder]/T5Block[1]/T5LayerFF[1]/T5DenseReluDense[DenseReluDense]/Dropout[dropout]',
            'T5ForConditionalGeneration/T5Stack[encoder]/T5Block[1]/T5LayerFF[1]/T5DenseReluDense[DenseReluDense]/Linear[wo]',
            'T5ForConditionalGeneration/T5Stack[encoder]/T5Block[1]/T5LayerFF[1]/Dropout[dropout]',
            'T5ForConditionalGeneration/T5Stack[encoder]/T5Block[2]/T5LayerSelfAttention[0]/T5LayerNorm[layer_norm]',
            'T5ForConditionalGeneration/T5Stack[encoder]/T5Block[2]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Linear[q]',
            'T5ForConditionalGeneration/T5Stack[encoder]/T5Block[2]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Linear[k]',
            'T5ForConditionalGeneration/T5Stack[encoder]/T5Block[2]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Linear[v]',
            'T5ForConditionalGeneration/T5Stack[encoder]/T5Block[2]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Dropout[dropout]',
            'T5ForConditionalGeneration/T5Stack[encoder]/T5Block[2]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Linear[o]',
            'T5ForConditionalGeneration/T5Stack[encoder]/T5Block[2]/T5LayerSelfAttention[0]/Dropout[dropout]',
            'T5ForConditionalGeneration/T5Stack[encoder]/T5Block[2]/T5LayerFF[1]/T5LayerNorm[layer_norm]',
            'T5ForConditionalGeneration/T5Stack[encoder]/T5Block[2]/T5LayerFF[1]/T5DenseReluDense[DenseReluDense]/Linear[wi]',
            'T5ForConditionalGeneration/T5Stack[encoder]/T5Block[2]/T5LayerFF[1]/T5DenseReluDense[DenseReluDense]/Dropout[dropout]',
            'T5ForConditionalGeneration/T5Stack[encoder]/T5Block[2]/T5LayerFF[1]/T5DenseReluDense[DenseReluDense]/Linear[wo]',
            'T5ForConditionalGeneration/T5Stack[encoder]/T5Block[2]/T5LayerFF[1]/Dropout[dropout]',
            'T5ForConditionalGeneration/T5Stack[encoder]/T5Block[3]/T5LayerSelfAttention[0]/T5LayerNorm[layer_norm]',
            'T5ForConditionalGeneration/T5Stack[encoder]/T5Block[3]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Linear[q]',
            'T5ForConditionalGeneration/T5Stack[encoder]/T5Block[3]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Linear[k]',
            'T5ForConditionalGeneration/T5Stack[encoder]/T5Block[3]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Linear[v]',
            'T5ForConditionalGeneration/T5Stack[encoder]/T5Block[3]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Dropout[dropout]',
            'T5ForConditionalGeneration/T5Stack[encoder]/T5Block[3]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Linear[o]',
            'T5ForConditionalGeneration/T5Stack[encoder]/T5Block[3]/T5LayerSelfAttention[0]/Dropout[dropout]',
            'T5ForConditionalGeneration/T5Stack[encoder]/T5Block[3]/T5LayerFF[1]/T5LayerNorm[layer_norm]',
            'T5ForConditionalGeneration/T5Stack[encoder]/T5Block[3]/T5LayerFF[1]/T5DenseReluDense[DenseReluDense]/Linear[wi]',
            'T5ForConditionalGeneration/T5Stack[encoder]/T5Block[3]/T5LayerFF[1]/T5DenseReluDense[DenseReluDense]/Dropout[dropout]',
            'T5ForConditionalGeneration/T5Stack[encoder]/T5Block[3]/T5LayerFF[1]/T5DenseReluDense[DenseReluDense]/Linear[wo]',
            'T5ForConditionalGeneration/T5Stack[encoder]/T5Block[3]/T5LayerFF[1]/Dropout[dropout]',
            'T5ForConditionalGeneration/T5Stack[encoder]/T5Block[4]/T5LayerSelfAttention[0]/T5LayerNorm[layer_norm]',
            'T5ForConditionalGeneration/T5Stack[encoder]/T5Block[4]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Linear[q]',
            'T5ForConditionalGeneration/T5Stack[encoder]/T5Block[4]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Linear[k]',
            'T5ForConditionalGeneration/T5Stack[encoder]/T5Block[4]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Linear[v]',
            'T5ForConditionalGeneration/T5Stack[encoder]/T5Block[4]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Dropout[dropout]',
            'T5ForConditionalGeneration/T5Stack[encoder]/T5Block[4]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Linear[o]',
            'T5ForConditionalGeneration/T5Stack[encoder]/T5Block[4]/T5LayerSelfAttention[0]/Dropout[dropout]',
            'T5ForConditionalGeneration/T5Stack[encoder]/T5Block[4]/T5LayerFF[1]/T5LayerNorm[layer_norm]',
            'T5ForConditionalGeneration/T5Stack[encoder]/T5Block[4]/T5LayerFF[1]/T5DenseReluDense[DenseReluDense]/Linear[wi]',
            'T5ForConditionalGeneration/T5Stack[encoder]/T5Block[4]/T5LayerFF[1]/T5DenseReluDense[DenseReluDense]/Dropout[dropout]',
            'T5ForConditionalGeneration/T5Stack[encoder]/T5Block[4]/T5LayerFF[1]/T5DenseReluDense[DenseReluDense]/Linear[wo]',
            'T5ForConditionalGeneration/T5Stack[encoder]/T5Block[4]/T5LayerFF[1]/Dropout[dropout]',
            'T5ForConditionalGeneration/T5Stack[encoder]/T5Block[5]/T5LayerSelfAttention[0]/T5LayerNorm[layer_norm]',
            'T5ForConditionalGeneration/T5Stack[encoder]/T5Block[5]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Linear[q]',
            'T5ForConditionalGeneration/T5Stack[encoder]/T5Block[5]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Linear[k]',
            'T5ForConditionalGeneration/T5Stack[encoder]/T5Block[5]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Linear[v]',
            'T5ForConditionalGeneration/T5Stack[encoder]/T5Block[5]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Dropout[dropout]',
            'T5ForConditionalGeneration/T5Stack[encoder]/T5Block[5]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Linear[o]',
            'T5ForConditionalGeneration/T5Stack[encoder]/T5Block[5]/T5LayerSelfAttention[0]/Dropout[dropout]',
            'T5ForConditionalGeneration/T5Stack[encoder]/T5Block[5]/T5LayerFF[1]/T5LayerNorm[layer_norm]',
            'T5ForConditionalGeneration/T5Stack[encoder]/T5Block[5]/T5LayerFF[1]/T5DenseReluDense[DenseReluDense]/Linear[wi]',
            'T5ForConditionalGeneration/T5Stack[encoder]/T5Block[5]/T5LayerFF[1]/T5DenseReluDense[DenseReluDense]/Dropout[dropout]',
            'T5ForConditionalGeneration/T5Stack[encoder]/T5Block[5]/T5LayerFF[1]/T5DenseReluDense[DenseReluDense]/Linear[wo]',
            'T5ForConditionalGeneration/T5Stack[encoder]/T5Block[5]/T5LayerFF[1]/Dropout[dropout]',
            'T5ForConditionalGeneration/T5Stack[encoder]/T5Block[6]/T5LayerSelfAttention[0]/T5LayerNorm[layer_norm]',
            'T5ForConditionalGeneration/T5Stack[encoder]/T5Block[6]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Linear[q]',
            'T5ForConditionalGeneration/T5Stack[encoder]/T5Block[6]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Linear[k]',
            'T5ForConditionalGeneration/T5Stack[encoder]/T5Block[6]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Linear[v]',
            'T5ForConditionalGeneration/T5Stack[encoder]/T5Block[6]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Dropout[dropout]',
            'T5ForConditionalGeneration/T5Stack[decoder]/StatelessEmbedding[embed_tokens]',
            'T5ForConditionalGeneration/T5Stack[decoder]/Dropout[dropout]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[0]/T5LayerSelfAttention[0]/T5LayerNorm[layer_norm]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[0]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Linear[q]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[0]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Linear[k]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[0]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Linear[v]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[0]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Embedding[relative_attention_bias]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[0]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Dropout[dropout]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[0]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Linear[o]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[0]/T5LayerSelfAttention[0]/Dropout[dropout]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[0]/T5LayerCrossAttention[1]/T5LayerNorm[layer_norm]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[0]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Linear[q]',
        ]
    TENSORS=[
            'T5ForConditionalGeneration/Parameter[shared_embed_weight]',
        ]
    def __init__(self, layers, tensors, device='cuda:0'):
        super().__init__()

        #initialize partition layers
        for idx,layer_scope in enumerate(self.LAYER_SCOPES):
            self.add_module(f'l_{idx}',layers[layer_scope])

        #initialize partition tensors
        b=p=0
        for tensor_scope in self.TENSORS:
            tensor=tensors[tensor_scope]
            if isinstance(tensor,nn.Parameter):
                self.register_parameter(f'p_{p}',tensor)
                p+=1
            else:
                self.register_buffer(f'b_{b}',tensor)
                b+=1

        self.device = torch.device(device)
        self.input_structure = [1, 1, 1, 1]
        self.lookup = { 'l_0': 'encoder.embed_tokens',
                        'l_1': 'encoder.dropout',
                        'l_2': 'encoder.0.0.layer_norm',
                        'l_3': 'encoder.0.0.SelfAttention.q',
                        'l_4': 'encoder.0.0.SelfAttention.k',
                        'l_5': 'encoder.0.0.SelfAttention.v',
                        'l_6': 'encoder.0.0.SelfAttention.relative_attention_bias',
                        'l_7': 'encoder.0.0.SelfAttention.dropout',
                        'l_8': 'encoder.0.0.SelfAttention.o',
                        'l_9': 'encoder.0.0.dropout',
                        'l_10': 'encoder.0.1.layer_norm',
                        'l_11': 'encoder.0.1.DenseReluDense.wi',
                        'l_12': 'encoder.0.1.DenseReluDense.dropout',
                        'l_13': 'encoder.0.1.DenseReluDense.wo',
                        'l_14': 'encoder.0.1.dropout',
                        'l_15': 'encoder.1.0.layer_norm',
                        'l_16': 'encoder.1.0.SelfAttention.q',
                        'l_17': 'encoder.1.0.SelfAttention.k',
                        'l_18': 'encoder.1.0.SelfAttention.v',
                        'l_19': 'encoder.1.0.SelfAttention.dropout',
                        'l_20': 'encoder.1.0.SelfAttention.o',
                        'l_21': 'encoder.1.0.dropout',
                        'l_22': 'encoder.1.1.layer_norm',
                        'l_23': 'encoder.1.1.DenseReluDense.wi',
                        'l_24': 'encoder.1.1.DenseReluDense.dropout',
                        'l_25': 'encoder.1.1.DenseReluDense.wo',
                        'l_26': 'encoder.1.1.dropout',
                        'l_27': 'encoder.2.0.layer_norm',
                        'l_28': 'encoder.2.0.SelfAttention.q',
                        'l_29': 'encoder.2.0.SelfAttention.k',
                        'l_30': 'encoder.2.0.SelfAttention.v',
                        'l_31': 'encoder.2.0.SelfAttention.dropout',
                        'l_32': 'encoder.2.0.SelfAttention.o',
                        'l_33': 'encoder.2.0.dropout',
                        'l_34': 'encoder.2.1.layer_norm',
                        'l_35': 'encoder.2.1.DenseReluDense.wi',
                        'l_36': 'encoder.2.1.DenseReluDense.dropout',
                        'l_37': 'encoder.2.1.DenseReluDense.wo',
                        'l_38': 'encoder.2.1.dropout',
                        'l_39': 'encoder.3.0.layer_norm',
                        'l_40': 'encoder.3.0.SelfAttention.q',
                        'l_41': 'encoder.3.0.SelfAttention.k',
                        'l_42': 'encoder.3.0.SelfAttention.v',
                        'l_43': 'encoder.3.0.SelfAttention.dropout',
                        'l_44': 'encoder.3.0.SelfAttention.o',
                        'l_45': 'encoder.3.0.dropout',
                        'l_46': 'encoder.3.1.layer_norm',
                        'l_47': 'encoder.3.1.DenseReluDense.wi',
                        'l_48': 'encoder.3.1.DenseReluDense.dropout',
                        'l_49': 'encoder.3.1.DenseReluDense.wo',
                        'l_50': 'encoder.3.1.dropout',
                        'l_51': 'encoder.4.0.layer_norm',
                        'l_52': 'encoder.4.0.SelfAttention.q',
                        'l_53': 'encoder.4.0.SelfAttention.k',
                        'l_54': 'encoder.4.0.SelfAttention.v',
                        'l_55': 'encoder.4.0.SelfAttention.dropout',
                        'l_56': 'encoder.4.0.SelfAttention.o',
                        'l_57': 'encoder.4.0.dropout',
                        'l_58': 'encoder.4.1.layer_norm',
                        'l_59': 'encoder.4.1.DenseReluDense.wi',
                        'l_60': 'encoder.4.1.DenseReluDense.dropout',
                        'l_61': 'encoder.4.1.DenseReluDense.wo',
                        'l_62': 'encoder.4.1.dropout',
                        'l_63': 'encoder.5.0.layer_norm',
                        'l_64': 'encoder.5.0.SelfAttention.q',
                        'l_65': 'encoder.5.0.SelfAttention.k',
                        'l_66': 'encoder.5.0.SelfAttention.v',
                        'l_67': 'encoder.5.0.SelfAttention.dropout',
                        'l_68': 'encoder.5.0.SelfAttention.o',
                        'l_69': 'encoder.5.0.dropout',
                        'l_70': 'encoder.5.1.layer_norm',
                        'l_71': 'encoder.5.1.DenseReluDense.wi',
                        'l_72': 'encoder.5.1.DenseReluDense.dropout',
                        'l_73': 'encoder.5.1.DenseReluDense.wo',
                        'l_74': 'encoder.5.1.dropout',
                        'l_75': 'encoder.6.0.layer_norm',
                        'l_76': 'encoder.6.0.SelfAttention.q',
                        'l_77': 'encoder.6.0.SelfAttention.k',
                        'l_78': 'encoder.6.0.SelfAttention.v',
                        'l_79': 'encoder.6.0.SelfAttention.dropout',
                        'l_80': 'decoder.embed_tokens',
                        'l_81': 'decoder.dropout',
                        'l_82': 'decoder.0.0.layer_norm',
                        'l_83': 'decoder.0.0.SelfAttention.q',
                        'l_84': 'decoder.0.0.SelfAttention.k',
                        'l_85': 'decoder.0.0.SelfAttention.v',
                        'l_86': 'decoder.0.0.SelfAttention.relative_attention_bias',
                        'l_87': 'decoder.0.0.SelfAttention.dropout',
                        'l_88': 'decoder.0.0.SelfAttention.o',
                        'l_89': 'decoder.0.0.dropout',
                        'l_90': 'decoder.0.1.layer_norm',
                        'l_91': 'decoder.0.1.EncDecAttention.q',
                        'p_0': 'shared_embed_weight'}
        self.to(self.device)

    def forward(self, *args):
        # T5ForConditionalGeneration/T5Stack[encoder]/StatelessEmbedding[embed_tokens] <=> self.l_0
        # T5ForConditionalGeneration/T5Stack[encoder]/Dropout[dropout] <=> self.l_1
        # T5ForConditionalGeneration/T5Stack[encoder]/T5Block[0]/T5LayerSelfAttention[0]/T5LayerNorm[layer_norm] <=> self.l_2
        # T5ForConditionalGeneration/T5Stack[encoder]/T5Block[0]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Linear[q] <=> self.l_3
        # T5ForConditionalGeneration/T5Stack[encoder]/T5Block[0]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Linear[k] <=> self.l_4
        # T5ForConditionalGeneration/T5Stack[encoder]/T5Block[0]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Linear[v] <=> self.l_5
        # T5ForConditionalGeneration/T5Stack[encoder]/T5Block[0]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Embedding[relative_attention_bias] <=> self.l_6
        # T5ForConditionalGeneration/T5Stack[encoder]/T5Block[0]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Dropout[dropout] <=> self.l_7
        # T5ForConditionalGeneration/T5Stack[encoder]/T5Block[0]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Linear[o] <=> self.l_8
        # T5ForConditionalGeneration/T5Stack[encoder]/T5Block[0]/T5LayerSelfAttention[0]/Dropout[dropout] <=> self.l_9
        # T5ForConditionalGeneration/T5Stack[encoder]/T5Block[0]/T5LayerFF[1]/T5LayerNorm[layer_norm] <=> self.l_10
        # T5ForConditionalGeneration/T5Stack[encoder]/T5Block[0]/T5LayerFF[1]/T5DenseReluDense[DenseReluDense]/Linear[wi] <=> self.l_11
        # T5ForConditionalGeneration/T5Stack[encoder]/T5Block[0]/T5LayerFF[1]/T5DenseReluDense[DenseReluDense]/Dropout[dropout] <=> self.l_12
        # T5ForConditionalGeneration/T5Stack[encoder]/T5Block[0]/T5LayerFF[1]/T5DenseReluDense[DenseReluDense]/Linear[wo] <=> self.l_13
        # T5ForConditionalGeneration/T5Stack[encoder]/T5Block[0]/T5LayerFF[1]/Dropout[dropout] <=> self.l_14
        # T5ForConditionalGeneration/T5Stack[encoder]/T5Block[1]/T5LayerSelfAttention[0]/T5LayerNorm[layer_norm] <=> self.l_15
        # T5ForConditionalGeneration/T5Stack[encoder]/T5Block[1]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Linear[q] <=> self.l_16
        # T5ForConditionalGeneration/T5Stack[encoder]/T5Block[1]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Linear[k] <=> self.l_17
        # T5ForConditionalGeneration/T5Stack[encoder]/T5Block[1]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Linear[v] <=> self.l_18
        # T5ForConditionalGeneration/T5Stack[encoder]/T5Block[1]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Dropout[dropout] <=> self.l_19
        # T5ForConditionalGeneration/T5Stack[encoder]/T5Block[1]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Linear[o] <=> self.l_20
        # T5ForConditionalGeneration/T5Stack[encoder]/T5Block[1]/T5LayerSelfAttention[0]/Dropout[dropout] <=> self.l_21
        # T5ForConditionalGeneration/T5Stack[encoder]/T5Block[1]/T5LayerFF[1]/T5LayerNorm[layer_norm] <=> self.l_22
        # T5ForConditionalGeneration/T5Stack[encoder]/T5Block[1]/T5LayerFF[1]/T5DenseReluDense[DenseReluDense]/Linear[wi] <=> self.l_23
        # T5ForConditionalGeneration/T5Stack[encoder]/T5Block[1]/T5LayerFF[1]/T5DenseReluDense[DenseReluDense]/Dropout[dropout] <=> self.l_24
        # T5ForConditionalGeneration/T5Stack[encoder]/T5Block[1]/T5LayerFF[1]/T5DenseReluDense[DenseReluDense]/Linear[wo] <=> self.l_25
        # T5ForConditionalGeneration/T5Stack[encoder]/T5Block[1]/T5LayerFF[1]/Dropout[dropout] <=> self.l_26
        # T5ForConditionalGeneration/T5Stack[encoder]/T5Block[2]/T5LayerSelfAttention[0]/T5LayerNorm[layer_norm] <=> self.l_27
        # T5ForConditionalGeneration/T5Stack[encoder]/T5Block[2]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Linear[q] <=> self.l_28
        # T5ForConditionalGeneration/T5Stack[encoder]/T5Block[2]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Linear[k] <=> self.l_29
        # T5ForConditionalGeneration/T5Stack[encoder]/T5Block[2]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Linear[v] <=> self.l_30
        # T5ForConditionalGeneration/T5Stack[encoder]/T5Block[2]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Dropout[dropout] <=> self.l_31
        # T5ForConditionalGeneration/T5Stack[encoder]/T5Block[2]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Linear[o] <=> self.l_32
        # T5ForConditionalGeneration/T5Stack[encoder]/T5Block[2]/T5LayerSelfAttention[0]/Dropout[dropout] <=> self.l_33
        # T5ForConditionalGeneration/T5Stack[encoder]/T5Block[2]/T5LayerFF[1]/T5LayerNorm[layer_norm] <=> self.l_34
        # T5ForConditionalGeneration/T5Stack[encoder]/T5Block[2]/T5LayerFF[1]/T5DenseReluDense[DenseReluDense]/Linear[wi] <=> self.l_35
        # T5ForConditionalGeneration/T5Stack[encoder]/T5Block[2]/T5LayerFF[1]/T5DenseReluDense[DenseReluDense]/Dropout[dropout] <=> self.l_36
        # T5ForConditionalGeneration/T5Stack[encoder]/T5Block[2]/T5LayerFF[1]/T5DenseReluDense[DenseReluDense]/Linear[wo] <=> self.l_37
        # T5ForConditionalGeneration/T5Stack[encoder]/T5Block[2]/T5LayerFF[1]/Dropout[dropout] <=> self.l_38
        # T5ForConditionalGeneration/T5Stack[encoder]/T5Block[3]/T5LayerSelfAttention[0]/T5LayerNorm[layer_norm] <=> self.l_39
        # T5ForConditionalGeneration/T5Stack[encoder]/T5Block[3]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Linear[q] <=> self.l_40
        # T5ForConditionalGeneration/T5Stack[encoder]/T5Block[3]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Linear[k] <=> self.l_41
        # T5ForConditionalGeneration/T5Stack[encoder]/T5Block[3]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Linear[v] <=> self.l_42
        # T5ForConditionalGeneration/T5Stack[encoder]/T5Block[3]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Dropout[dropout] <=> self.l_43
        # T5ForConditionalGeneration/T5Stack[encoder]/T5Block[3]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Linear[o] <=> self.l_44
        # T5ForConditionalGeneration/T5Stack[encoder]/T5Block[3]/T5LayerSelfAttention[0]/Dropout[dropout] <=> self.l_45
        # T5ForConditionalGeneration/T5Stack[encoder]/T5Block[3]/T5LayerFF[1]/T5LayerNorm[layer_norm] <=> self.l_46
        # T5ForConditionalGeneration/T5Stack[encoder]/T5Block[3]/T5LayerFF[1]/T5DenseReluDense[DenseReluDense]/Linear[wi] <=> self.l_47
        # T5ForConditionalGeneration/T5Stack[encoder]/T5Block[3]/T5LayerFF[1]/T5DenseReluDense[DenseReluDense]/Dropout[dropout] <=> self.l_48
        # T5ForConditionalGeneration/T5Stack[encoder]/T5Block[3]/T5LayerFF[1]/T5DenseReluDense[DenseReluDense]/Linear[wo] <=> self.l_49
        # T5ForConditionalGeneration/T5Stack[encoder]/T5Block[3]/T5LayerFF[1]/Dropout[dropout] <=> self.l_50
        # T5ForConditionalGeneration/T5Stack[encoder]/T5Block[4]/T5LayerSelfAttention[0]/T5LayerNorm[layer_norm] <=> self.l_51
        # T5ForConditionalGeneration/T5Stack[encoder]/T5Block[4]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Linear[q] <=> self.l_52
        # T5ForConditionalGeneration/T5Stack[encoder]/T5Block[4]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Linear[k] <=> self.l_53
        # T5ForConditionalGeneration/T5Stack[encoder]/T5Block[4]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Linear[v] <=> self.l_54
        # T5ForConditionalGeneration/T5Stack[encoder]/T5Block[4]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Dropout[dropout] <=> self.l_55
        # T5ForConditionalGeneration/T5Stack[encoder]/T5Block[4]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Linear[o] <=> self.l_56
        # T5ForConditionalGeneration/T5Stack[encoder]/T5Block[4]/T5LayerSelfAttention[0]/Dropout[dropout] <=> self.l_57
        # T5ForConditionalGeneration/T5Stack[encoder]/T5Block[4]/T5LayerFF[1]/T5LayerNorm[layer_norm] <=> self.l_58
        # T5ForConditionalGeneration/T5Stack[encoder]/T5Block[4]/T5LayerFF[1]/T5DenseReluDense[DenseReluDense]/Linear[wi] <=> self.l_59
        # T5ForConditionalGeneration/T5Stack[encoder]/T5Block[4]/T5LayerFF[1]/T5DenseReluDense[DenseReluDense]/Dropout[dropout] <=> self.l_60
        # T5ForConditionalGeneration/T5Stack[encoder]/T5Block[4]/T5LayerFF[1]/T5DenseReluDense[DenseReluDense]/Linear[wo] <=> self.l_61
        # T5ForConditionalGeneration/T5Stack[encoder]/T5Block[4]/T5LayerFF[1]/Dropout[dropout] <=> self.l_62
        # T5ForConditionalGeneration/T5Stack[encoder]/T5Block[5]/T5LayerSelfAttention[0]/T5LayerNorm[layer_norm] <=> self.l_63
        # T5ForConditionalGeneration/T5Stack[encoder]/T5Block[5]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Linear[q] <=> self.l_64
        # T5ForConditionalGeneration/T5Stack[encoder]/T5Block[5]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Linear[k] <=> self.l_65
        # T5ForConditionalGeneration/T5Stack[encoder]/T5Block[5]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Linear[v] <=> self.l_66
        # T5ForConditionalGeneration/T5Stack[encoder]/T5Block[5]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Dropout[dropout] <=> self.l_67
        # T5ForConditionalGeneration/T5Stack[encoder]/T5Block[5]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Linear[o] <=> self.l_68
        # T5ForConditionalGeneration/T5Stack[encoder]/T5Block[5]/T5LayerSelfAttention[0]/Dropout[dropout] <=> self.l_69
        # T5ForConditionalGeneration/T5Stack[encoder]/T5Block[5]/T5LayerFF[1]/T5LayerNorm[layer_norm] <=> self.l_70
        # T5ForConditionalGeneration/T5Stack[encoder]/T5Block[5]/T5LayerFF[1]/T5DenseReluDense[DenseReluDense]/Linear[wi] <=> self.l_71
        # T5ForConditionalGeneration/T5Stack[encoder]/T5Block[5]/T5LayerFF[1]/T5DenseReluDense[DenseReluDense]/Dropout[dropout] <=> self.l_72
        # T5ForConditionalGeneration/T5Stack[encoder]/T5Block[5]/T5LayerFF[1]/T5DenseReluDense[DenseReluDense]/Linear[wo] <=> self.l_73
        # T5ForConditionalGeneration/T5Stack[encoder]/T5Block[5]/T5LayerFF[1]/Dropout[dropout] <=> self.l_74
        # T5ForConditionalGeneration/T5Stack[encoder]/T5Block[6]/T5LayerSelfAttention[0]/T5LayerNorm[layer_norm] <=> self.l_75
        # T5ForConditionalGeneration/T5Stack[encoder]/T5Block[6]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Linear[q] <=> self.l_76
        # T5ForConditionalGeneration/T5Stack[encoder]/T5Block[6]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Linear[k] <=> self.l_77
        # T5ForConditionalGeneration/T5Stack[encoder]/T5Block[6]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Linear[v] <=> self.l_78
        # T5ForConditionalGeneration/T5Stack[encoder]/T5Block[6]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Dropout[dropout] <=> self.l_79
        # T5ForConditionalGeneration/T5Stack[decoder]/StatelessEmbedding[embed_tokens] <=> self.l_80
        # T5ForConditionalGeneration/T5Stack[decoder]/Dropout[dropout] <=> self.l_81
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[0]/T5LayerSelfAttention[0]/T5LayerNorm[layer_norm] <=> self.l_82
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[0]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Linear[q] <=> self.l_83
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[0]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Linear[k] <=> self.l_84
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[0]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Linear[v] <=> self.l_85
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[0]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Embedding[relative_attention_bias] <=> self.l_86
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[0]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Dropout[dropout] <=> self.l_87
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[0]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Linear[o] <=> self.l_88
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[0]/T5LayerSelfAttention[0]/Dropout[dropout] <=> self.l_89
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[0]/T5LayerCrossAttention[1]/T5LayerNorm[layer_norm] <=> self.l_90
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[0]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Linear[q] <=> self.l_91
        # T5ForConditionalGeneration/Parameter[shared_embed_weight] <=> self.p_0
        # input0 <=> attention_mask
        # input1 <=> decoder_attention_mask
        # input2 <=> decoder_input_ids
        # input3 <=> input_ids

        # moving inputs to current device no op if already on the correct device
        attention_mask, decoder_attention_mask, decoder_input_ids, input_ids = move_tensors(unflatten(args,self.input_structure), self.device)
        t_0 = input_ids.size()
        t_0 = t_0[-1]
        t_0 = input_ids.view(-1, t_0)
        t_0 = self.l_0(self.p_0, t_0)
        t_0 = self.l_1(t_0)
        t_1 = self.l_2(t_0)
        t_2 = t_1.size()
        t_3 = t_2[0]
        t_2 = t_2[1]
        t_4 = self.l_3(t_1)
        t_4 = t_4.view(t_3, -1, 32, 128)
        t_4 = t_4.transpose(1, 2)
        t_5 = self.l_4(t_1)
        t_5 = t_5.view(t_3, -1, 32, 128)
        t_5 = t_5.transpose(1, 2)
        t_1 = self.l_5(t_1)
        t_1 = t_1.view(t_3, -1, 32, 128)
        t_1 = t_1.transpose(1, 2)
        t_5 = t_5.transpose(3, 2)
        t_5 = torch.matmul(t_4, t_5)
        t_4 = torch.arange(t_2, dtype=torch.int64, device = self.device)
        t_6 = slice(None, None, None)
        t_6 = (t_6, None)
        t_6 = t_4[t_6]
        t_2 = torch.arange(t_2, dtype=torch.int64, device = self.device)
        t_4 = slice(None, None, None)
        t_4 = (None, t_4)
        t_4 = t_2[t_4]
        t_6 = t_4 - t_6
        t_6 = -t_6
        t_4 = t_6 < 0
        t_4 = t_4.to(torch.int64)
        t_4 = t_4 * 16
        t_4 = 0 + t_4
        t_6 = torch.abs(t_6)
        t_2 = t_6 < 8
        t_7 = t_6.float()
        t_7 = t_7 / 8
        t_7 = torch.log(t_7)
        t_8 = math.log(16.0)
        t_8 = t_7 / t_8
        t_8 = t_8 * 8
        t_8 = t_8.to(torch.int64)
        t_8 = 8 + t_8
        t_7 = torch.full_like(t_8, 15)
        t_7 = torch.min(t_8, t_7)
        t_7 = torch.where(t_2, t_6, t_7)
        t_4 += t_7
        t_7 = t_4
        t_7 = t_7.to(self.device)
        t_7 = self.l_6(t_7)
        t_4 = [2, 0, 1]
        t_4 = t_7.permute(t_4)
        t_4 = t_4.unsqueeze(0)
        t_4 = t_4 + attention_mask
        t_5 += t_4
        t_7 = t_5.float()
        t_7 = torch.nn.functional.softmax(t_7, dim=-1, _stacklevel=3, dtype=None)
        t_5 = t_7.type_as(t_5)
        t_5 = self.l_7(t_5)
        t_1 = torch.matmul(t_5, t_1)
        t_1 = t_1.transpose(1, 2)
        t_1 = t_1.contiguous()
        t_3 = t_1.view(t_3, -1, 4096)
        t_3 = self.l_8(t_3)
        t_4 = (t_3, t_4)
        t_3 = t_4[0]
        t_3 = self.l_9(t_3)
        t_3 = t_0 + t_3
        t_4 = t_4[1]
        t_4 = (t_3, t_4)
        t_3 = t_4[0]
        t_4 = t_4[1]
        t_0 = self.l_10(t_3)
        t_0 = self.l_11(t_0)
        t_0 = torch.nn.functional.relu(t_0, inplace=False)
        t_0 = self.l_12(t_0)
        t_0 = self.l_13(t_0)
        t_0 = self.l_14(t_0)
        t_0 = t_3 + t_0
        t_4 = (t_0, t_4)
        t_0 = t_4[0]
        t_4 = t_4[1]
        t_3 = self.l_15(t_0)
        t_1 = t_3.size()
        t_1 = t_1[0]
        t_5 = self.l_16(t_3)
        t_5 = t_5.view(t_1, -1, 32, 128)
        t_5 = t_5.transpose(1, 2)
        t_7 = self.l_17(t_3)
        t_7 = t_7.view(t_1, -1, 32, 128)
        t_7 = t_7.transpose(1, 2)
        t_3 = self.l_18(t_3)
        t_3 = t_3.view(t_1, -1, 32, 128)
        t_3 = t_3.transpose(1, 2)
        t_7 = t_7.transpose(3, 2)
        t_7 = torch.matmul(t_5, t_7)
        t_7 += t_4
        t_5 = t_7.float()
        t_5 = torch.nn.functional.softmax(t_5, dim=-1, _stacklevel=3, dtype=None)
        t_7 = t_5.type_as(t_7)
        t_7 = self.l_19(t_7)
        t_3 = torch.matmul(t_7, t_3)
        t_3 = t_3.transpose(1, 2)
        t_3 = t_3.contiguous()
        t_1 = t_3.view(t_1, -1, 4096)
        t_1 = self.l_20(t_1)
        t_1 = self.l_21(t_1)
        t_1 = t_0 + t_1
        t_0 = self.l_22(t_1)
        t_0 = self.l_23(t_0)
        t_0 = torch.nn.functional.relu(t_0, inplace=False)
        t_0 = self.l_24(t_0)
        t_0 = self.l_25(t_0)
        t_0 = self.l_26(t_0)
        t_0 = t_1 + t_0
        t_1 = self.l_27(t_0)
        t_3 = t_1.size()
        t_3 = t_3[0]
        t_7 = self.l_28(t_1)
        t_7 = t_7.view(t_3, -1, 32, 128)
        t_7 = t_7.transpose(1, 2)
        t_5 = self.l_29(t_1)
        t_5 = t_5.view(t_3, -1, 32, 128)
        t_5 = t_5.transpose(1, 2)
        t_1 = self.l_30(t_1)
        t_1 = t_1.view(t_3, -1, 32, 128)
        t_1 = t_1.transpose(1, 2)
        t_5 = t_5.transpose(3, 2)
        t_5 = torch.matmul(t_7, t_5)
        t_5 += t_4
        t_7 = t_5.float()
        t_7 = torch.nn.functional.softmax(t_7, dim=-1, _stacklevel=3, dtype=None)
        t_5 = t_7.type_as(t_5)
        t_5 = self.l_31(t_5)
        t_1 = torch.matmul(t_5, t_1)
        t_1 = t_1.transpose(1, 2)
        t_1 = t_1.contiguous()
        t_3 = t_1.view(t_3, -1, 4096)
        t_3 = self.l_32(t_3)
        t_3 = self.l_33(t_3)
        t_3 = t_0 + t_3
        t_0 = self.l_34(t_3)
        t_0 = self.l_35(t_0)
        t_0 = torch.nn.functional.relu(t_0, inplace=False)
        t_0 = self.l_36(t_0)
        t_0 = self.l_37(t_0)
        t_0 = self.l_38(t_0)
        t_0 = t_3 + t_0
        t_3 = self.l_39(t_0)
        t_1 = t_3.size()
        t_1 = t_1[0]
        t_5 = self.l_40(t_3)
        t_5 = t_5.view(t_1, -1, 32, 128)
        t_5 = t_5.transpose(1, 2)
        t_7 = self.l_41(t_3)
        t_7 = t_7.view(t_1, -1, 32, 128)
        t_7 = t_7.transpose(1, 2)
        t_3 = self.l_42(t_3)
        t_3 = t_3.view(t_1, -1, 32, 128)
        t_3 = t_3.transpose(1, 2)
        t_7 = t_7.transpose(3, 2)
        t_7 = torch.matmul(t_5, t_7)
        t_7 += t_4
        t_5 = t_7.float()
        t_5 = torch.nn.functional.softmax(t_5, dim=-1, _stacklevel=3, dtype=None)
        t_7 = t_5.type_as(t_7)
        t_7 = self.l_43(t_7)
        t_3 = torch.matmul(t_7, t_3)
        t_3 = t_3.transpose(1, 2)
        t_3 = t_3.contiguous()
        t_1 = t_3.view(t_1, -1, 4096)
        t_1 = self.l_44(t_1)
        t_1 = self.l_45(t_1)
        t_1 = t_0 + t_1
        t_0 = self.l_46(t_1)
        t_0 = self.l_47(t_0)
        t_0 = torch.nn.functional.relu(t_0, inplace=False)
        t_0 = self.l_48(t_0)
        t_0 = self.l_49(t_0)
        t_0 = self.l_50(t_0)
        t_0 = t_1 + t_0
        t_1 = self.l_51(t_0)
        t_3 = t_1.size()
        t_3 = t_3[0]
        t_7 = self.l_52(t_1)
        t_7 = t_7.view(t_3, -1, 32, 128)
        t_7 = t_7.transpose(1, 2)
        t_5 = self.l_53(t_1)
        t_5 = t_5.view(t_3, -1, 32, 128)
        t_5 = t_5.transpose(1, 2)
        t_1 = self.l_54(t_1)
        t_1 = t_1.view(t_3, -1, 32, 128)
        t_1 = t_1.transpose(1, 2)
        t_5 = t_5.transpose(3, 2)
        t_5 = torch.matmul(t_7, t_5)
        t_5 += t_4
        t_7 = t_5.float()
        t_7 = torch.nn.functional.softmax(t_7, dim=-1, _stacklevel=3, dtype=None)
        t_5 = t_7.type_as(t_5)
        t_5 = self.l_55(t_5)
        t_1 = torch.matmul(t_5, t_1)
        t_1 = t_1.transpose(1, 2)
        t_1 = t_1.contiguous()
        t_3 = t_1.view(t_3, -1, 4096)
        t_3 = self.l_56(t_3)
        t_3 = self.l_57(t_3)
        t_3 = t_0 + t_3
        t_0 = self.l_58(t_3)
        t_0 = self.l_59(t_0)
        t_0 = torch.nn.functional.relu(t_0, inplace=False)
        t_0 = self.l_60(t_0)
        t_0 = self.l_61(t_0)
        t_0 = self.l_62(t_0)
        t_0 = t_3 + t_0
        t_3 = self.l_63(t_0)
        t_1 = t_3.size()
        t_1 = t_1[0]
        t_5 = self.l_64(t_3)
        t_5 = t_5.view(t_1, -1, 32, 128)
        t_5 = t_5.transpose(1, 2)
        t_7 = self.l_65(t_3)
        t_7 = t_7.view(t_1, -1, 32, 128)
        t_7 = t_7.transpose(1, 2)
        t_3 = self.l_66(t_3)
        t_3 = t_3.view(t_1, -1, 32, 128)
        t_3 = t_3.transpose(1, 2)
        t_7 = t_7.transpose(3, 2)
        t_7 = torch.matmul(t_5, t_7)
        t_7 += t_4
        t_5 = t_7.float()
        t_5 = torch.nn.functional.softmax(t_5, dim=-1, _stacklevel=3, dtype=None)
        t_7 = t_5.type_as(t_7)
        t_7 = self.l_67(t_7)
        t_3 = torch.matmul(t_7, t_3)
        t_3 = t_3.transpose(1, 2)
        t_3 = t_3.contiguous()
        t_1 = t_3.view(t_1, -1, 4096)
        t_1 = self.l_68(t_1)
        t_1 = self.l_69(t_1)
        t_1 = t_0 + t_1
        t_0 = self.l_70(t_1)
        t_0 = self.l_71(t_0)
        t_0 = torch.nn.functional.relu(t_0, inplace=False)
        t_0 = self.l_72(t_0)
        t_0 = self.l_73(t_0)
        t_0 = self.l_74(t_0)
        t_0 = t_1 + t_0
        t_1 = self.l_75(t_0)
        t_3 = t_1.size()
        t_3 = t_3[0]
        t_7 = self.l_76(t_1)
        t_7 = t_7.view(t_3, -1, 32, 128)
        t_7 = t_7.transpose(1, 2)
        t_5 = self.l_77(t_1)
        t_5 = t_5.view(t_3, -1, 32, 128)
        t_5 = t_5.transpose(1, 2)
        t_1 = self.l_78(t_1)
        t_1 = t_1.view(t_3, -1, 32, 128)
        t_1 = t_1.transpose(1, 2)
        t_5 = t_5.transpose(3, 2)
        t_5 = torch.matmul(t_7, t_5)
        t_5 += t_4
        t_7 = t_5.float()
        t_7 = torch.nn.functional.softmax(t_7, dim=-1, _stacklevel=3, dtype=None)
        t_5 = t_7.type_as(t_5)
        t_5 = self.l_79(t_5)
        t_1 = torch.matmul(t_5, t_1)
        t_1 = t_1.transpose(1, 2)
        t_1 = t_1.contiguous()
        t_3 = t_1.view(t_3, -1, 4096)
        t_1 = decoder_input_ids.size()
        t_1 = t_1[-1]
        t_1 = decoder_input_ids.view(-1, t_1)
        t_1 = self.l_80(self.p_0, t_1)
        t_1 = self.l_81(t_1)
        t_5 = self.l_82(t_1)
        t_7 = t_5.size()
        t_6 = t_7[0]
        t_7 = t_7[1]
        t_2 = self.l_83(t_5)
        t_2 = t_2.view(t_6, -1, 32, 128)
        t_2 = t_2.transpose(1, 2)
        t_8 = self.l_84(t_5)
        t_8 = t_8.view(t_6, -1, 32, 128)
        t_8 = t_8.transpose(1, 2)
        t_5 = self.l_85(t_5)
        t_5 = t_5.view(t_6, -1, 32, 128)
        t_5 = t_5.transpose(1, 2)
        t_8 = t_8.transpose(3, 2)
        t_8 = torch.matmul(t_2, t_8)
        t_2 = torch.arange(t_7, dtype=torch.int64, device = self.device)
        t_9 = slice(None, None, None)
        t_9 = (t_9, None)
        t_9 = t_2[t_9]
        t_7 = torch.arange(t_7, dtype=torch.int64, device = self.device)
        t_2 = slice(None, None, None)
        t_2 = (None, t_2)
        t_2 = t_7[t_2]
        t_9 = t_2 - t_9
        t_9 = -t_9
        t_2 = torch.zeros_like(t_9)
        t_2 = torch.max(t_9, t_2)
        t_9 = t_2 < 16
        t_7 = t_2.float()
        t_7 = t_7 / 16
        t_7 = torch.log(t_7)
        t_10 = math.log(8.0)
        t_10 = t_7 / t_10
        t_10 = t_10 * 16
        t_10 = t_10.to(torch.int64)
        t_10 = 16 + t_10
        t_7 = torch.full_like(t_10, 31)
        t_7 = torch.min(t_10, t_7)
        t_7 = torch.where(t_9, t_2, t_7)
        t_7 = 0 + t_7
        t_7 = t_7.to(self.device)
        t_7 = self.l_86(t_7)
        t_2 = [2, 0, 1]
        t_2 = t_7.permute(t_2)
        t_2 = t_2.unsqueeze(0)
        t_2 = t_2 + decoder_attention_mask
        t_8 += t_2
        t_7 = t_8.float()
        t_7 = torch.nn.functional.softmax(t_7, dim=-1, _stacklevel=3, dtype=None)
        t_8 = t_7.type_as(t_8)
        t_8 = self.l_87(t_8)
        t_5 = torch.matmul(t_8, t_5)
        t_5 = t_5.transpose(1, 2)
        t_5 = t_5.contiguous()
        t_6 = t_5.view(t_6, -1, 4096)
        t_6 = self.l_88(t_6)
        t_2 = (t_6, t_2)
        t_6 = t_2[0]
        t_6 = self.l_89(t_6)
        t_6 = t_1 + t_6
        t_2 = t_2[1]
        t_2 = (t_6, t_2)
        t_6 = t_2[0]
        t_1 = self.l_90(t_6)
        t_5 = t_1.size()
        t_1 = self.l_91(t_1)
        # returning:
        # T5ForConditionalGeneration/T5Stack[encoder]/tuple::__getitem___149
        # T5ForConditionalGeneration/T5Stack[encoder]/T5Block[5]/T5LayerFF[1]/Tensor::__add___444
        # T5ForConditionalGeneration/T5Stack[encoder]/T5Block[6]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Tensor::view_492
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[0]/T5LayerSelfAttention[0]/prim::TupleConstruct_1628
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[0]/tuple::__getitem___1630
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[0]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Tensor::size_1634
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[0]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Linear[q]
        return list(flatten((t_4, t_0, t_3, t_2, t_6, t_5, t_1)))

    def state_dict(self,*args,**kwargs):
        # we return the state dict of this part as it should be in the original model
        return state_dict(self,*args,**kwargs)

    def load_state_dict(self, state):
        return load_state_dict(self,state)

    def named_parameters(self,recurse=True):
        # we return the named parameters of this part as it should be in the original model
        return named_parameters(self,recurse=recurse)

    def named_buffers(self,recurse=True):
        # we return the named buffers of this part as it should be in the original model
        return named_buffers(self,recurse=recurse)

    def cpu(self):
        return cpu(self)

    def cuda(self,device=None):
        return cuda(self,device=device)

    def to(self, *args, **kwargs):
        return to(self,*args,**kwargs)


class Partition1(nn.Module):
    LAYER_SCOPES=[
            'T5ForConditionalGeneration/T5Stack[encoder]/T5Block[6]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Linear[o]',
            'T5ForConditionalGeneration/T5Stack[encoder]/T5Block[6]/T5LayerSelfAttention[0]/Dropout[dropout]',
            'T5ForConditionalGeneration/T5Stack[encoder]/T5Block[6]/T5LayerFF[1]/T5LayerNorm[layer_norm]',
            'T5ForConditionalGeneration/T5Stack[encoder]/T5Block[6]/T5LayerFF[1]/T5DenseReluDense[DenseReluDense]/Linear[wi]',
            'T5ForConditionalGeneration/T5Stack[encoder]/T5Block[6]/T5LayerFF[1]/T5DenseReluDense[DenseReluDense]/Dropout[dropout]',
            'T5ForConditionalGeneration/T5Stack[encoder]/T5Block[6]/T5LayerFF[1]/T5DenseReluDense[DenseReluDense]/Linear[wo]',
            'T5ForConditionalGeneration/T5Stack[encoder]/T5Block[6]/T5LayerFF[1]/Dropout[dropout]',
            'T5ForConditionalGeneration/T5Stack[encoder]/T5Block[7]/T5LayerSelfAttention[0]/T5LayerNorm[layer_norm]',
            'T5ForConditionalGeneration/T5Stack[encoder]/T5Block[7]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Linear[q]',
            'T5ForConditionalGeneration/T5Stack[encoder]/T5Block[7]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Linear[k]',
            'T5ForConditionalGeneration/T5Stack[encoder]/T5Block[7]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Linear[v]',
            'T5ForConditionalGeneration/T5Stack[encoder]/T5Block[7]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Dropout[dropout]',
            'T5ForConditionalGeneration/T5Stack[encoder]/T5Block[7]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Linear[o]',
            'T5ForConditionalGeneration/T5Stack[encoder]/T5Block[7]/T5LayerSelfAttention[0]/Dropout[dropout]',
            'T5ForConditionalGeneration/T5Stack[encoder]/T5Block[7]/T5LayerFF[1]/T5LayerNorm[layer_norm]',
            'T5ForConditionalGeneration/T5Stack[encoder]/T5Block[7]/T5LayerFF[1]/T5DenseReluDense[DenseReluDense]/Linear[wi]',
            'T5ForConditionalGeneration/T5Stack[encoder]/T5Block[7]/T5LayerFF[1]/T5DenseReluDense[DenseReluDense]/Dropout[dropout]',
            'T5ForConditionalGeneration/T5Stack[encoder]/T5Block[7]/T5LayerFF[1]/T5DenseReluDense[DenseReluDense]/Linear[wo]',
            'T5ForConditionalGeneration/T5Stack[encoder]/T5Block[7]/T5LayerFF[1]/Dropout[dropout]',
            'T5ForConditionalGeneration/T5Stack[encoder]/T5Block[8]/T5LayerSelfAttention[0]/T5LayerNorm[layer_norm]',
            'T5ForConditionalGeneration/T5Stack[encoder]/T5Block[8]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Linear[q]',
            'T5ForConditionalGeneration/T5Stack[encoder]/T5Block[8]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Linear[k]',
            'T5ForConditionalGeneration/T5Stack[encoder]/T5Block[8]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Linear[v]',
            'T5ForConditionalGeneration/T5Stack[encoder]/T5Block[8]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Dropout[dropout]',
            'T5ForConditionalGeneration/T5Stack[encoder]/T5Block[8]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Linear[o]',
            'T5ForConditionalGeneration/T5Stack[encoder]/T5Block[8]/T5LayerSelfAttention[0]/Dropout[dropout]',
            'T5ForConditionalGeneration/T5Stack[encoder]/T5Block[8]/T5LayerFF[1]/T5LayerNorm[layer_norm]',
            'T5ForConditionalGeneration/T5Stack[encoder]/T5Block[8]/T5LayerFF[1]/T5DenseReluDense[DenseReluDense]/Linear[wi]',
            'T5ForConditionalGeneration/T5Stack[encoder]/T5Block[8]/T5LayerFF[1]/T5DenseReluDense[DenseReluDense]/Dropout[dropout]',
            'T5ForConditionalGeneration/T5Stack[encoder]/T5Block[8]/T5LayerFF[1]/T5DenseReluDense[DenseReluDense]/Linear[wo]',
            'T5ForConditionalGeneration/T5Stack[encoder]/T5Block[8]/T5LayerFF[1]/Dropout[dropout]',
            'T5ForConditionalGeneration/T5Stack[encoder]/T5Block[9]/T5LayerSelfAttention[0]/T5LayerNorm[layer_norm]',
            'T5ForConditionalGeneration/T5Stack[encoder]/T5Block[9]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Linear[q]',
            'T5ForConditionalGeneration/T5Stack[encoder]/T5Block[9]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Linear[k]',
            'T5ForConditionalGeneration/T5Stack[encoder]/T5Block[9]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Linear[v]',
            'T5ForConditionalGeneration/T5Stack[encoder]/T5Block[9]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Dropout[dropout]',
            'T5ForConditionalGeneration/T5Stack[encoder]/T5Block[9]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Linear[o]',
            'T5ForConditionalGeneration/T5Stack[encoder]/T5Block[9]/T5LayerSelfAttention[0]/Dropout[dropout]',
            'T5ForConditionalGeneration/T5Stack[encoder]/T5Block[9]/T5LayerFF[1]/T5LayerNorm[layer_norm]',
            'T5ForConditionalGeneration/T5Stack[encoder]/T5Block[9]/T5LayerFF[1]/T5DenseReluDense[DenseReluDense]/Linear[wi]',
            'T5ForConditionalGeneration/T5Stack[encoder]/T5Block[9]/T5LayerFF[1]/T5DenseReluDense[DenseReluDense]/Dropout[dropout]',
            'T5ForConditionalGeneration/T5Stack[encoder]/T5Block[9]/T5LayerFF[1]/T5DenseReluDense[DenseReluDense]/Linear[wo]',
            'T5ForConditionalGeneration/T5Stack[encoder]/T5Block[9]/T5LayerFF[1]/Dropout[dropout]',
            'T5ForConditionalGeneration/T5Stack[encoder]/T5Block[10]/T5LayerSelfAttention[0]/T5LayerNorm[layer_norm]',
            'T5ForConditionalGeneration/T5Stack[encoder]/T5Block[10]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Linear[q]',
            'T5ForConditionalGeneration/T5Stack[encoder]/T5Block[10]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Linear[k]',
            'T5ForConditionalGeneration/T5Stack[encoder]/T5Block[10]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Linear[v]',
            'T5ForConditionalGeneration/T5Stack[encoder]/T5Block[10]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Dropout[dropout]',
            'T5ForConditionalGeneration/T5Stack[encoder]/T5Block[10]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Linear[o]',
            'T5ForConditionalGeneration/T5Stack[encoder]/T5Block[10]/T5LayerSelfAttention[0]/Dropout[dropout]',
            'T5ForConditionalGeneration/T5Stack[encoder]/T5Block[10]/T5LayerFF[1]/T5LayerNorm[layer_norm]',
            'T5ForConditionalGeneration/T5Stack[encoder]/T5Block[10]/T5LayerFF[1]/T5DenseReluDense[DenseReluDense]/Linear[wi]',
            'T5ForConditionalGeneration/T5Stack[encoder]/T5Block[10]/T5LayerFF[1]/T5DenseReluDense[DenseReluDense]/Dropout[dropout]',
            'T5ForConditionalGeneration/T5Stack[encoder]/T5Block[10]/T5LayerFF[1]/T5DenseReluDense[DenseReluDense]/Linear[wo]',
            'T5ForConditionalGeneration/T5Stack[encoder]/T5Block[10]/T5LayerFF[1]/Dropout[dropout]',
            'T5ForConditionalGeneration/T5Stack[encoder]/T5Block[11]/T5LayerSelfAttention[0]/T5LayerNorm[layer_norm]',
            'T5ForConditionalGeneration/T5Stack[encoder]/T5Block[11]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Linear[q]',
            'T5ForConditionalGeneration/T5Stack[encoder]/T5Block[11]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Linear[k]',
            'T5ForConditionalGeneration/T5Stack[encoder]/T5Block[11]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Linear[v]',
            'T5ForConditionalGeneration/T5Stack[encoder]/T5Block[11]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Dropout[dropout]',
            'T5ForConditionalGeneration/T5Stack[encoder]/T5Block[11]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Linear[o]',
            'T5ForConditionalGeneration/T5Stack[encoder]/T5Block[11]/T5LayerSelfAttention[0]/Dropout[dropout]',
            'T5ForConditionalGeneration/T5Stack[encoder]/T5Block[11]/T5LayerFF[1]/T5LayerNorm[layer_norm]',
            'T5ForConditionalGeneration/T5Stack[encoder]/T5Block[11]/T5LayerFF[1]/T5DenseReluDense[DenseReluDense]/Linear[wi]',
            'T5ForConditionalGeneration/T5Stack[encoder]/T5Block[11]/T5LayerFF[1]/T5DenseReluDense[DenseReluDense]/Dropout[dropout]',
            'T5ForConditionalGeneration/T5Stack[encoder]/T5Block[11]/T5LayerFF[1]/T5DenseReluDense[DenseReluDense]/Linear[wo]',
            'T5ForConditionalGeneration/T5Stack[encoder]/T5Block[11]/T5LayerFF[1]/Dropout[dropout]',
            'T5ForConditionalGeneration/T5Stack[encoder]/T5Block[12]/T5LayerSelfAttention[0]/T5LayerNorm[layer_norm]',
            'T5ForConditionalGeneration/T5Stack[encoder]/T5Block[12]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Linear[q]',
            'T5ForConditionalGeneration/T5Stack[encoder]/T5Block[12]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Linear[k]',
            'T5ForConditionalGeneration/T5Stack[encoder]/T5Block[12]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Linear[v]',
            'T5ForConditionalGeneration/T5Stack[encoder]/T5Block[12]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Dropout[dropout]',
            'T5ForConditionalGeneration/T5Stack[encoder]/T5Block[12]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Linear[o]',
            'T5ForConditionalGeneration/T5Stack[encoder]/T5Block[12]/T5LayerSelfAttention[0]/Dropout[dropout]',
            'T5ForConditionalGeneration/T5Stack[encoder]/T5Block[12]/T5LayerFF[1]/T5LayerNorm[layer_norm]',
            'T5ForConditionalGeneration/T5Stack[encoder]/T5Block[12]/T5LayerFF[1]/T5DenseReluDense[DenseReluDense]/Linear[wi]',
            'T5ForConditionalGeneration/T5Stack[encoder]/T5Block[12]/T5LayerFF[1]/T5DenseReluDense[DenseReluDense]/Dropout[dropout]',
            'T5ForConditionalGeneration/T5Stack[encoder]/T5Block[12]/T5LayerFF[1]/T5DenseReluDense[DenseReluDense]/Linear[wo]',
            'T5ForConditionalGeneration/T5Stack[encoder]/T5Block[12]/T5LayerFF[1]/Dropout[dropout]',
            'T5ForConditionalGeneration/T5Stack[encoder]/T5Block[13]/T5LayerSelfAttention[0]/T5LayerNorm[layer_norm]',
            'T5ForConditionalGeneration/T5Stack[encoder]/T5Block[13]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Linear[q]',
            'T5ForConditionalGeneration/T5Stack[encoder]/T5Block[13]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Linear[k]',
            'T5ForConditionalGeneration/T5Stack[encoder]/T5Block[13]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Linear[v]',
            'T5ForConditionalGeneration/T5Stack[encoder]/T5Block[13]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Dropout[dropout]',
            'T5ForConditionalGeneration/T5Stack[encoder]/T5Block[13]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Linear[o]',
        ]
    TENSORS=[
        ]
    def __init__(self, layers, tensors, device='cuda:1'):
        super().__init__()

        #initialize partition layers
        for idx,layer_scope in enumerate(self.LAYER_SCOPES):
            self.add_module(f'l_{idx}',layers[layer_scope])

        #initialize partition tensors
        b=p=0
        for tensor_scope in self.TENSORS:
            tensor=tensors[tensor_scope]
            if isinstance(tensor,nn.Parameter):
                self.register_parameter(f'p_{p}',tensor)
                p+=1
            else:
                self.register_buffer(f'b_{b}',tensor)
                b+=1

        self.device = torch.device(device)
        self.input_structure = [1, 1, 1, 1]
        self.lookup = { 'l_0': 'encoder.6.0.SelfAttention.o',
                        'l_1': 'encoder.6.0.dropout',
                        'l_2': 'encoder.6.1.layer_norm',
                        'l_3': 'encoder.6.1.DenseReluDense.wi',
                        'l_4': 'encoder.6.1.DenseReluDense.dropout',
                        'l_5': 'encoder.6.1.DenseReluDense.wo',
                        'l_6': 'encoder.6.1.dropout',
                        'l_7': 'encoder.7.0.layer_norm',
                        'l_8': 'encoder.7.0.SelfAttention.q',
                        'l_9': 'encoder.7.0.SelfAttention.k',
                        'l_10': 'encoder.7.0.SelfAttention.v',
                        'l_11': 'encoder.7.0.SelfAttention.dropout',
                        'l_12': 'encoder.7.0.SelfAttention.o',
                        'l_13': 'encoder.7.0.dropout',
                        'l_14': 'encoder.7.1.layer_norm',
                        'l_15': 'encoder.7.1.DenseReluDense.wi',
                        'l_16': 'encoder.7.1.DenseReluDense.dropout',
                        'l_17': 'encoder.7.1.DenseReluDense.wo',
                        'l_18': 'encoder.7.1.dropout',
                        'l_19': 'encoder.8.0.layer_norm',
                        'l_20': 'encoder.8.0.SelfAttention.q',
                        'l_21': 'encoder.8.0.SelfAttention.k',
                        'l_22': 'encoder.8.0.SelfAttention.v',
                        'l_23': 'encoder.8.0.SelfAttention.dropout',
                        'l_24': 'encoder.8.0.SelfAttention.o',
                        'l_25': 'encoder.8.0.dropout',
                        'l_26': 'encoder.8.1.layer_norm',
                        'l_27': 'encoder.8.1.DenseReluDense.wi',
                        'l_28': 'encoder.8.1.DenseReluDense.dropout',
                        'l_29': 'encoder.8.1.DenseReluDense.wo',
                        'l_30': 'encoder.8.1.dropout',
                        'l_31': 'encoder.9.0.layer_norm',
                        'l_32': 'encoder.9.0.SelfAttention.q',
                        'l_33': 'encoder.9.0.SelfAttention.k',
                        'l_34': 'encoder.9.0.SelfAttention.v',
                        'l_35': 'encoder.9.0.SelfAttention.dropout',
                        'l_36': 'encoder.9.0.SelfAttention.o',
                        'l_37': 'encoder.9.0.dropout',
                        'l_38': 'encoder.9.1.layer_norm',
                        'l_39': 'encoder.9.1.DenseReluDense.wi',
                        'l_40': 'encoder.9.1.DenseReluDense.dropout',
                        'l_41': 'encoder.9.1.DenseReluDense.wo',
                        'l_42': 'encoder.9.1.dropout',
                        'l_43': 'encoder.10.0.layer_norm',
                        'l_44': 'encoder.10.0.SelfAttention.q',
                        'l_45': 'encoder.10.0.SelfAttention.k',
                        'l_46': 'encoder.10.0.SelfAttention.v',
                        'l_47': 'encoder.10.0.SelfAttention.dropout',
                        'l_48': 'encoder.10.0.SelfAttention.o',
                        'l_49': 'encoder.10.0.dropout',
                        'l_50': 'encoder.10.1.layer_norm',
                        'l_51': 'encoder.10.1.DenseReluDense.wi',
                        'l_52': 'encoder.10.1.DenseReluDense.dropout',
                        'l_53': 'encoder.10.1.DenseReluDense.wo',
                        'l_54': 'encoder.10.1.dropout',
                        'l_55': 'encoder.11.0.layer_norm',
                        'l_56': 'encoder.11.0.SelfAttention.q',
                        'l_57': 'encoder.11.0.SelfAttention.k',
                        'l_58': 'encoder.11.0.SelfAttention.v',
                        'l_59': 'encoder.11.0.SelfAttention.dropout',
                        'l_60': 'encoder.11.0.SelfAttention.o',
                        'l_61': 'encoder.11.0.dropout',
                        'l_62': 'encoder.11.1.layer_norm',
                        'l_63': 'encoder.11.1.DenseReluDense.wi',
                        'l_64': 'encoder.11.1.DenseReluDense.dropout',
                        'l_65': 'encoder.11.1.DenseReluDense.wo',
                        'l_66': 'encoder.11.1.dropout',
                        'l_67': 'encoder.12.0.layer_norm',
                        'l_68': 'encoder.12.0.SelfAttention.q',
                        'l_69': 'encoder.12.0.SelfAttention.k',
                        'l_70': 'encoder.12.0.SelfAttention.v',
                        'l_71': 'encoder.12.0.SelfAttention.dropout',
                        'l_72': 'encoder.12.0.SelfAttention.o',
                        'l_73': 'encoder.12.0.dropout',
                        'l_74': 'encoder.12.1.layer_norm',
                        'l_75': 'encoder.12.1.DenseReluDense.wi',
                        'l_76': 'encoder.12.1.DenseReluDense.dropout',
                        'l_77': 'encoder.12.1.DenseReluDense.wo',
                        'l_78': 'encoder.12.1.dropout',
                        'l_79': 'encoder.13.0.layer_norm',
                        'l_80': 'encoder.13.0.SelfAttention.q',
                        'l_81': 'encoder.13.0.SelfAttention.k',
                        'l_82': 'encoder.13.0.SelfAttention.v',
                        'l_83': 'encoder.13.0.SelfAttention.dropout',
                        'l_84': 'encoder.13.0.SelfAttention.o'}
        self.to(self.device)

    def forward(self, *args):
        # T5ForConditionalGeneration/T5Stack[encoder]/T5Block[6]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Linear[o] <=> self.l_0
        # T5ForConditionalGeneration/T5Stack[encoder]/T5Block[6]/T5LayerSelfAttention[0]/Dropout[dropout] <=> self.l_1
        # T5ForConditionalGeneration/T5Stack[encoder]/T5Block[6]/T5LayerFF[1]/T5LayerNorm[layer_norm] <=> self.l_2
        # T5ForConditionalGeneration/T5Stack[encoder]/T5Block[6]/T5LayerFF[1]/T5DenseReluDense[DenseReluDense]/Linear[wi] <=> self.l_3
        # T5ForConditionalGeneration/T5Stack[encoder]/T5Block[6]/T5LayerFF[1]/T5DenseReluDense[DenseReluDense]/Dropout[dropout] <=> self.l_4
        # T5ForConditionalGeneration/T5Stack[encoder]/T5Block[6]/T5LayerFF[1]/T5DenseReluDense[DenseReluDense]/Linear[wo] <=> self.l_5
        # T5ForConditionalGeneration/T5Stack[encoder]/T5Block[6]/T5LayerFF[1]/Dropout[dropout] <=> self.l_6
        # T5ForConditionalGeneration/T5Stack[encoder]/T5Block[7]/T5LayerSelfAttention[0]/T5LayerNorm[layer_norm] <=> self.l_7
        # T5ForConditionalGeneration/T5Stack[encoder]/T5Block[7]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Linear[q] <=> self.l_8
        # T5ForConditionalGeneration/T5Stack[encoder]/T5Block[7]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Linear[k] <=> self.l_9
        # T5ForConditionalGeneration/T5Stack[encoder]/T5Block[7]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Linear[v] <=> self.l_10
        # T5ForConditionalGeneration/T5Stack[encoder]/T5Block[7]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Dropout[dropout] <=> self.l_11
        # T5ForConditionalGeneration/T5Stack[encoder]/T5Block[7]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Linear[o] <=> self.l_12
        # T5ForConditionalGeneration/T5Stack[encoder]/T5Block[7]/T5LayerSelfAttention[0]/Dropout[dropout] <=> self.l_13
        # T5ForConditionalGeneration/T5Stack[encoder]/T5Block[7]/T5LayerFF[1]/T5LayerNorm[layer_norm] <=> self.l_14
        # T5ForConditionalGeneration/T5Stack[encoder]/T5Block[7]/T5LayerFF[1]/T5DenseReluDense[DenseReluDense]/Linear[wi] <=> self.l_15
        # T5ForConditionalGeneration/T5Stack[encoder]/T5Block[7]/T5LayerFF[1]/T5DenseReluDense[DenseReluDense]/Dropout[dropout] <=> self.l_16
        # T5ForConditionalGeneration/T5Stack[encoder]/T5Block[7]/T5LayerFF[1]/T5DenseReluDense[DenseReluDense]/Linear[wo] <=> self.l_17
        # T5ForConditionalGeneration/T5Stack[encoder]/T5Block[7]/T5LayerFF[1]/Dropout[dropout] <=> self.l_18
        # T5ForConditionalGeneration/T5Stack[encoder]/T5Block[8]/T5LayerSelfAttention[0]/T5LayerNorm[layer_norm] <=> self.l_19
        # T5ForConditionalGeneration/T5Stack[encoder]/T5Block[8]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Linear[q] <=> self.l_20
        # T5ForConditionalGeneration/T5Stack[encoder]/T5Block[8]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Linear[k] <=> self.l_21
        # T5ForConditionalGeneration/T5Stack[encoder]/T5Block[8]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Linear[v] <=> self.l_22
        # T5ForConditionalGeneration/T5Stack[encoder]/T5Block[8]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Dropout[dropout] <=> self.l_23
        # T5ForConditionalGeneration/T5Stack[encoder]/T5Block[8]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Linear[o] <=> self.l_24
        # T5ForConditionalGeneration/T5Stack[encoder]/T5Block[8]/T5LayerSelfAttention[0]/Dropout[dropout] <=> self.l_25
        # T5ForConditionalGeneration/T5Stack[encoder]/T5Block[8]/T5LayerFF[1]/T5LayerNorm[layer_norm] <=> self.l_26
        # T5ForConditionalGeneration/T5Stack[encoder]/T5Block[8]/T5LayerFF[1]/T5DenseReluDense[DenseReluDense]/Linear[wi] <=> self.l_27
        # T5ForConditionalGeneration/T5Stack[encoder]/T5Block[8]/T5LayerFF[1]/T5DenseReluDense[DenseReluDense]/Dropout[dropout] <=> self.l_28
        # T5ForConditionalGeneration/T5Stack[encoder]/T5Block[8]/T5LayerFF[1]/T5DenseReluDense[DenseReluDense]/Linear[wo] <=> self.l_29
        # T5ForConditionalGeneration/T5Stack[encoder]/T5Block[8]/T5LayerFF[1]/Dropout[dropout] <=> self.l_30
        # T5ForConditionalGeneration/T5Stack[encoder]/T5Block[9]/T5LayerSelfAttention[0]/T5LayerNorm[layer_norm] <=> self.l_31
        # T5ForConditionalGeneration/T5Stack[encoder]/T5Block[9]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Linear[q] <=> self.l_32
        # T5ForConditionalGeneration/T5Stack[encoder]/T5Block[9]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Linear[k] <=> self.l_33
        # T5ForConditionalGeneration/T5Stack[encoder]/T5Block[9]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Linear[v] <=> self.l_34
        # T5ForConditionalGeneration/T5Stack[encoder]/T5Block[9]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Dropout[dropout] <=> self.l_35
        # T5ForConditionalGeneration/T5Stack[encoder]/T5Block[9]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Linear[o] <=> self.l_36
        # T5ForConditionalGeneration/T5Stack[encoder]/T5Block[9]/T5LayerSelfAttention[0]/Dropout[dropout] <=> self.l_37
        # T5ForConditionalGeneration/T5Stack[encoder]/T5Block[9]/T5LayerFF[1]/T5LayerNorm[layer_norm] <=> self.l_38
        # T5ForConditionalGeneration/T5Stack[encoder]/T5Block[9]/T5LayerFF[1]/T5DenseReluDense[DenseReluDense]/Linear[wi] <=> self.l_39
        # T5ForConditionalGeneration/T5Stack[encoder]/T5Block[9]/T5LayerFF[1]/T5DenseReluDense[DenseReluDense]/Dropout[dropout] <=> self.l_40
        # T5ForConditionalGeneration/T5Stack[encoder]/T5Block[9]/T5LayerFF[1]/T5DenseReluDense[DenseReluDense]/Linear[wo] <=> self.l_41
        # T5ForConditionalGeneration/T5Stack[encoder]/T5Block[9]/T5LayerFF[1]/Dropout[dropout] <=> self.l_42
        # T5ForConditionalGeneration/T5Stack[encoder]/T5Block[10]/T5LayerSelfAttention[0]/T5LayerNorm[layer_norm] <=> self.l_43
        # T5ForConditionalGeneration/T5Stack[encoder]/T5Block[10]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Linear[q] <=> self.l_44
        # T5ForConditionalGeneration/T5Stack[encoder]/T5Block[10]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Linear[k] <=> self.l_45
        # T5ForConditionalGeneration/T5Stack[encoder]/T5Block[10]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Linear[v] <=> self.l_46
        # T5ForConditionalGeneration/T5Stack[encoder]/T5Block[10]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Dropout[dropout] <=> self.l_47
        # T5ForConditionalGeneration/T5Stack[encoder]/T5Block[10]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Linear[o] <=> self.l_48
        # T5ForConditionalGeneration/T5Stack[encoder]/T5Block[10]/T5LayerSelfAttention[0]/Dropout[dropout] <=> self.l_49
        # T5ForConditionalGeneration/T5Stack[encoder]/T5Block[10]/T5LayerFF[1]/T5LayerNorm[layer_norm] <=> self.l_50
        # T5ForConditionalGeneration/T5Stack[encoder]/T5Block[10]/T5LayerFF[1]/T5DenseReluDense[DenseReluDense]/Linear[wi] <=> self.l_51
        # T5ForConditionalGeneration/T5Stack[encoder]/T5Block[10]/T5LayerFF[1]/T5DenseReluDense[DenseReluDense]/Dropout[dropout] <=> self.l_52
        # T5ForConditionalGeneration/T5Stack[encoder]/T5Block[10]/T5LayerFF[1]/T5DenseReluDense[DenseReluDense]/Linear[wo] <=> self.l_53
        # T5ForConditionalGeneration/T5Stack[encoder]/T5Block[10]/T5LayerFF[1]/Dropout[dropout] <=> self.l_54
        # T5ForConditionalGeneration/T5Stack[encoder]/T5Block[11]/T5LayerSelfAttention[0]/T5LayerNorm[layer_norm] <=> self.l_55
        # T5ForConditionalGeneration/T5Stack[encoder]/T5Block[11]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Linear[q] <=> self.l_56
        # T5ForConditionalGeneration/T5Stack[encoder]/T5Block[11]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Linear[k] <=> self.l_57
        # T5ForConditionalGeneration/T5Stack[encoder]/T5Block[11]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Linear[v] <=> self.l_58
        # T5ForConditionalGeneration/T5Stack[encoder]/T5Block[11]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Dropout[dropout] <=> self.l_59
        # T5ForConditionalGeneration/T5Stack[encoder]/T5Block[11]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Linear[o] <=> self.l_60
        # T5ForConditionalGeneration/T5Stack[encoder]/T5Block[11]/T5LayerSelfAttention[0]/Dropout[dropout] <=> self.l_61
        # T5ForConditionalGeneration/T5Stack[encoder]/T5Block[11]/T5LayerFF[1]/T5LayerNorm[layer_norm] <=> self.l_62
        # T5ForConditionalGeneration/T5Stack[encoder]/T5Block[11]/T5LayerFF[1]/T5DenseReluDense[DenseReluDense]/Linear[wi] <=> self.l_63
        # T5ForConditionalGeneration/T5Stack[encoder]/T5Block[11]/T5LayerFF[1]/T5DenseReluDense[DenseReluDense]/Dropout[dropout] <=> self.l_64
        # T5ForConditionalGeneration/T5Stack[encoder]/T5Block[11]/T5LayerFF[1]/T5DenseReluDense[DenseReluDense]/Linear[wo] <=> self.l_65
        # T5ForConditionalGeneration/T5Stack[encoder]/T5Block[11]/T5LayerFF[1]/Dropout[dropout] <=> self.l_66
        # T5ForConditionalGeneration/T5Stack[encoder]/T5Block[12]/T5LayerSelfAttention[0]/T5LayerNorm[layer_norm] <=> self.l_67
        # T5ForConditionalGeneration/T5Stack[encoder]/T5Block[12]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Linear[q] <=> self.l_68
        # T5ForConditionalGeneration/T5Stack[encoder]/T5Block[12]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Linear[k] <=> self.l_69
        # T5ForConditionalGeneration/T5Stack[encoder]/T5Block[12]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Linear[v] <=> self.l_70
        # T5ForConditionalGeneration/T5Stack[encoder]/T5Block[12]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Dropout[dropout] <=> self.l_71
        # T5ForConditionalGeneration/T5Stack[encoder]/T5Block[12]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Linear[o] <=> self.l_72
        # T5ForConditionalGeneration/T5Stack[encoder]/T5Block[12]/T5LayerSelfAttention[0]/Dropout[dropout] <=> self.l_73
        # T5ForConditionalGeneration/T5Stack[encoder]/T5Block[12]/T5LayerFF[1]/T5LayerNorm[layer_norm] <=> self.l_74
        # T5ForConditionalGeneration/T5Stack[encoder]/T5Block[12]/T5LayerFF[1]/T5DenseReluDense[DenseReluDense]/Linear[wi] <=> self.l_75
        # T5ForConditionalGeneration/T5Stack[encoder]/T5Block[12]/T5LayerFF[1]/T5DenseReluDense[DenseReluDense]/Dropout[dropout] <=> self.l_76
        # T5ForConditionalGeneration/T5Stack[encoder]/T5Block[12]/T5LayerFF[1]/T5DenseReluDense[DenseReluDense]/Linear[wo] <=> self.l_77
        # T5ForConditionalGeneration/T5Stack[encoder]/T5Block[12]/T5LayerFF[1]/Dropout[dropout] <=> self.l_78
        # T5ForConditionalGeneration/T5Stack[encoder]/T5Block[13]/T5LayerSelfAttention[0]/T5LayerNorm[layer_norm] <=> self.l_79
        # T5ForConditionalGeneration/T5Stack[encoder]/T5Block[13]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Linear[q] <=> self.l_80
        # T5ForConditionalGeneration/T5Stack[encoder]/T5Block[13]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Linear[k] <=> self.l_81
        # T5ForConditionalGeneration/T5Stack[encoder]/T5Block[13]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Linear[v] <=> self.l_82
        # T5ForConditionalGeneration/T5Stack[encoder]/T5Block[13]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Dropout[dropout] <=> self.l_83
        # T5ForConditionalGeneration/T5Stack[encoder]/T5Block[13]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Linear[o] <=> self.l_84
        # T5ForConditionalGeneration/T5Stack[encoder]/tuple::__getitem___149 <=> x0
        # T5ForConditionalGeneration/T5Stack[encoder]/T5Block[5]/T5LayerFF[1]/Tensor::__add___444 <=> x1
        # T5ForConditionalGeneration/T5Stack[encoder]/T5Block[6]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Tensor::view_492 <=> x2
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[0]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Tensor::size_1634 <=> x3

        # moving inputs to current device no op if already on the correct device
        x0, x1, x2, x3 = move_tensors(unflatten(args,self.input_structure), self.device)
        t_0 = self.l_0(x2)
        t_0 = self.l_1(t_0)
        t_0 = x1 + t_0
        t_1 = self.l_2(t_0)
        t_1 = self.l_3(t_1)
        t_1 = torch.nn.functional.relu(t_1, inplace=False)
        t_1 = self.l_4(t_1)
        t_1 = self.l_5(t_1)
        t_1 = self.l_6(t_1)
        t_1 = t_0 + t_1
        t_0 = self.l_7(t_1)
        t_2 = t_0.size()
        t_2 = t_2[0]
        t_3 = self.l_8(t_0)
        t_3 = t_3.view(t_2, -1, 32, 128)
        t_3 = t_3.transpose(1, 2)
        t_4 = self.l_9(t_0)
        t_4 = t_4.view(t_2, -1, 32, 128)
        t_4 = t_4.transpose(1, 2)
        t_0 = self.l_10(t_0)
        t_0 = t_0.view(t_2, -1, 32, 128)
        t_0 = t_0.transpose(1, 2)
        t_4 = t_4.transpose(3, 2)
        t_4 = torch.matmul(t_3, t_4)
        t_4 += x0
        t_3 = t_4.float()
        t_3 = torch.nn.functional.softmax(t_3, dim=-1, _stacklevel=3, dtype=None)
        t_4 = t_3.type_as(t_4)
        t_4 = self.l_11(t_4)
        t_0 = torch.matmul(t_4, t_0)
        t_0 = t_0.transpose(1, 2)
        t_0 = t_0.contiguous()
        t_2 = t_0.view(t_2, -1, 4096)
        t_2 = self.l_12(t_2)
        t_2 = self.l_13(t_2)
        t_2 = t_1 + t_2
        t_1 = self.l_14(t_2)
        t_1 = self.l_15(t_1)
        t_1 = torch.nn.functional.relu(t_1, inplace=False)
        t_1 = self.l_16(t_1)
        t_1 = self.l_17(t_1)
        t_1 = self.l_18(t_1)
        t_1 = t_2 + t_1
        t_2 = self.l_19(t_1)
        t_0 = t_2.size()
        t_0 = t_0[0]
        t_4 = self.l_20(t_2)
        t_4 = t_4.view(t_0, -1, 32, 128)
        t_4 = t_4.transpose(1, 2)
        t_3 = self.l_21(t_2)
        t_3 = t_3.view(t_0, -1, 32, 128)
        t_3 = t_3.transpose(1, 2)
        t_2 = self.l_22(t_2)
        t_2 = t_2.view(t_0, -1, 32, 128)
        t_2 = t_2.transpose(1, 2)
        t_3 = t_3.transpose(3, 2)
        t_3 = torch.matmul(t_4, t_3)
        t_3 += x0
        t_4 = t_3.float()
        t_4 = torch.nn.functional.softmax(t_4, dim=-1, _stacklevel=3, dtype=None)
        t_3 = t_4.type_as(t_3)
        t_3 = self.l_23(t_3)
        t_2 = torch.matmul(t_3, t_2)
        t_2 = t_2.transpose(1, 2)
        t_2 = t_2.contiguous()
        t_0 = t_2.view(t_0, -1, 4096)
        t_0 = self.l_24(t_0)
        t_0 = self.l_25(t_0)
        t_0 = t_1 + t_0
        t_1 = self.l_26(t_0)
        t_1 = self.l_27(t_1)
        t_1 = torch.nn.functional.relu(t_1, inplace=False)
        t_1 = self.l_28(t_1)
        t_1 = self.l_29(t_1)
        t_1 = self.l_30(t_1)
        t_1 = t_0 + t_1
        t_0 = self.l_31(t_1)
        t_2 = t_0.size()
        t_2 = t_2[0]
        t_3 = self.l_32(t_0)
        t_3 = t_3.view(t_2, -1, 32, 128)
        t_3 = t_3.transpose(1, 2)
        t_4 = self.l_33(t_0)
        t_4 = t_4.view(t_2, -1, 32, 128)
        t_4 = t_4.transpose(1, 2)
        t_0 = self.l_34(t_0)
        t_0 = t_0.view(t_2, -1, 32, 128)
        t_0 = t_0.transpose(1, 2)
        t_4 = t_4.transpose(3, 2)
        t_4 = torch.matmul(t_3, t_4)
        t_4 += x0
        t_3 = t_4.float()
        t_3 = torch.nn.functional.softmax(t_3, dim=-1, _stacklevel=3, dtype=None)
        t_4 = t_3.type_as(t_4)
        t_4 = self.l_35(t_4)
        t_0 = torch.matmul(t_4, t_0)
        t_0 = t_0.transpose(1, 2)
        t_0 = t_0.contiguous()
        t_2 = t_0.view(t_2, -1, 4096)
        t_2 = self.l_36(t_2)
        t_2 = self.l_37(t_2)
        t_2 = t_1 + t_2
        t_1 = self.l_38(t_2)
        t_1 = self.l_39(t_1)
        t_1 = torch.nn.functional.relu(t_1, inplace=False)
        t_1 = self.l_40(t_1)
        t_1 = self.l_41(t_1)
        t_1 = self.l_42(t_1)
        t_1 = t_2 + t_1
        t_2 = self.l_43(t_1)
        t_0 = t_2.size()
        t_0 = t_0[0]
        t_4 = self.l_44(t_2)
        t_4 = t_4.view(t_0, -1, 32, 128)
        t_4 = t_4.transpose(1, 2)
        t_3 = self.l_45(t_2)
        t_3 = t_3.view(t_0, -1, 32, 128)
        t_3 = t_3.transpose(1, 2)
        t_2 = self.l_46(t_2)
        t_2 = t_2.view(t_0, -1, 32, 128)
        t_2 = t_2.transpose(1, 2)
        t_3 = t_3.transpose(3, 2)
        t_3 = torch.matmul(t_4, t_3)
        t_3 += x0
        t_4 = t_3.float()
        t_4 = torch.nn.functional.softmax(t_4, dim=-1, _stacklevel=3, dtype=None)
        t_3 = t_4.type_as(t_3)
        t_3 = self.l_47(t_3)
        t_2 = torch.matmul(t_3, t_2)
        t_2 = t_2.transpose(1, 2)
        t_2 = t_2.contiguous()
        t_0 = t_2.view(t_0, -1, 4096)
        t_0 = self.l_48(t_0)
        t_0 = self.l_49(t_0)
        t_0 = t_1 + t_0
        t_1 = self.l_50(t_0)
        t_1 = self.l_51(t_1)
        t_1 = torch.nn.functional.relu(t_1, inplace=False)
        t_1 = self.l_52(t_1)
        t_1 = self.l_53(t_1)
        t_1 = self.l_54(t_1)
        t_1 = t_0 + t_1
        t_0 = self.l_55(t_1)
        t_2 = t_0.size()
        t_2 = t_2[0]
        t_3 = self.l_56(t_0)
        t_3 = t_3.view(t_2, -1, 32, 128)
        t_3 = t_3.transpose(1, 2)
        t_4 = self.l_57(t_0)
        t_4 = t_4.view(t_2, -1, 32, 128)
        t_4 = t_4.transpose(1, 2)
        t_0 = self.l_58(t_0)
        t_0 = t_0.view(t_2, -1, 32, 128)
        t_0 = t_0.transpose(1, 2)
        t_4 = t_4.transpose(3, 2)
        t_4 = torch.matmul(t_3, t_4)
        t_4 += x0
        t_3 = t_4.float()
        t_3 = torch.nn.functional.softmax(t_3, dim=-1, _stacklevel=3, dtype=None)
        t_4 = t_3.type_as(t_4)
        t_4 = self.l_59(t_4)
        t_0 = torch.matmul(t_4, t_0)
        t_0 = t_0.transpose(1, 2)
        t_0 = t_0.contiguous()
        t_2 = t_0.view(t_2, -1, 4096)
        t_2 = self.l_60(t_2)
        t_2 = self.l_61(t_2)
        t_2 = t_1 + t_2
        t_1 = self.l_62(t_2)
        t_1 = self.l_63(t_1)
        t_1 = torch.nn.functional.relu(t_1, inplace=False)
        t_1 = self.l_64(t_1)
        t_1 = self.l_65(t_1)
        t_1 = self.l_66(t_1)
        t_1 = t_2 + t_1
        t_2 = self.l_67(t_1)
        t_0 = t_2.size()
        t_0 = t_0[0]
        t_4 = self.l_68(t_2)
        t_4 = t_4.view(t_0, -1, 32, 128)
        t_4 = t_4.transpose(1, 2)
        t_3 = self.l_69(t_2)
        t_3 = t_3.view(t_0, -1, 32, 128)
        t_3 = t_3.transpose(1, 2)
        t_2 = self.l_70(t_2)
        t_2 = t_2.view(t_0, -1, 32, 128)
        t_2 = t_2.transpose(1, 2)
        t_3 = t_3.transpose(3, 2)
        t_3 = torch.matmul(t_4, t_3)
        t_3 += x0
        t_4 = t_3.float()
        t_4 = torch.nn.functional.softmax(t_4, dim=-1, _stacklevel=3, dtype=None)
        t_3 = t_4.type_as(t_3)
        t_3 = self.l_71(t_3)
        t_2 = torch.matmul(t_3, t_2)
        t_2 = t_2.transpose(1, 2)
        t_2 = t_2.contiguous()
        t_0 = t_2.view(t_0, -1, 4096)
        t_0 = self.l_72(t_0)
        t_0 = self.l_73(t_0)
        t_0 = t_1 + t_0
        t_1 = self.l_74(t_0)
        t_1 = self.l_75(t_1)
        t_1 = torch.nn.functional.relu(t_1, inplace=False)
        t_1 = self.l_76(t_1)
        t_1 = self.l_77(t_1)
        t_1 = self.l_78(t_1)
        t_1 = t_0 + t_1
        t_0 = self.l_79(t_1)
        t_2 = t_0.size()
        t_2 = t_2[0]
        t_3 = self.l_80(t_0)
        t_3 = t_3.view(t_2, -1, 32, 128)
        t_3 = t_3.transpose(1, 2)
        t_4 = self.l_81(t_0)
        t_4 = t_4.view(t_2, -1, 32, 128)
        t_4 = t_4.transpose(1, 2)
        t_0 = self.l_82(t_0)
        t_0 = t_0.view(t_2, -1, 32, 128)
        t_0 = t_0.transpose(1, 2)
        t_4 = t_4.transpose(3, 2)
        t_4 = torch.matmul(t_3, t_4)
        t_4 += x0
        t_3 = t_4.float()
        t_3 = torch.nn.functional.softmax(t_3, dim=-1, _stacklevel=3, dtype=None)
        t_4 = t_3.type_as(t_4)
        t_4 = self.l_83(t_4)
        t_0 = torch.matmul(t_4, t_0)
        t_0 = t_0.transpose(1, 2)
        t_0 = t_0.contiguous()
        t_2 = t_0.view(t_2, -1, 4096)
        t_2 = self.l_84(t_2)
        t_0 = x3[0]
        t_4 = x3[1]
        t_4 = torch.arange(t_4, dtype=torch.int64, device = self.device)
        # returning:
        # T5ForConditionalGeneration/T5Stack[encoder]/tuple::__getitem___149
        # T5ForConditionalGeneration/T5Stack[encoder]/T5Block[12]/T5LayerFF[1]/Tensor::__add___857
        # T5ForConditionalGeneration/T5Stack[encoder]/T5Block[13]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Linear[o]
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[0]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Size::__getitem___1636
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[0]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/torch::arange_1670
        return list(flatten((x0, t_1, t_2, t_0, t_4)))

    def state_dict(self,*args,**kwargs):
        # we return the state dict of this part as it should be in the original model
        return state_dict(self,*args,**kwargs)

    def load_state_dict(self, state):
        return load_state_dict(self,state)

    def named_parameters(self,recurse=True):
        # we return the named parameters of this part as it should be in the original model
        return named_parameters(self,recurse=recurse)

    def named_buffers(self,recurse=True):
        # we return the named buffers of this part as it should be in the original model
        return named_buffers(self,recurse=recurse)

    def cpu(self):
        return cpu(self)

    def cuda(self,device=None):
        return cuda(self,device=device)

    def to(self, *args, **kwargs):
        return to(self,*args,**kwargs)


class Partition2(nn.Module):
    LAYER_SCOPES=[
            'T5ForConditionalGeneration/T5Stack[encoder]/T5Block[13]/T5LayerSelfAttention[0]/Dropout[dropout]',
            'T5ForConditionalGeneration/T5Stack[encoder]/T5Block[13]/T5LayerFF[1]/T5LayerNorm[layer_norm]',
            'T5ForConditionalGeneration/T5Stack[encoder]/T5Block[13]/T5LayerFF[1]/T5DenseReluDense[DenseReluDense]/Linear[wi]',
            'T5ForConditionalGeneration/T5Stack[encoder]/T5Block[13]/T5LayerFF[1]/T5DenseReluDense[DenseReluDense]/Dropout[dropout]',
            'T5ForConditionalGeneration/T5Stack[encoder]/T5Block[13]/T5LayerFF[1]/T5DenseReluDense[DenseReluDense]/Linear[wo]',
            'T5ForConditionalGeneration/T5Stack[encoder]/T5Block[13]/T5LayerFF[1]/Dropout[dropout]',
            'T5ForConditionalGeneration/T5Stack[encoder]/T5Block[14]/T5LayerSelfAttention[0]/T5LayerNorm[layer_norm]',
            'T5ForConditionalGeneration/T5Stack[encoder]/T5Block[14]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Linear[q]',
            'T5ForConditionalGeneration/T5Stack[encoder]/T5Block[14]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Linear[k]',
            'T5ForConditionalGeneration/T5Stack[encoder]/T5Block[14]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Linear[v]',
            'T5ForConditionalGeneration/T5Stack[encoder]/T5Block[14]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Dropout[dropout]',
            'T5ForConditionalGeneration/T5Stack[encoder]/T5Block[14]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Linear[o]',
            'T5ForConditionalGeneration/T5Stack[encoder]/T5Block[14]/T5LayerSelfAttention[0]/Dropout[dropout]',
            'T5ForConditionalGeneration/T5Stack[encoder]/T5Block[14]/T5LayerFF[1]/T5LayerNorm[layer_norm]',
            'T5ForConditionalGeneration/T5Stack[encoder]/T5Block[14]/T5LayerFF[1]/T5DenseReluDense[DenseReluDense]/Linear[wi]',
            'T5ForConditionalGeneration/T5Stack[encoder]/T5Block[14]/T5LayerFF[1]/T5DenseReluDense[DenseReluDense]/Dropout[dropout]',
            'T5ForConditionalGeneration/T5Stack[encoder]/T5Block[14]/T5LayerFF[1]/T5DenseReluDense[DenseReluDense]/Linear[wo]',
            'T5ForConditionalGeneration/T5Stack[encoder]/T5Block[14]/T5LayerFF[1]/Dropout[dropout]',
            'T5ForConditionalGeneration/T5Stack[encoder]/T5Block[15]/T5LayerSelfAttention[0]/T5LayerNorm[layer_norm]',
            'T5ForConditionalGeneration/T5Stack[encoder]/T5Block[15]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Linear[q]',
            'T5ForConditionalGeneration/T5Stack[encoder]/T5Block[15]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Linear[k]',
            'T5ForConditionalGeneration/T5Stack[encoder]/T5Block[15]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Linear[v]',
            'T5ForConditionalGeneration/T5Stack[encoder]/T5Block[15]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Dropout[dropout]',
            'T5ForConditionalGeneration/T5Stack[encoder]/T5Block[15]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Linear[o]',
            'T5ForConditionalGeneration/T5Stack[encoder]/T5Block[15]/T5LayerSelfAttention[0]/Dropout[dropout]',
            'T5ForConditionalGeneration/T5Stack[encoder]/T5Block[15]/T5LayerFF[1]/T5LayerNorm[layer_norm]',
            'T5ForConditionalGeneration/T5Stack[encoder]/T5Block[15]/T5LayerFF[1]/T5DenseReluDense[DenseReluDense]/Linear[wi]',
            'T5ForConditionalGeneration/T5Stack[encoder]/T5Block[15]/T5LayerFF[1]/T5DenseReluDense[DenseReluDense]/Dropout[dropout]',
            'T5ForConditionalGeneration/T5Stack[encoder]/T5Block[15]/T5LayerFF[1]/T5DenseReluDense[DenseReluDense]/Linear[wo]',
            'T5ForConditionalGeneration/T5Stack[encoder]/T5Block[15]/T5LayerFF[1]/Dropout[dropout]',
            'T5ForConditionalGeneration/T5Stack[encoder]/T5Block[16]/T5LayerSelfAttention[0]/T5LayerNorm[layer_norm]',
            'T5ForConditionalGeneration/T5Stack[encoder]/T5Block[16]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Linear[q]',
            'T5ForConditionalGeneration/T5Stack[encoder]/T5Block[16]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Linear[k]',
            'T5ForConditionalGeneration/T5Stack[encoder]/T5Block[16]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Linear[v]',
            'T5ForConditionalGeneration/T5Stack[encoder]/T5Block[16]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Dropout[dropout]',
            'T5ForConditionalGeneration/T5Stack[encoder]/T5Block[16]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Linear[o]',
            'T5ForConditionalGeneration/T5Stack[encoder]/T5Block[16]/T5LayerSelfAttention[0]/Dropout[dropout]',
            'T5ForConditionalGeneration/T5Stack[encoder]/T5Block[16]/T5LayerFF[1]/T5LayerNorm[layer_norm]',
            'T5ForConditionalGeneration/T5Stack[encoder]/T5Block[16]/T5LayerFF[1]/T5DenseReluDense[DenseReluDense]/Linear[wi]',
            'T5ForConditionalGeneration/T5Stack[encoder]/T5Block[16]/T5LayerFF[1]/T5DenseReluDense[DenseReluDense]/Dropout[dropout]',
            'T5ForConditionalGeneration/T5Stack[encoder]/T5Block[16]/T5LayerFF[1]/T5DenseReluDense[DenseReluDense]/Linear[wo]',
            'T5ForConditionalGeneration/T5Stack[encoder]/T5Block[16]/T5LayerFF[1]/Dropout[dropout]',
            'T5ForConditionalGeneration/T5Stack[encoder]/T5Block[17]/T5LayerSelfAttention[0]/T5LayerNorm[layer_norm]',
            'T5ForConditionalGeneration/T5Stack[encoder]/T5Block[17]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Linear[q]',
            'T5ForConditionalGeneration/T5Stack[encoder]/T5Block[17]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Linear[k]',
            'T5ForConditionalGeneration/T5Stack[encoder]/T5Block[17]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Linear[v]',
            'T5ForConditionalGeneration/T5Stack[encoder]/T5Block[17]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Dropout[dropout]',
            'T5ForConditionalGeneration/T5Stack[encoder]/T5Block[17]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Linear[o]',
            'T5ForConditionalGeneration/T5Stack[encoder]/T5Block[17]/T5LayerSelfAttention[0]/Dropout[dropout]',
            'T5ForConditionalGeneration/T5Stack[encoder]/T5Block[17]/T5LayerFF[1]/T5LayerNorm[layer_norm]',
            'T5ForConditionalGeneration/T5Stack[encoder]/T5Block[17]/T5LayerFF[1]/T5DenseReluDense[DenseReluDense]/Linear[wi]',
            'T5ForConditionalGeneration/T5Stack[encoder]/T5Block[17]/T5LayerFF[1]/T5DenseReluDense[DenseReluDense]/Dropout[dropout]',
            'T5ForConditionalGeneration/T5Stack[encoder]/T5Block[17]/T5LayerFF[1]/T5DenseReluDense[DenseReluDense]/Linear[wo]',
            'T5ForConditionalGeneration/T5Stack[encoder]/T5Block[17]/T5LayerFF[1]/Dropout[dropout]',
            'T5ForConditionalGeneration/T5Stack[encoder]/T5Block[18]/T5LayerSelfAttention[0]/T5LayerNorm[layer_norm]',
            'T5ForConditionalGeneration/T5Stack[encoder]/T5Block[18]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Linear[q]',
            'T5ForConditionalGeneration/T5Stack[encoder]/T5Block[18]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Linear[k]',
            'T5ForConditionalGeneration/T5Stack[encoder]/T5Block[18]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Linear[v]',
            'T5ForConditionalGeneration/T5Stack[encoder]/T5Block[18]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Dropout[dropout]',
            'T5ForConditionalGeneration/T5Stack[encoder]/T5Block[18]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Linear[o]',
            'T5ForConditionalGeneration/T5Stack[encoder]/T5Block[18]/T5LayerSelfAttention[0]/Dropout[dropout]',
            'T5ForConditionalGeneration/T5Stack[encoder]/T5Block[18]/T5LayerFF[1]/T5LayerNorm[layer_norm]',
            'T5ForConditionalGeneration/T5Stack[encoder]/T5Block[18]/T5LayerFF[1]/T5DenseReluDense[DenseReluDense]/Linear[wi]',
            'T5ForConditionalGeneration/T5Stack[encoder]/T5Block[18]/T5LayerFF[1]/T5DenseReluDense[DenseReluDense]/Dropout[dropout]',
            'T5ForConditionalGeneration/T5Stack[encoder]/T5Block[18]/T5LayerFF[1]/T5DenseReluDense[DenseReluDense]/Linear[wo]',
            'T5ForConditionalGeneration/T5Stack[encoder]/T5Block[18]/T5LayerFF[1]/Dropout[dropout]',
            'T5ForConditionalGeneration/T5Stack[encoder]/T5Block[19]/T5LayerSelfAttention[0]/T5LayerNorm[layer_norm]',
            'T5ForConditionalGeneration/T5Stack[encoder]/T5Block[19]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Linear[q]',
            'T5ForConditionalGeneration/T5Stack[encoder]/T5Block[19]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Linear[k]',
            'T5ForConditionalGeneration/T5Stack[encoder]/T5Block[19]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Linear[v]',
            'T5ForConditionalGeneration/T5Stack[encoder]/T5Block[19]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Dropout[dropout]',
            'T5ForConditionalGeneration/T5Stack[encoder]/T5Block[19]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Linear[o]',
            'T5ForConditionalGeneration/T5Stack[encoder]/T5Block[19]/T5LayerSelfAttention[0]/Dropout[dropout]',
            'T5ForConditionalGeneration/T5Stack[encoder]/T5Block[19]/T5LayerFF[1]/T5LayerNorm[layer_norm]',
            'T5ForConditionalGeneration/T5Stack[encoder]/T5Block[19]/T5LayerFF[1]/T5DenseReluDense[DenseReluDense]/Linear[wi]',
            'T5ForConditionalGeneration/T5Stack[encoder]/T5Block[19]/T5LayerFF[1]/T5DenseReluDense[DenseReluDense]/Dropout[dropout]',
            'T5ForConditionalGeneration/T5Stack[encoder]/T5Block[19]/T5LayerFF[1]/T5DenseReluDense[DenseReluDense]/Linear[wo]',
            'T5ForConditionalGeneration/T5Stack[encoder]/T5Block[19]/T5LayerFF[1]/Dropout[dropout]',
            'T5ForConditionalGeneration/T5Stack[encoder]/T5Block[20]/T5LayerSelfAttention[0]/T5LayerNorm[layer_norm]',
            'T5ForConditionalGeneration/T5Stack[encoder]/T5Block[20]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Linear[q]',
            'T5ForConditionalGeneration/T5Stack[encoder]/T5Block[20]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Linear[k]',
            'T5ForConditionalGeneration/T5Stack[encoder]/T5Block[20]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Linear[v]',
            'T5ForConditionalGeneration/T5Stack[encoder]/T5Block[20]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Dropout[dropout]',
            'T5ForConditionalGeneration/T5Stack[encoder]/T5Block[20]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Linear[o]',
            'T5ForConditionalGeneration/T5Stack[encoder]/T5Block[20]/T5LayerSelfAttention[0]/Dropout[dropout]',
        ]
    TENSORS=[
        ]
    def __init__(self, layers, tensors, device='cuda:2'):
        super().__init__()

        #initialize partition layers
        for idx,layer_scope in enumerate(self.LAYER_SCOPES):
            self.add_module(f'l_{idx}',layers[layer_scope])

        #initialize partition tensors
        b=p=0
        for tensor_scope in self.TENSORS:
            tensor=tensors[tensor_scope]
            if isinstance(tensor,nn.Parameter):
                self.register_parameter(f'p_{p}',tensor)
                p+=1
            else:
                self.register_buffer(f'b_{b}',tensor)
                b+=1

        self.device = torch.device(device)
        self.input_structure = [1, 1, 1, (1, 1), 1, 1]
        self.lookup = { 'l_0': 'encoder.13.0.dropout',
                        'l_1': 'encoder.13.1.layer_norm',
                        'l_2': 'encoder.13.1.DenseReluDense.wi',
                        'l_3': 'encoder.13.1.DenseReluDense.dropout',
                        'l_4': 'encoder.13.1.DenseReluDense.wo',
                        'l_5': 'encoder.13.1.dropout',
                        'l_6': 'encoder.14.0.layer_norm',
                        'l_7': 'encoder.14.0.SelfAttention.q',
                        'l_8': 'encoder.14.0.SelfAttention.k',
                        'l_9': 'encoder.14.0.SelfAttention.v',
                        'l_10': 'encoder.14.0.SelfAttention.dropout',
                        'l_11': 'encoder.14.0.SelfAttention.o',
                        'l_12': 'encoder.14.0.dropout',
                        'l_13': 'encoder.14.1.layer_norm',
                        'l_14': 'encoder.14.1.DenseReluDense.wi',
                        'l_15': 'encoder.14.1.DenseReluDense.dropout',
                        'l_16': 'encoder.14.1.DenseReluDense.wo',
                        'l_17': 'encoder.14.1.dropout',
                        'l_18': 'encoder.15.0.layer_norm',
                        'l_19': 'encoder.15.0.SelfAttention.q',
                        'l_20': 'encoder.15.0.SelfAttention.k',
                        'l_21': 'encoder.15.0.SelfAttention.v',
                        'l_22': 'encoder.15.0.SelfAttention.dropout',
                        'l_23': 'encoder.15.0.SelfAttention.o',
                        'l_24': 'encoder.15.0.dropout',
                        'l_25': 'encoder.15.1.layer_norm',
                        'l_26': 'encoder.15.1.DenseReluDense.wi',
                        'l_27': 'encoder.15.1.DenseReluDense.dropout',
                        'l_28': 'encoder.15.1.DenseReluDense.wo',
                        'l_29': 'encoder.15.1.dropout',
                        'l_30': 'encoder.16.0.layer_norm',
                        'l_31': 'encoder.16.0.SelfAttention.q',
                        'l_32': 'encoder.16.0.SelfAttention.k',
                        'l_33': 'encoder.16.0.SelfAttention.v',
                        'l_34': 'encoder.16.0.SelfAttention.dropout',
                        'l_35': 'encoder.16.0.SelfAttention.o',
                        'l_36': 'encoder.16.0.dropout',
                        'l_37': 'encoder.16.1.layer_norm',
                        'l_38': 'encoder.16.1.DenseReluDense.wi',
                        'l_39': 'encoder.16.1.DenseReluDense.dropout',
                        'l_40': 'encoder.16.1.DenseReluDense.wo',
                        'l_41': 'encoder.16.1.dropout',
                        'l_42': 'encoder.17.0.layer_norm',
                        'l_43': 'encoder.17.0.SelfAttention.q',
                        'l_44': 'encoder.17.0.SelfAttention.k',
                        'l_45': 'encoder.17.0.SelfAttention.v',
                        'l_46': 'encoder.17.0.SelfAttention.dropout',
                        'l_47': 'encoder.17.0.SelfAttention.o',
                        'l_48': 'encoder.17.0.dropout',
                        'l_49': 'encoder.17.1.layer_norm',
                        'l_50': 'encoder.17.1.DenseReluDense.wi',
                        'l_51': 'encoder.17.1.DenseReluDense.dropout',
                        'l_52': 'encoder.17.1.DenseReluDense.wo',
                        'l_53': 'encoder.17.1.dropout',
                        'l_54': 'encoder.18.0.layer_norm',
                        'l_55': 'encoder.18.0.SelfAttention.q',
                        'l_56': 'encoder.18.0.SelfAttention.k',
                        'l_57': 'encoder.18.0.SelfAttention.v',
                        'l_58': 'encoder.18.0.SelfAttention.dropout',
                        'l_59': 'encoder.18.0.SelfAttention.o',
                        'l_60': 'encoder.18.0.dropout',
                        'l_61': 'encoder.18.1.layer_norm',
                        'l_62': 'encoder.18.1.DenseReluDense.wi',
                        'l_63': 'encoder.18.1.DenseReluDense.dropout',
                        'l_64': 'encoder.18.1.DenseReluDense.wo',
                        'l_65': 'encoder.18.1.dropout',
                        'l_66': 'encoder.19.0.layer_norm',
                        'l_67': 'encoder.19.0.SelfAttention.q',
                        'l_68': 'encoder.19.0.SelfAttention.k',
                        'l_69': 'encoder.19.0.SelfAttention.v',
                        'l_70': 'encoder.19.0.SelfAttention.dropout',
                        'l_71': 'encoder.19.0.SelfAttention.o',
                        'l_72': 'encoder.19.0.dropout',
                        'l_73': 'encoder.19.1.layer_norm',
                        'l_74': 'encoder.19.1.DenseReluDense.wi',
                        'l_75': 'encoder.19.1.DenseReluDense.dropout',
                        'l_76': 'encoder.19.1.DenseReluDense.wo',
                        'l_77': 'encoder.19.1.dropout',
                        'l_78': 'encoder.20.0.layer_norm',
                        'l_79': 'encoder.20.0.SelfAttention.q',
                        'l_80': 'encoder.20.0.SelfAttention.k',
                        'l_81': 'encoder.20.0.SelfAttention.v',
                        'l_82': 'encoder.20.0.SelfAttention.dropout',
                        'l_83': 'encoder.20.0.SelfAttention.o',
                        'l_84': 'encoder.20.0.dropout'}
        self.to(self.device)

    def forward(self, *args):
        # T5ForConditionalGeneration/T5Stack[encoder]/T5Block[13]/T5LayerSelfAttention[0]/Dropout[dropout] <=> self.l_0
        # T5ForConditionalGeneration/T5Stack[encoder]/T5Block[13]/T5LayerFF[1]/T5LayerNorm[layer_norm] <=> self.l_1
        # T5ForConditionalGeneration/T5Stack[encoder]/T5Block[13]/T5LayerFF[1]/T5DenseReluDense[DenseReluDense]/Linear[wi] <=> self.l_2
        # T5ForConditionalGeneration/T5Stack[encoder]/T5Block[13]/T5LayerFF[1]/T5DenseReluDense[DenseReluDense]/Dropout[dropout] <=> self.l_3
        # T5ForConditionalGeneration/T5Stack[encoder]/T5Block[13]/T5LayerFF[1]/T5DenseReluDense[DenseReluDense]/Linear[wo] <=> self.l_4
        # T5ForConditionalGeneration/T5Stack[encoder]/T5Block[13]/T5LayerFF[1]/Dropout[dropout] <=> self.l_5
        # T5ForConditionalGeneration/T5Stack[encoder]/T5Block[14]/T5LayerSelfAttention[0]/T5LayerNorm[layer_norm] <=> self.l_6
        # T5ForConditionalGeneration/T5Stack[encoder]/T5Block[14]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Linear[q] <=> self.l_7
        # T5ForConditionalGeneration/T5Stack[encoder]/T5Block[14]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Linear[k] <=> self.l_8
        # T5ForConditionalGeneration/T5Stack[encoder]/T5Block[14]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Linear[v] <=> self.l_9
        # T5ForConditionalGeneration/T5Stack[encoder]/T5Block[14]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Dropout[dropout] <=> self.l_10
        # T5ForConditionalGeneration/T5Stack[encoder]/T5Block[14]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Linear[o] <=> self.l_11
        # T5ForConditionalGeneration/T5Stack[encoder]/T5Block[14]/T5LayerSelfAttention[0]/Dropout[dropout] <=> self.l_12
        # T5ForConditionalGeneration/T5Stack[encoder]/T5Block[14]/T5LayerFF[1]/T5LayerNorm[layer_norm] <=> self.l_13
        # T5ForConditionalGeneration/T5Stack[encoder]/T5Block[14]/T5LayerFF[1]/T5DenseReluDense[DenseReluDense]/Linear[wi] <=> self.l_14
        # T5ForConditionalGeneration/T5Stack[encoder]/T5Block[14]/T5LayerFF[1]/T5DenseReluDense[DenseReluDense]/Dropout[dropout] <=> self.l_15
        # T5ForConditionalGeneration/T5Stack[encoder]/T5Block[14]/T5LayerFF[1]/T5DenseReluDense[DenseReluDense]/Linear[wo] <=> self.l_16
        # T5ForConditionalGeneration/T5Stack[encoder]/T5Block[14]/T5LayerFF[1]/Dropout[dropout] <=> self.l_17
        # T5ForConditionalGeneration/T5Stack[encoder]/T5Block[15]/T5LayerSelfAttention[0]/T5LayerNorm[layer_norm] <=> self.l_18
        # T5ForConditionalGeneration/T5Stack[encoder]/T5Block[15]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Linear[q] <=> self.l_19
        # T5ForConditionalGeneration/T5Stack[encoder]/T5Block[15]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Linear[k] <=> self.l_20
        # T5ForConditionalGeneration/T5Stack[encoder]/T5Block[15]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Linear[v] <=> self.l_21
        # T5ForConditionalGeneration/T5Stack[encoder]/T5Block[15]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Dropout[dropout] <=> self.l_22
        # T5ForConditionalGeneration/T5Stack[encoder]/T5Block[15]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Linear[o] <=> self.l_23
        # T5ForConditionalGeneration/T5Stack[encoder]/T5Block[15]/T5LayerSelfAttention[0]/Dropout[dropout] <=> self.l_24
        # T5ForConditionalGeneration/T5Stack[encoder]/T5Block[15]/T5LayerFF[1]/T5LayerNorm[layer_norm] <=> self.l_25
        # T5ForConditionalGeneration/T5Stack[encoder]/T5Block[15]/T5LayerFF[1]/T5DenseReluDense[DenseReluDense]/Linear[wi] <=> self.l_26
        # T5ForConditionalGeneration/T5Stack[encoder]/T5Block[15]/T5LayerFF[1]/T5DenseReluDense[DenseReluDense]/Dropout[dropout] <=> self.l_27
        # T5ForConditionalGeneration/T5Stack[encoder]/T5Block[15]/T5LayerFF[1]/T5DenseReluDense[DenseReluDense]/Linear[wo] <=> self.l_28
        # T5ForConditionalGeneration/T5Stack[encoder]/T5Block[15]/T5LayerFF[1]/Dropout[dropout] <=> self.l_29
        # T5ForConditionalGeneration/T5Stack[encoder]/T5Block[16]/T5LayerSelfAttention[0]/T5LayerNorm[layer_norm] <=> self.l_30
        # T5ForConditionalGeneration/T5Stack[encoder]/T5Block[16]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Linear[q] <=> self.l_31
        # T5ForConditionalGeneration/T5Stack[encoder]/T5Block[16]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Linear[k] <=> self.l_32
        # T5ForConditionalGeneration/T5Stack[encoder]/T5Block[16]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Linear[v] <=> self.l_33
        # T5ForConditionalGeneration/T5Stack[encoder]/T5Block[16]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Dropout[dropout] <=> self.l_34
        # T5ForConditionalGeneration/T5Stack[encoder]/T5Block[16]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Linear[o] <=> self.l_35
        # T5ForConditionalGeneration/T5Stack[encoder]/T5Block[16]/T5LayerSelfAttention[0]/Dropout[dropout] <=> self.l_36
        # T5ForConditionalGeneration/T5Stack[encoder]/T5Block[16]/T5LayerFF[1]/T5LayerNorm[layer_norm] <=> self.l_37
        # T5ForConditionalGeneration/T5Stack[encoder]/T5Block[16]/T5LayerFF[1]/T5DenseReluDense[DenseReluDense]/Linear[wi] <=> self.l_38
        # T5ForConditionalGeneration/T5Stack[encoder]/T5Block[16]/T5LayerFF[1]/T5DenseReluDense[DenseReluDense]/Dropout[dropout] <=> self.l_39
        # T5ForConditionalGeneration/T5Stack[encoder]/T5Block[16]/T5LayerFF[1]/T5DenseReluDense[DenseReluDense]/Linear[wo] <=> self.l_40
        # T5ForConditionalGeneration/T5Stack[encoder]/T5Block[16]/T5LayerFF[1]/Dropout[dropout] <=> self.l_41
        # T5ForConditionalGeneration/T5Stack[encoder]/T5Block[17]/T5LayerSelfAttention[0]/T5LayerNorm[layer_norm] <=> self.l_42
        # T5ForConditionalGeneration/T5Stack[encoder]/T5Block[17]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Linear[q] <=> self.l_43
        # T5ForConditionalGeneration/T5Stack[encoder]/T5Block[17]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Linear[k] <=> self.l_44
        # T5ForConditionalGeneration/T5Stack[encoder]/T5Block[17]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Linear[v] <=> self.l_45
        # T5ForConditionalGeneration/T5Stack[encoder]/T5Block[17]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Dropout[dropout] <=> self.l_46
        # T5ForConditionalGeneration/T5Stack[encoder]/T5Block[17]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Linear[o] <=> self.l_47
        # T5ForConditionalGeneration/T5Stack[encoder]/T5Block[17]/T5LayerSelfAttention[0]/Dropout[dropout] <=> self.l_48
        # T5ForConditionalGeneration/T5Stack[encoder]/T5Block[17]/T5LayerFF[1]/T5LayerNorm[layer_norm] <=> self.l_49
        # T5ForConditionalGeneration/T5Stack[encoder]/T5Block[17]/T5LayerFF[1]/T5DenseReluDense[DenseReluDense]/Linear[wi] <=> self.l_50
        # T5ForConditionalGeneration/T5Stack[encoder]/T5Block[17]/T5LayerFF[1]/T5DenseReluDense[DenseReluDense]/Dropout[dropout] <=> self.l_51
        # T5ForConditionalGeneration/T5Stack[encoder]/T5Block[17]/T5LayerFF[1]/T5DenseReluDense[DenseReluDense]/Linear[wo] <=> self.l_52
        # T5ForConditionalGeneration/T5Stack[encoder]/T5Block[17]/T5LayerFF[1]/Dropout[dropout] <=> self.l_53
        # T5ForConditionalGeneration/T5Stack[encoder]/T5Block[18]/T5LayerSelfAttention[0]/T5LayerNorm[layer_norm] <=> self.l_54
        # T5ForConditionalGeneration/T5Stack[encoder]/T5Block[18]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Linear[q] <=> self.l_55
        # T5ForConditionalGeneration/T5Stack[encoder]/T5Block[18]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Linear[k] <=> self.l_56
        # T5ForConditionalGeneration/T5Stack[encoder]/T5Block[18]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Linear[v] <=> self.l_57
        # T5ForConditionalGeneration/T5Stack[encoder]/T5Block[18]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Dropout[dropout] <=> self.l_58
        # T5ForConditionalGeneration/T5Stack[encoder]/T5Block[18]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Linear[o] <=> self.l_59
        # T5ForConditionalGeneration/T5Stack[encoder]/T5Block[18]/T5LayerSelfAttention[0]/Dropout[dropout] <=> self.l_60
        # T5ForConditionalGeneration/T5Stack[encoder]/T5Block[18]/T5LayerFF[1]/T5LayerNorm[layer_norm] <=> self.l_61
        # T5ForConditionalGeneration/T5Stack[encoder]/T5Block[18]/T5LayerFF[1]/T5DenseReluDense[DenseReluDense]/Linear[wi] <=> self.l_62
        # T5ForConditionalGeneration/T5Stack[encoder]/T5Block[18]/T5LayerFF[1]/T5DenseReluDense[DenseReluDense]/Dropout[dropout] <=> self.l_63
        # T5ForConditionalGeneration/T5Stack[encoder]/T5Block[18]/T5LayerFF[1]/T5DenseReluDense[DenseReluDense]/Linear[wo] <=> self.l_64
        # T5ForConditionalGeneration/T5Stack[encoder]/T5Block[18]/T5LayerFF[1]/Dropout[dropout] <=> self.l_65
        # T5ForConditionalGeneration/T5Stack[encoder]/T5Block[19]/T5LayerSelfAttention[0]/T5LayerNorm[layer_norm] <=> self.l_66
        # T5ForConditionalGeneration/T5Stack[encoder]/T5Block[19]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Linear[q] <=> self.l_67
        # T5ForConditionalGeneration/T5Stack[encoder]/T5Block[19]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Linear[k] <=> self.l_68
        # T5ForConditionalGeneration/T5Stack[encoder]/T5Block[19]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Linear[v] <=> self.l_69
        # T5ForConditionalGeneration/T5Stack[encoder]/T5Block[19]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Dropout[dropout] <=> self.l_70
        # T5ForConditionalGeneration/T5Stack[encoder]/T5Block[19]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Linear[o] <=> self.l_71
        # T5ForConditionalGeneration/T5Stack[encoder]/T5Block[19]/T5LayerSelfAttention[0]/Dropout[dropout] <=> self.l_72
        # T5ForConditionalGeneration/T5Stack[encoder]/T5Block[19]/T5LayerFF[1]/T5LayerNorm[layer_norm] <=> self.l_73
        # T5ForConditionalGeneration/T5Stack[encoder]/T5Block[19]/T5LayerFF[1]/T5DenseReluDense[DenseReluDense]/Linear[wi] <=> self.l_74
        # T5ForConditionalGeneration/T5Stack[encoder]/T5Block[19]/T5LayerFF[1]/T5DenseReluDense[DenseReluDense]/Dropout[dropout] <=> self.l_75
        # T5ForConditionalGeneration/T5Stack[encoder]/T5Block[19]/T5LayerFF[1]/T5DenseReluDense[DenseReluDense]/Linear[wo] <=> self.l_76
        # T5ForConditionalGeneration/T5Stack[encoder]/T5Block[19]/T5LayerFF[1]/Dropout[dropout] <=> self.l_77
        # T5ForConditionalGeneration/T5Stack[encoder]/T5Block[20]/T5LayerSelfAttention[0]/T5LayerNorm[layer_norm] <=> self.l_78
        # T5ForConditionalGeneration/T5Stack[encoder]/T5Block[20]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Linear[q] <=> self.l_79
        # T5ForConditionalGeneration/T5Stack[encoder]/T5Block[20]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Linear[k] <=> self.l_80
        # T5ForConditionalGeneration/T5Stack[encoder]/T5Block[20]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Linear[v] <=> self.l_81
        # T5ForConditionalGeneration/T5Stack[encoder]/T5Block[20]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Dropout[dropout] <=> self.l_82
        # T5ForConditionalGeneration/T5Stack[encoder]/T5Block[20]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Linear[o] <=> self.l_83
        # T5ForConditionalGeneration/T5Stack[encoder]/T5Block[20]/T5LayerSelfAttention[0]/Dropout[dropout] <=> self.l_84
        # T5ForConditionalGeneration/T5Stack[encoder]/tuple::__getitem___149 <=> x0
        # T5ForConditionalGeneration/T5Stack[encoder]/T5Block[12]/T5LayerFF[1]/Tensor::__add___857 <=> x1
        # T5ForConditionalGeneration/T5Stack[encoder]/T5Block[13]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Linear[o] <=> x2
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[0]/T5LayerSelfAttention[0]/prim::TupleConstruct_1628 <=> x3
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[0]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Size::__getitem___1636 <=> x4
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[0]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Linear[q] <=> x5

        # moving inputs to current device no op if already on the correct device
        x0, x1, x2, x3, x4, x5 = move_tensors(unflatten(args,self.input_structure), self.device)
        t_0 = self.l_0(x2)
        t_0 = x1 + t_0
        t_1 = self.l_1(t_0)
        t_1 = self.l_2(t_1)
        t_1 = torch.nn.functional.relu(t_1, inplace=False)
        t_1 = self.l_3(t_1)
        t_1 = self.l_4(t_1)
        t_1 = self.l_5(t_1)
        t_1 = t_0 + t_1
        t_0 = self.l_6(t_1)
        t_2 = t_0.size()
        t_2 = t_2[0]
        t_3 = self.l_7(t_0)
        t_3 = t_3.view(t_2, -1, 32, 128)
        t_3 = t_3.transpose(1, 2)
        t_4 = self.l_8(t_0)
        t_4 = t_4.view(t_2, -1, 32, 128)
        t_4 = t_4.transpose(1, 2)
        t_0 = self.l_9(t_0)
        t_0 = t_0.view(t_2, -1, 32, 128)
        t_0 = t_0.transpose(1, 2)
        t_4 = t_4.transpose(3, 2)
        t_4 = torch.matmul(t_3, t_4)
        t_4 += x0
        t_3 = t_4.float()
        t_3 = torch.nn.functional.softmax(t_3, dim=-1, _stacklevel=3, dtype=None)
        t_4 = t_3.type_as(t_4)
        t_4 = self.l_10(t_4)
        t_0 = torch.matmul(t_4, t_0)
        t_0 = t_0.transpose(1, 2)
        t_0 = t_0.contiguous()
        t_2 = t_0.view(t_2, -1, 4096)
        t_2 = self.l_11(t_2)
        t_2 = self.l_12(t_2)
        t_2 = t_1 + t_2
        t_1 = self.l_13(t_2)
        t_1 = self.l_14(t_1)
        t_1 = torch.nn.functional.relu(t_1, inplace=False)
        t_1 = self.l_15(t_1)
        t_1 = self.l_16(t_1)
        t_1 = self.l_17(t_1)
        t_1 = t_2 + t_1
        t_2 = self.l_18(t_1)
        t_0 = t_2.size()
        t_0 = t_0[0]
        t_4 = self.l_19(t_2)
        t_4 = t_4.view(t_0, -1, 32, 128)
        t_4 = t_4.transpose(1, 2)
        t_3 = self.l_20(t_2)
        t_3 = t_3.view(t_0, -1, 32, 128)
        t_3 = t_3.transpose(1, 2)
        t_2 = self.l_21(t_2)
        t_2 = t_2.view(t_0, -1, 32, 128)
        t_2 = t_2.transpose(1, 2)
        t_3 = t_3.transpose(3, 2)
        t_3 = torch.matmul(t_4, t_3)
        t_3 += x0
        t_4 = t_3.float()
        t_4 = torch.nn.functional.softmax(t_4, dim=-1, _stacklevel=3, dtype=None)
        t_3 = t_4.type_as(t_3)
        t_3 = self.l_22(t_3)
        t_2 = torch.matmul(t_3, t_2)
        t_2 = t_2.transpose(1, 2)
        t_2 = t_2.contiguous()
        t_0 = t_2.view(t_0, -1, 4096)
        t_0 = self.l_23(t_0)
        t_0 = self.l_24(t_0)
        t_0 = t_1 + t_0
        t_1 = self.l_25(t_0)
        t_1 = self.l_26(t_1)
        t_1 = torch.nn.functional.relu(t_1, inplace=False)
        t_1 = self.l_27(t_1)
        t_1 = self.l_28(t_1)
        t_1 = self.l_29(t_1)
        t_1 = t_0 + t_1
        t_0 = self.l_30(t_1)
        t_2 = t_0.size()
        t_2 = t_2[0]
        t_3 = self.l_31(t_0)
        t_3 = t_3.view(t_2, -1, 32, 128)
        t_3 = t_3.transpose(1, 2)
        t_4 = self.l_32(t_0)
        t_4 = t_4.view(t_2, -1, 32, 128)
        t_4 = t_4.transpose(1, 2)
        t_0 = self.l_33(t_0)
        t_0 = t_0.view(t_2, -1, 32, 128)
        t_0 = t_0.transpose(1, 2)
        t_4 = t_4.transpose(3, 2)
        t_4 = torch.matmul(t_3, t_4)
        t_4 += x0
        t_3 = t_4.float()
        t_3 = torch.nn.functional.softmax(t_3, dim=-1, _stacklevel=3, dtype=None)
        t_4 = t_3.type_as(t_4)
        t_4 = self.l_34(t_4)
        t_0 = torch.matmul(t_4, t_0)
        t_0 = t_0.transpose(1, 2)
        t_0 = t_0.contiguous()
        t_2 = t_0.view(t_2, -1, 4096)
        t_2 = self.l_35(t_2)
        t_2 = self.l_36(t_2)
        t_2 = t_1 + t_2
        t_1 = self.l_37(t_2)
        t_1 = self.l_38(t_1)
        t_1 = torch.nn.functional.relu(t_1, inplace=False)
        t_1 = self.l_39(t_1)
        t_1 = self.l_40(t_1)
        t_1 = self.l_41(t_1)
        t_1 = t_2 + t_1
        t_2 = self.l_42(t_1)
        t_0 = t_2.size()
        t_0 = t_0[0]
        t_4 = self.l_43(t_2)
        t_4 = t_4.view(t_0, -1, 32, 128)
        t_4 = t_4.transpose(1, 2)
        t_3 = self.l_44(t_2)
        t_3 = t_3.view(t_0, -1, 32, 128)
        t_3 = t_3.transpose(1, 2)
        t_2 = self.l_45(t_2)
        t_2 = t_2.view(t_0, -1, 32, 128)
        t_2 = t_2.transpose(1, 2)
        t_3 = t_3.transpose(3, 2)
        t_3 = torch.matmul(t_4, t_3)
        t_3 += x0
        t_4 = t_3.float()
        t_4 = torch.nn.functional.softmax(t_4, dim=-1, _stacklevel=3, dtype=None)
        t_3 = t_4.type_as(t_3)
        t_3 = self.l_46(t_3)
        t_2 = torch.matmul(t_3, t_2)
        t_2 = t_2.transpose(1, 2)
        t_2 = t_2.contiguous()
        t_0 = t_2.view(t_0, -1, 4096)
        t_0 = self.l_47(t_0)
        t_0 = self.l_48(t_0)
        t_0 = t_1 + t_0
        t_1 = self.l_49(t_0)
        t_1 = self.l_50(t_1)
        t_1 = torch.nn.functional.relu(t_1, inplace=False)
        t_1 = self.l_51(t_1)
        t_1 = self.l_52(t_1)
        t_1 = self.l_53(t_1)
        t_1 = t_0 + t_1
        t_0 = self.l_54(t_1)
        t_2 = t_0.size()
        t_2 = t_2[0]
        t_3 = self.l_55(t_0)
        t_3 = t_3.view(t_2, -1, 32, 128)
        t_3 = t_3.transpose(1, 2)
        t_4 = self.l_56(t_0)
        t_4 = t_4.view(t_2, -1, 32, 128)
        t_4 = t_4.transpose(1, 2)
        t_0 = self.l_57(t_0)
        t_0 = t_0.view(t_2, -1, 32, 128)
        t_0 = t_0.transpose(1, 2)
        t_4 = t_4.transpose(3, 2)
        t_4 = torch.matmul(t_3, t_4)
        t_4 += x0
        t_3 = t_4.float()
        t_3 = torch.nn.functional.softmax(t_3, dim=-1, _stacklevel=3, dtype=None)
        t_4 = t_3.type_as(t_4)
        t_4 = self.l_58(t_4)
        t_0 = torch.matmul(t_4, t_0)
        t_0 = t_0.transpose(1, 2)
        t_0 = t_0.contiguous()
        t_2 = t_0.view(t_2, -1, 4096)
        t_2 = self.l_59(t_2)
        t_2 = self.l_60(t_2)
        t_2 = t_1 + t_2
        t_1 = self.l_61(t_2)
        t_1 = self.l_62(t_1)
        t_1 = torch.nn.functional.relu(t_1, inplace=False)
        t_1 = self.l_63(t_1)
        t_1 = self.l_64(t_1)
        t_1 = self.l_65(t_1)
        t_1 = t_2 + t_1
        t_2 = self.l_66(t_1)
        t_0 = t_2.size()
        t_0 = t_0[0]
        t_4 = self.l_67(t_2)
        t_4 = t_4.view(t_0, -1, 32, 128)
        t_4 = t_4.transpose(1, 2)
        t_3 = self.l_68(t_2)
        t_3 = t_3.view(t_0, -1, 32, 128)
        t_3 = t_3.transpose(1, 2)
        t_2 = self.l_69(t_2)
        t_2 = t_2.view(t_0, -1, 32, 128)
        t_2 = t_2.transpose(1, 2)
        t_3 = t_3.transpose(3, 2)
        t_3 = torch.matmul(t_4, t_3)
        t_3 += x0
        t_4 = t_3.float()
        t_4 = torch.nn.functional.softmax(t_4, dim=-1, _stacklevel=3, dtype=None)
        t_3 = t_4.type_as(t_3)
        t_3 = self.l_70(t_3)
        t_2 = torch.matmul(t_3, t_2)
        t_2 = t_2.transpose(1, 2)
        t_2 = t_2.contiguous()
        t_0 = t_2.view(t_0, -1, 4096)
        t_0 = self.l_71(t_0)
        t_0 = self.l_72(t_0)
        t_0 = t_1 + t_0
        t_1 = self.l_73(t_0)
        t_1 = self.l_74(t_1)
        t_1 = torch.nn.functional.relu(t_1, inplace=False)
        t_1 = self.l_75(t_1)
        t_1 = self.l_76(t_1)
        t_1 = self.l_77(t_1)
        t_1 = t_0 + t_1
        t_0 = self.l_78(t_1)
        t_2 = t_0.size()
        t_2 = t_2[0]
        t_3 = self.l_79(t_0)
        t_3 = t_3.view(t_2, -1, 32, 128)
        t_3 = t_3.transpose(1, 2)
        t_4 = self.l_80(t_0)
        t_4 = t_4.view(t_2, -1, 32, 128)
        t_4 = t_4.transpose(1, 2)
        t_0 = self.l_81(t_0)
        t_0 = t_0.view(t_2, -1, 32, 128)
        t_0 = t_0.transpose(1, 2)
        t_4 = t_4.transpose(3, 2)
        t_4 = torch.matmul(t_3, t_4)
        t_4 += x0
        t_3 = t_4.float()
        t_3 = torch.nn.functional.softmax(t_3, dim=-1, _stacklevel=3, dtype=None)
        t_4 = t_3.type_as(t_4)
        t_4 = self.l_82(t_4)
        t_0 = torch.matmul(t_4, t_0)
        t_0 = t_0.transpose(1, 2)
        t_0 = t_0.contiguous()
        t_2 = t_0.view(t_2, -1, 4096)
        t_2 = self.l_83(t_2)
        t_2 = self.l_84(t_2)
        t_0 = x3[1]
        t_4 = x5.view(x4, -1, 32, 128)
        t_4 = t_4.transpose(1, 2)
        # returning:
        # T5ForConditionalGeneration/T5Stack[encoder]/tuple::__getitem___149
        # T5ForConditionalGeneration/T5Stack[encoder]/T5Block[19]/T5LayerFF[1]/Tensor::__add___1270
        # T5ForConditionalGeneration/T5Stack[encoder]/T5Block[20]/T5LayerSelfAttention[0]/Dropout[dropout]
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[0]/tuple::__getitem___1632
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[0]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Size::__getitem___1636
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[0]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Tensor::transpose_1648
        return list(flatten((x0, t_1, t_2, t_0, x4, t_4)))

    def state_dict(self,*args,**kwargs):
        # we return the state dict of this part as it should be in the original model
        return state_dict(self,*args,**kwargs)

    def load_state_dict(self, state):
        return load_state_dict(self,state)

    def named_parameters(self,recurse=True):
        # we return the named parameters of this part as it should be in the original model
        return named_parameters(self,recurse=recurse)

    def named_buffers(self,recurse=True):
        # we return the named buffers of this part as it should be in the original model
        return named_buffers(self,recurse=recurse)

    def cpu(self):
        return cpu(self)

    def cuda(self,device=None):
        return cuda(self,device=device)

    def to(self, *args, **kwargs):
        return to(self,*args,**kwargs)


class Partition3(nn.Module):
    LAYER_SCOPES=[
            'T5ForConditionalGeneration/T5Stack[encoder]/T5Block[20]/T5LayerFF[1]/T5LayerNorm[layer_norm]',
            'T5ForConditionalGeneration/T5Stack[encoder]/T5Block[20]/T5LayerFF[1]/T5DenseReluDense[DenseReluDense]/Linear[wi]',
            'T5ForConditionalGeneration/T5Stack[encoder]/T5Block[20]/T5LayerFF[1]/T5DenseReluDense[DenseReluDense]/Dropout[dropout]',
            'T5ForConditionalGeneration/T5Stack[encoder]/T5Block[20]/T5LayerFF[1]/T5DenseReluDense[DenseReluDense]/Linear[wo]',
            'T5ForConditionalGeneration/T5Stack[encoder]/T5Block[20]/T5LayerFF[1]/Dropout[dropout]',
            'T5ForConditionalGeneration/T5Stack[encoder]/T5Block[21]/T5LayerSelfAttention[0]/T5LayerNorm[layer_norm]',
            'T5ForConditionalGeneration/T5Stack[encoder]/T5Block[21]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Linear[q]',
            'T5ForConditionalGeneration/T5Stack[encoder]/T5Block[21]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Linear[k]',
            'T5ForConditionalGeneration/T5Stack[encoder]/T5Block[21]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Linear[v]',
            'T5ForConditionalGeneration/T5Stack[encoder]/T5Block[21]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Dropout[dropout]',
            'T5ForConditionalGeneration/T5Stack[encoder]/T5Block[21]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Linear[o]',
            'T5ForConditionalGeneration/T5Stack[encoder]/T5Block[21]/T5LayerSelfAttention[0]/Dropout[dropout]',
            'T5ForConditionalGeneration/T5Stack[encoder]/T5Block[21]/T5LayerFF[1]/T5LayerNorm[layer_norm]',
            'T5ForConditionalGeneration/T5Stack[encoder]/T5Block[21]/T5LayerFF[1]/T5DenseReluDense[DenseReluDense]/Linear[wi]',
            'T5ForConditionalGeneration/T5Stack[encoder]/T5Block[21]/T5LayerFF[1]/T5DenseReluDense[DenseReluDense]/Dropout[dropout]',
            'T5ForConditionalGeneration/T5Stack[encoder]/T5Block[21]/T5LayerFF[1]/T5DenseReluDense[DenseReluDense]/Linear[wo]',
            'T5ForConditionalGeneration/T5Stack[encoder]/T5Block[21]/T5LayerFF[1]/Dropout[dropout]',
            'T5ForConditionalGeneration/T5Stack[encoder]/T5Block[22]/T5LayerSelfAttention[0]/T5LayerNorm[layer_norm]',
            'T5ForConditionalGeneration/T5Stack[encoder]/T5Block[22]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Linear[q]',
            'T5ForConditionalGeneration/T5Stack[encoder]/T5Block[22]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Linear[k]',
            'T5ForConditionalGeneration/T5Stack[encoder]/T5Block[22]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Linear[v]',
            'T5ForConditionalGeneration/T5Stack[encoder]/T5Block[22]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Dropout[dropout]',
            'T5ForConditionalGeneration/T5Stack[encoder]/T5Block[22]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Linear[o]',
            'T5ForConditionalGeneration/T5Stack[encoder]/T5Block[22]/T5LayerSelfAttention[0]/Dropout[dropout]',
            'T5ForConditionalGeneration/T5Stack[encoder]/T5Block[22]/T5LayerFF[1]/T5LayerNorm[layer_norm]',
            'T5ForConditionalGeneration/T5Stack[encoder]/T5Block[22]/T5LayerFF[1]/T5DenseReluDense[DenseReluDense]/Linear[wi]',
            'T5ForConditionalGeneration/T5Stack[encoder]/T5Block[22]/T5LayerFF[1]/T5DenseReluDense[DenseReluDense]/Dropout[dropout]',
            'T5ForConditionalGeneration/T5Stack[encoder]/T5Block[22]/T5LayerFF[1]/T5DenseReluDense[DenseReluDense]/Linear[wo]',
            'T5ForConditionalGeneration/T5Stack[encoder]/T5Block[22]/T5LayerFF[1]/Dropout[dropout]',
            'T5ForConditionalGeneration/T5Stack[encoder]/T5Block[23]/T5LayerSelfAttention[0]/T5LayerNorm[layer_norm]',
            'T5ForConditionalGeneration/T5Stack[encoder]/T5Block[23]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Linear[q]',
            'T5ForConditionalGeneration/T5Stack[encoder]/T5Block[23]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Linear[k]',
            'T5ForConditionalGeneration/T5Stack[encoder]/T5Block[23]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Linear[v]',
            'T5ForConditionalGeneration/T5Stack[encoder]/T5Block[23]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Dropout[dropout]',
            'T5ForConditionalGeneration/T5Stack[encoder]/T5Block[23]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Linear[o]',
            'T5ForConditionalGeneration/T5Stack[encoder]/T5Block[23]/T5LayerSelfAttention[0]/Dropout[dropout]',
            'T5ForConditionalGeneration/T5Stack[encoder]/T5Block[23]/T5LayerFF[1]/T5LayerNorm[layer_norm]',
            'T5ForConditionalGeneration/T5Stack[encoder]/T5Block[23]/T5LayerFF[1]/T5DenseReluDense[DenseReluDense]/Linear[wi]',
            'T5ForConditionalGeneration/T5Stack[encoder]/T5Block[23]/T5LayerFF[1]/T5DenseReluDense[DenseReluDense]/Dropout[dropout]',
            'T5ForConditionalGeneration/T5Stack[encoder]/T5Block[23]/T5LayerFF[1]/T5DenseReluDense[DenseReluDense]/Linear[wo]',
            'T5ForConditionalGeneration/T5Stack[encoder]/T5Block[23]/T5LayerFF[1]/Dropout[dropout]',
            'T5ForConditionalGeneration/T5Stack[encoder]/T5LayerNorm[final_layer_norm]',
            'T5ForConditionalGeneration/T5Stack[encoder]/Dropout[dropout]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[0]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Linear[v]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[1]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Linear[k]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[1]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Linear[v]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[2]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Linear[k]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[2]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Linear[v]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[3]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Linear[k]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[3]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Linear[v]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[4]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Linear[k]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[4]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Linear[v]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[5]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Linear[k]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[5]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Linear[v]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[6]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Linear[k]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[6]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Linear[v]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[7]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Linear[k]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[7]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Linear[v]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[8]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Linear[k]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[8]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Linear[v]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[9]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Linear[k]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[9]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Linear[v]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[10]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Linear[k]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[10]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Linear[v]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[11]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Linear[k]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[11]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Linear[v]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[12]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Linear[k]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[12]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Linear[v]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[13]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Linear[k]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[13]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Linear[v]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[14]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Linear[k]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[14]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Linear[v]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[15]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Linear[k]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[15]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Linear[v]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[16]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Linear[k]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[16]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Linear[v]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[17]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Linear[k]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[18]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Linear[k]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[18]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Linear[v]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[19]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Linear[k]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[19]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Linear[v]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[20]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Linear[k]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[20]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Linear[v]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[21]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Linear[k]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[21]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Linear[v]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[22]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Linear[k]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[22]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Linear[v]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[23]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Linear[k]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[23]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Linear[v]',
        ]
    TENSORS=[
        ]
    def __init__(self, layers, tensors, device='cuda:3'):
        super().__init__()

        #initialize partition layers
        for idx,layer_scope in enumerate(self.LAYER_SCOPES):
            self.add_module(f'l_{idx}',layers[layer_scope])

        #initialize partition tensors
        b=p=0
        for tensor_scope in self.TENSORS:
            tensor=tensors[tensor_scope]
            if isinstance(tensor,nn.Parameter):
                self.register_parameter(f'p_{p}',tensor)
                p+=1
            else:
                self.register_buffer(f'b_{b}',tensor)
                b+=1

        self.device = torch.device(device)
        self.input_structure = [1, 1, 1, 1, 1]
        self.lookup = { 'l_0': 'encoder.20.1.layer_norm',
                        'l_1': 'encoder.20.1.DenseReluDense.wi',
                        'l_2': 'encoder.20.1.DenseReluDense.dropout',
                        'l_3': 'encoder.20.1.DenseReluDense.wo',
                        'l_4': 'encoder.20.1.dropout',
                        'l_5': 'encoder.21.0.layer_norm',
                        'l_6': 'encoder.21.0.SelfAttention.q',
                        'l_7': 'encoder.21.0.SelfAttention.k',
                        'l_8': 'encoder.21.0.SelfAttention.v',
                        'l_9': 'encoder.21.0.SelfAttention.dropout',
                        'l_10': 'encoder.21.0.SelfAttention.o',
                        'l_11': 'encoder.21.0.dropout',
                        'l_12': 'encoder.21.1.layer_norm',
                        'l_13': 'encoder.21.1.DenseReluDense.wi',
                        'l_14': 'encoder.21.1.DenseReluDense.dropout',
                        'l_15': 'encoder.21.1.DenseReluDense.wo',
                        'l_16': 'encoder.21.1.dropout',
                        'l_17': 'encoder.22.0.layer_norm',
                        'l_18': 'encoder.22.0.SelfAttention.q',
                        'l_19': 'encoder.22.0.SelfAttention.k',
                        'l_20': 'encoder.22.0.SelfAttention.v',
                        'l_21': 'encoder.22.0.SelfAttention.dropout',
                        'l_22': 'encoder.22.0.SelfAttention.o',
                        'l_23': 'encoder.22.0.dropout',
                        'l_24': 'encoder.22.1.layer_norm',
                        'l_25': 'encoder.22.1.DenseReluDense.wi',
                        'l_26': 'encoder.22.1.DenseReluDense.dropout',
                        'l_27': 'encoder.22.1.DenseReluDense.wo',
                        'l_28': 'encoder.22.1.dropout',
                        'l_29': 'encoder.23.0.layer_norm',
                        'l_30': 'encoder.23.0.SelfAttention.q',
                        'l_31': 'encoder.23.0.SelfAttention.k',
                        'l_32': 'encoder.23.0.SelfAttention.v',
                        'l_33': 'encoder.23.0.SelfAttention.dropout',
                        'l_34': 'encoder.23.0.SelfAttention.o',
                        'l_35': 'encoder.23.0.dropout',
                        'l_36': 'encoder.23.1.layer_norm',
                        'l_37': 'encoder.23.1.DenseReluDense.wi',
                        'l_38': 'encoder.23.1.DenseReluDense.dropout',
                        'l_39': 'encoder.23.1.DenseReluDense.wo',
                        'l_40': 'encoder.23.1.dropout',
                        'l_41': 'encoder.final_layer_norm',
                        'l_42': 'encoder.dropout',
                        'l_43': 'decoder.0.1.EncDecAttention.v',
                        'l_44': 'decoder.1.1.EncDecAttention.k',
                        'l_45': 'decoder.1.1.EncDecAttention.v',
                        'l_46': 'decoder.2.1.EncDecAttention.k',
                        'l_47': 'decoder.2.1.EncDecAttention.v',
                        'l_48': 'decoder.3.1.EncDecAttention.k',
                        'l_49': 'decoder.3.1.EncDecAttention.v',
                        'l_50': 'decoder.4.1.EncDecAttention.k',
                        'l_51': 'decoder.4.1.EncDecAttention.v',
                        'l_52': 'decoder.5.1.EncDecAttention.k',
                        'l_53': 'decoder.5.1.EncDecAttention.v',
                        'l_54': 'decoder.6.1.EncDecAttention.k',
                        'l_55': 'decoder.6.1.EncDecAttention.v',
                        'l_56': 'decoder.7.1.EncDecAttention.k',
                        'l_57': 'decoder.7.1.EncDecAttention.v',
                        'l_58': 'decoder.8.1.EncDecAttention.k',
                        'l_59': 'decoder.8.1.EncDecAttention.v',
                        'l_60': 'decoder.9.1.EncDecAttention.k',
                        'l_61': 'decoder.9.1.EncDecAttention.v',
                        'l_62': 'decoder.10.1.EncDecAttention.k',
                        'l_63': 'decoder.10.1.EncDecAttention.v',
                        'l_64': 'decoder.11.1.EncDecAttention.k',
                        'l_65': 'decoder.11.1.EncDecAttention.v',
                        'l_66': 'decoder.12.1.EncDecAttention.k',
                        'l_67': 'decoder.12.1.EncDecAttention.v',
                        'l_68': 'decoder.13.1.EncDecAttention.k',
                        'l_69': 'decoder.13.1.EncDecAttention.v',
                        'l_70': 'decoder.14.1.EncDecAttention.k',
                        'l_71': 'decoder.14.1.EncDecAttention.v',
                        'l_72': 'decoder.15.1.EncDecAttention.k',
                        'l_73': 'decoder.15.1.EncDecAttention.v',
                        'l_74': 'decoder.16.1.EncDecAttention.k',
                        'l_75': 'decoder.16.1.EncDecAttention.v',
                        'l_76': 'decoder.17.1.EncDecAttention.k',
                        'l_77': 'decoder.18.1.EncDecAttention.k',
                        'l_78': 'decoder.18.1.EncDecAttention.v',
                        'l_79': 'decoder.19.1.EncDecAttention.k',
                        'l_80': 'decoder.19.1.EncDecAttention.v',
                        'l_81': 'decoder.20.1.EncDecAttention.k',
                        'l_82': 'decoder.20.1.EncDecAttention.v',
                        'l_83': 'decoder.21.1.EncDecAttention.k',
                        'l_84': 'decoder.21.1.EncDecAttention.v',
                        'l_85': 'decoder.22.1.EncDecAttention.k',
                        'l_86': 'decoder.22.1.EncDecAttention.v',
                        'l_87': 'decoder.23.1.EncDecAttention.k',
                        'l_88': 'decoder.23.1.EncDecAttention.v'}
        self.to(self.device)

    def forward(self, *args):
        # T5ForConditionalGeneration/T5Stack[encoder]/T5Block[20]/T5LayerFF[1]/T5LayerNorm[layer_norm] <=> self.l_0
        # T5ForConditionalGeneration/T5Stack[encoder]/T5Block[20]/T5LayerFF[1]/T5DenseReluDense[DenseReluDense]/Linear[wi] <=> self.l_1
        # T5ForConditionalGeneration/T5Stack[encoder]/T5Block[20]/T5LayerFF[1]/T5DenseReluDense[DenseReluDense]/Dropout[dropout] <=> self.l_2
        # T5ForConditionalGeneration/T5Stack[encoder]/T5Block[20]/T5LayerFF[1]/T5DenseReluDense[DenseReluDense]/Linear[wo] <=> self.l_3
        # T5ForConditionalGeneration/T5Stack[encoder]/T5Block[20]/T5LayerFF[1]/Dropout[dropout] <=> self.l_4
        # T5ForConditionalGeneration/T5Stack[encoder]/T5Block[21]/T5LayerSelfAttention[0]/T5LayerNorm[layer_norm] <=> self.l_5
        # T5ForConditionalGeneration/T5Stack[encoder]/T5Block[21]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Linear[q] <=> self.l_6
        # T5ForConditionalGeneration/T5Stack[encoder]/T5Block[21]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Linear[k] <=> self.l_7
        # T5ForConditionalGeneration/T5Stack[encoder]/T5Block[21]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Linear[v] <=> self.l_8
        # T5ForConditionalGeneration/T5Stack[encoder]/T5Block[21]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Dropout[dropout] <=> self.l_9
        # T5ForConditionalGeneration/T5Stack[encoder]/T5Block[21]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Linear[o] <=> self.l_10
        # T5ForConditionalGeneration/T5Stack[encoder]/T5Block[21]/T5LayerSelfAttention[0]/Dropout[dropout] <=> self.l_11
        # T5ForConditionalGeneration/T5Stack[encoder]/T5Block[21]/T5LayerFF[1]/T5LayerNorm[layer_norm] <=> self.l_12
        # T5ForConditionalGeneration/T5Stack[encoder]/T5Block[21]/T5LayerFF[1]/T5DenseReluDense[DenseReluDense]/Linear[wi] <=> self.l_13
        # T5ForConditionalGeneration/T5Stack[encoder]/T5Block[21]/T5LayerFF[1]/T5DenseReluDense[DenseReluDense]/Dropout[dropout] <=> self.l_14
        # T5ForConditionalGeneration/T5Stack[encoder]/T5Block[21]/T5LayerFF[1]/T5DenseReluDense[DenseReluDense]/Linear[wo] <=> self.l_15
        # T5ForConditionalGeneration/T5Stack[encoder]/T5Block[21]/T5LayerFF[1]/Dropout[dropout] <=> self.l_16
        # T5ForConditionalGeneration/T5Stack[encoder]/T5Block[22]/T5LayerSelfAttention[0]/T5LayerNorm[layer_norm] <=> self.l_17
        # T5ForConditionalGeneration/T5Stack[encoder]/T5Block[22]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Linear[q] <=> self.l_18
        # T5ForConditionalGeneration/T5Stack[encoder]/T5Block[22]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Linear[k] <=> self.l_19
        # T5ForConditionalGeneration/T5Stack[encoder]/T5Block[22]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Linear[v] <=> self.l_20
        # T5ForConditionalGeneration/T5Stack[encoder]/T5Block[22]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Dropout[dropout] <=> self.l_21
        # T5ForConditionalGeneration/T5Stack[encoder]/T5Block[22]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Linear[o] <=> self.l_22
        # T5ForConditionalGeneration/T5Stack[encoder]/T5Block[22]/T5LayerSelfAttention[0]/Dropout[dropout] <=> self.l_23
        # T5ForConditionalGeneration/T5Stack[encoder]/T5Block[22]/T5LayerFF[1]/T5LayerNorm[layer_norm] <=> self.l_24
        # T5ForConditionalGeneration/T5Stack[encoder]/T5Block[22]/T5LayerFF[1]/T5DenseReluDense[DenseReluDense]/Linear[wi] <=> self.l_25
        # T5ForConditionalGeneration/T5Stack[encoder]/T5Block[22]/T5LayerFF[1]/T5DenseReluDense[DenseReluDense]/Dropout[dropout] <=> self.l_26
        # T5ForConditionalGeneration/T5Stack[encoder]/T5Block[22]/T5LayerFF[1]/T5DenseReluDense[DenseReluDense]/Linear[wo] <=> self.l_27
        # T5ForConditionalGeneration/T5Stack[encoder]/T5Block[22]/T5LayerFF[1]/Dropout[dropout] <=> self.l_28
        # T5ForConditionalGeneration/T5Stack[encoder]/T5Block[23]/T5LayerSelfAttention[0]/T5LayerNorm[layer_norm] <=> self.l_29
        # T5ForConditionalGeneration/T5Stack[encoder]/T5Block[23]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Linear[q] <=> self.l_30
        # T5ForConditionalGeneration/T5Stack[encoder]/T5Block[23]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Linear[k] <=> self.l_31
        # T5ForConditionalGeneration/T5Stack[encoder]/T5Block[23]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Linear[v] <=> self.l_32
        # T5ForConditionalGeneration/T5Stack[encoder]/T5Block[23]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Dropout[dropout] <=> self.l_33
        # T5ForConditionalGeneration/T5Stack[encoder]/T5Block[23]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Linear[o] <=> self.l_34
        # T5ForConditionalGeneration/T5Stack[encoder]/T5Block[23]/T5LayerSelfAttention[0]/Dropout[dropout] <=> self.l_35
        # T5ForConditionalGeneration/T5Stack[encoder]/T5Block[23]/T5LayerFF[1]/T5LayerNorm[layer_norm] <=> self.l_36
        # T5ForConditionalGeneration/T5Stack[encoder]/T5Block[23]/T5LayerFF[1]/T5DenseReluDense[DenseReluDense]/Linear[wi] <=> self.l_37
        # T5ForConditionalGeneration/T5Stack[encoder]/T5Block[23]/T5LayerFF[1]/T5DenseReluDense[DenseReluDense]/Dropout[dropout] <=> self.l_38
        # T5ForConditionalGeneration/T5Stack[encoder]/T5Block[23]/T5LayerFF[1]/T5DenseReluDense[DenseReluDense]/Linear[wo] <=> self.l_39
        # T5ForConditionalGeneration/T5Stack[encoder]/T5Block[23]/T5LayerFF[1]/Dropout[dropout] <=> self.l_40
        # T5ForConditionalGeneration/T5Stack[encoder]/T5LayerNorm[final_layer_norm] <=> self.l_41
        # T5ForConditionalGeneration/T5Stack[encoder]/Dropout[dropout] <=> self.l_42
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[0]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Linear[v] <=> self.l_43
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[1]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Linear[k] <=> self.l_44
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[1]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Linear[v] <=> self.l_45
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[2]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Linear[k] <=> self.l_46
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[2]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Linear[v] <=> self.l_47
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[3]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Linear[k] <=> self.l_48
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[3]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Linear[v] <=> self.l_49
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[4]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Linear[k] <=> self.l_50
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[4]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Linear[v] <=> self.l_51
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[5]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Linear[k] <=> self.l_52
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[5]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Linear[v] <=> self.l_53
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[6]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Linear[k] <=> self.l_54
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[6]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Linear[v] <=> self.l_55
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[7]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Linear[k] <=> self.l_56
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[7]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Linear[v] <=> self.l_57
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[8]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Linear[k] <=> self.l_58
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[8]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Linear[v] <=> self.l_59
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[9]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Linear[k] <=> self.l_60
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[9]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Linear[v] <=> self.l_61
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[10]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Linear[k] <=> self.l_62
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[10]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Linear[v] <=> self.l_63
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[11]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Linear[k] <=> self.l_64
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[11]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Linear[v] <=> self.l_65
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[12]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Linear[k] <=> self.l_66
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[12]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Linear[v] <=> self.l_67
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[13]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Linear[k] <=> self.l_68
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[13]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Linear[v] <=> self.l_69
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[14]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Linear[k] <=> self.l_70
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[14]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Linear[v] <=> self.l_71
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[15]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Linear[k] <=> self.l_72
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[15]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Linear[v] <=> self.l_73
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[16]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Linear[k] <=> self.l_74
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[16]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Linear[v] <=> self.l_75
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[17]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Linear[k] <=> self.l_76
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[18]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Linear[k] <=> self.l_77
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[18]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Linear[v] <=> self.l_78
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[19]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Linear[k] <=> self.l_79
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[19]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Linear[v] <=> self.l_80
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[20]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Linear[k] <=> self.l_81
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[20]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Linear[v] <=> self.l_82
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[21]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Linear[k] <=> self.l_83
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[21]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Linear[v] <=> self.l_84
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[22]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Linear[k] <=> self.l_85
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[22]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Linear[v] <=> self.l_86
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[23]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Linear[k] <=> self.l_87
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[23]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Linear[v] <=> self.l_88
        # T5ForConditionalGeneration/T5Stack[encoder]/tuple::__getitem___149 <=> x0
        # T5ForConditionalGeneration/T5Stack[encoder]/T5Block[19]/T5LayerFF[1]/Tensor::__add___1270 <=> x1
        # T5ForConditionalGeneration/T5Stack[encoder]/T5Block[20]/T5LayerSelfAttention[0]/Dropout[dropout] <=> x2
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[0]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Size::__getitem___1636 <=> x3
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[0]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/torch::arange_1670 <=> x4

        # moving inputs to current device no op if already on the correct device
        x0, x1, x2, x3, x4 = move_tensors(unflatten(args,self.input_structure), self.device)
        t_0 = x1 + x2
        t_1 = self.l_0(t_0)
        t_1 = self.l_1(t_1)
        t_1 = torch.nn.functional.relu(t_1, inplace=False)
        t_1 = self.l_2(t_1)
        t_1 = self.l_3(t_1)
        t_1 = self.l_4(t_1)
        t_1 = t_0 + t_1
        t_0 = self.l_5(t_1)
        t_2 = t_0.size()
        t_2 = t_2[0]
        t_3 = self.l_6(t_0)
        t_3 = t_3.view(t_2, -1, 32, 128)
        t_3 = t_3.transpose(1, 2)
        t_4 = self.l_7(t_0)
        t_4 = t_4.view(t_2, -1, 32, 128)
        t_4 = t_4.transpose(1, 2)
        t_0 = self.l_8(t_0)
        t_0 = t_0.view(t_2, -1, 32, 128)
        t_0 = t_0.transpose(1, 2)
        t_4 = t_4.transpose(3, 2)
        t_4 = torch.matmul(t_3, t_4)
        t_4 += x0
        t_3 = t_4.float()
        t_3 = torch.nn.functional.softmax(t_3, dim=-1, _stacklevel=3, dtype=None)
        t_4 = t_3.type_as(t_4)
        t_4 = self.l_9(t_4)
        t_0 = torch.matmul(t_4, t_0)
        t_0 = t_0.transpose(1, 2)
        t_0 = t_0.contiguous()
        t_2 = t_0.view(t_2, -1, 4096)
        t_2 = self.l_10(t_2)
        t_2 = self.l_11(t_2)
        t_2 = t_1 + t_2
        t_1 = self.l_12(t_2)
        t_1 = self.l_13(t_1)
        t_1 = torch.nn.functional.relu(t_1, inplace=False)
        t_1 = self.l_14(t_1)
        t_1 = self.l_15(t_1)
        t_1 = self.l_16(t_1)
        t_1 = t_2 + t_1
        t_2 = self.l_17(t_1)
        t_0 = t_2.size()
        t_0 = t_0[0]
        t_4 = self.l_18(t_2)
        t_4 = t_4.view(t_0, -1, 32, 128)
        t_4 = t_4.transpose(1, 2)
        t_3 = self.l_19(t_2)
        t_3 = t_3.view(t_0, -1, 32, 128)
        t_3 = t_3.transpose(1, 2)
        t_2 = self.l_20(t_2)
        t_2 = t_2.view(t_0, -1, 32, 128)
        t_2 = t_2.transpose(1, 2)
        t_3 = t_3.transpose(3, 2)
        t_3 = torch.matmul(t_4, t_3)
        t_3 += x0
        t_4 = t_3.float()
        t_4 = torch.nn.functional.softmax(t_4, dim=-1, _stacklevel=3, dtype=None)
        t_3 = t_4.type_as(t_3)
        t_3 = self.l_21(t_3)
        t_2 = torch.matmul(t_3, t_2)
        t_2 = t_2.transpose(1, 2)
        t_2 = t_2.contiguous()
        t_0 = t_2.view(t_0, -1, 4096)
        t_0 = self.l_22(t_0)
        t_0 = self.l_23(t_0)
        t_0 = t_1 + t_0
        t_1 = self.l_24(t_0)
        t_1 = self.l_25(t_1)
        t_1 = torch.nn.functional.relu(t_1, inplace=False)
        t_1 = self.l_26(t_1)
        t_1 = self.l_27(t_1)
        t_1 = self.l_28(t_1)
        t_1 = t_0 + t_1
        t_0 = self.l_29(t_1)
        t_2 = t_0.size()
        t_2 = t_2[0]
        t_3 = self.l_30(t_0)
        t_3 = t_3.view(t_2, -1, 32, 128)
        t_3 = t_3.transpose(1, 2)
        t_4 = self.l_31(t_0)
        t_4 = t_4.view(t_2, -1, 32, 128)
        t_4 = t_4.transpose(1, 2)
        t_0 = self.l_32(t_0)
        t_0 = t_0.view(t_2, -1, 32, 128)
        t_0 = t_0.transpose(1, 2)
        t_4 = t_4.transpose(3, 2)
        t_4 = torch.matmul(t_3, t_4)
        t_4 += x0
        t_3 = t_4.float()
        t_3 = torch.nn.functional.softmax(t_3, dim=-1, _stacklevel=3, dtype=None)
        t_4 = t_3.type_as(t_4)
        t_4 = self.l_33(t_4)
        t_0 = torch.matmul(t_4, t_0)
        t_0 = t_0.transpose(1, 2)
        t_0 = t_0.contiguous()
        t_2 = t_0.view(t_2, -1, 4096)
        t_2 = self.l_34(t_2)
        t_2 = self.l_35(t_2)
        t_2 = t_1 + t_2
        t_1 = self.l_36(t_2)
        t_1 = self.l_37(t_1)
        t_1 = torch.nn.functional.relu(t_1, inplace=False)
        t_1 = self.l_38(t_1)
        t_1 = self.l_39(t_1)
        t_1 = self.l_40(t_1)
        t_1 = t_2 + t_1
        t_1 = self.l_41(t_1)
        t_1 = self.l_42(t_1)
        t_2 = t_1.size(1)
        t_0 = self.l_43(t_1)
        t_0 = t_0.view(x3, -1, 32, 128)
        t_0 = t_0.transpose(1, 2)
        t_4 = slice(None, None, None)
        t_4 = (t_4, None)
        t_4 = x4[t_4]
        t_2 = torch.arange(t_2, dtype=torch.int64, device = self.device)
        t_3 = slice(None, None, None)
        t_3 = (None, t_3)
        t_3 = t_2[t_3]
        t_4 = t_3 - t_4
        t_4 = -t_4
        t_3 = self.l_44(t_1)
        t_2 = self.l_45(t_1)
        t_5 = self.l_46(t_1)
        t_6 = self.l_47(t_1)
        t_7 = self.l_48(t_1)
        t_8 = self.l_49(t_1)
        t_9 = self.l_50(t_1)
        t_10 = self.l_51(t_1)
        t_11 = self.l_52(t_1)
        t_12 = self.l_53(t_1)
        t_13 = self.l_54(t_1)
        t_14 = self.l_55(t_1)
        t_15 = self.l_56(t_1)
        t_16 = self.l_57(t_1)
        t_17 = self.l_58(t_1)
        t_18 = self.l_59(t_1)
        t_19 = self.l_60(t_1)
        t_20 = self.l_61(t_1)
        t_21 = self.l_62(t_1)
        t_22 = self.l_63(t_1)
        t_23 = self.l_64(t_1)
        t_24 = self.l_65(t_1)
        t_25 = self.l_66(t_1)
        t_26 = self.l_67(t_1)
        t_27 = self.l_68(t_1)
        t_28 = self.l_69(t_1)
        t_29 = self.l_70(t_1)
        t_30 = self.l_71(t_1)
        t_31 = self.l_72(t_1)
        t_32 = self.l_73(t_1)
        t_33 = self.l_74(t_1)
        t_34 = self.l_75(t_1)
        t_35 = self.l_76(t_1)
        t_36 = self.l_77(t_1)
        t_37 = self.l_78(t_1)
        t_38 = self.l_79(t_1)
        t_39 = self.l_80(t_1)
        t_40 = self.l_81(t_1)
        t_41 = self.l_82(t_1)
        t_42 = self.l_83(t_1)
        t_43 = self.l_84(t_1)
        t_44 = self.l_85(t_1)
        t_45 = self.l_86(t_1)
        t_46 = self.l_87(t_1)
        t_47 = self.l_88(t_1)
        # returning:
        # T5ForConditionalGeneration/T5Stack[encoder]/Dropout[dropout]
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[0]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Size::__getitem___1636
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[0]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Tensor::transpose_1664
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[0]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Tensor::__neg___1688
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[1]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Linear[k]
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[1]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Linear[v]
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[2]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Linear[k]
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[2]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Linear[v]
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[3]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Linear[k]
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[3]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Linear[v]
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[4]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Linear[k]
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[4]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Linear[v]
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[5]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Linear[k]
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[5]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Linear[v]
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[6]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Linear[k]
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[6]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Linear[v]
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[7]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Linear[k]
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[7]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Linear[v]
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[8]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Linear[k]
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[8]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Linear[v]
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[9]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Linear[k]
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[9]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Linear[v]
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[10]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Linear[k]
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[10]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Linear[v]
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[11]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Linear[k]
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[11]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Linear[v]
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[12]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Linear[k]
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[12]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Linear[v]
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[13]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Linear[k]
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[13]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Linear[v]
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[14]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Linear[k]
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[14]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Linear[v]
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[15]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Linear[k]
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[15]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Linear[v]
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[16]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Linear[k]
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[16]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Linear[v]
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[17]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Linear[k]
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[18]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Linear[k]
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[18]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Linear[v]
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[19]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Linear[k]
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[19]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Linear[v]
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[20]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Linear[k]
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[20]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Linear[v]
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[21]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Linear[k]
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[21]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Linear[v]
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[22]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Linear[k]
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[22]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Linear[v]
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[23]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Linear[k]
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[23]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Linear[v]
        return list(flatten((t_1, x3, t_0, t_4, t_3, t_2, t_5, t_6, t_7, t_8, t_9, t_10, t_11, t_12, t_13, t_14, t_15, t_16, t_17, t_18, t_19, t_20, t_21, t_22, t_23, t_24, t_25, t_26, t_27, t_28, t_29, t_30, t_31, t_32, t_33, t_34, t_35, t_36, t_37, t_38, t_39, t_40, t_41, t_42, t_43, t_44, t_45, t_46, t_47)))

    def state_dict(self,*args,**kwargs):
        # we return the state dict of this part as it should be in the original model
        return state_dict(self,*args,**kwargs)

    def load_state_dict(self, state):
        return load_state_dict(self,state)

    def named_parameters(self,recurse=True):
        # we return the named parameters of this part as it should be in the original model
        return named_parameters(self,recurse=recurse)

    def named_buffers(self,recurse=True):
        # we return the named buffers of this part as it should be in the original model
        return named_buffers(self,recurse=recurse)

    def cpu(self):
        return cpu(self)

    def cuda(self,device=None):
        return cuda(self,device=device)

    def to(self, *args, **kwargs):
        return to(self,*args,**kwargs)


class Partition4(nn.Module):
    LAYER_SCOPES=[
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[0]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Linear[k]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[0]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Embedding[relative_attention_bias]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[0]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Dropout[dropout]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[0]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Linear[o]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[0]/T5LayerCrossAttention[1]/Dropout[dropout]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[0]/T5LayerFF[2]/T5LayerNorm[layer_norm]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[0]/T5LayerFF[2]/T5DenseReluDense[DenseReluDense]/Linear[wi]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[0]/T5LayerFF[2]/T5DenseReluDense[DenseReluDense]/Dropout[dropout]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[0]/T5LayerFF[2]/T5DenseReluDense[DenseReluDense]/Linear[wo]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[0]/T5LayerFF[2]/Dropout[dropout]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[1]/T5LayerSelfAttention[0]/T5LayerNorm[layer_norm]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[1]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Linear[q]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[1]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Linear[k]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[1]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Linear[v]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[1]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Dropout[dropout]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[1]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Linear[o]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[1]/T5LayerSelfAttention[0]/Dropout[dropout]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[1]/T5LayerCrossAttention[1]/T5LayerNorm[layer_norm]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[1]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Linear[q]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[1]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Dropout[dropout]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[1]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Linear[o]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[1]/T5LayerCrossAttention[1]/Dropout[dropout]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[1]/T5LayerFF[2]/T5LayerNorm[layer_norm]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[1]/T5LayerFF[2]/T5DenseReluDense[DenseReluDense]/Linear[wi]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[1]/T5LayerFF[2]/T5DenseReluDense[DenseReluDense]/Dropout[dropout]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[1]/T5LayerFF[2]/T5DenseReluDense[DenseReluDense]/Linear[wo]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[1]/T5LayerFF[2]/Dropout[dropout]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[2]/T5LayerSelfAttention[0]/T5LayerNorm[layer_norm]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[2]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Linear[q]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[2]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Linear[k]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[2]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Linear[v]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[2]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Dropout[dropout]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[2]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Linear[o]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[2]/T5LayerSelfAttention[0]/Dropout[dropout]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[2]/T5LayerCrossAttention[1]/T5LayerNorm[layer_norm]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[2]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Linear[q]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[2]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Dropout[dropout]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[2]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Linear[o]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[2]/T5LayerCrossAttention[1]/Dropout[dropout]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[2]/T5LayerFF[2]/T5LayerNorm[layer_norm]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[2]/T5LayerFF[2]/T5DenseReluDense[DenseReluDense]/Linear[wi]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[2]/T5LayerFF[2]/T5DenseReluDense[DenseReluDense]/Dropout[dropout]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[2]/T5LayerFF[2]/T5DenseReluDense[DenseReluDense]/Linear[wo]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[2]/T5LayerFF[2]/Dropout[dropout]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[3]/T5LayerSelfAttention[0]/T5LayerNorm[layer_norm]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[3]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Linear[q]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[3]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Linear[k]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[3]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Linear[v]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[3]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Dropout[dropout]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[3]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Linear[o]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[3]/T5LayerSelfAttention[0]/Dropout[dropout]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[3]/T5LayerCrossAttention[1]/T5LayerNorm[layer_norm]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[3]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Linear[q]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[3]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Dropout[dropout]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[3]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Linear[o]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[3]/T5LayerCrossAttention[1]/Dropout[dropout]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[3]/T5LayerFF[2]/T5LayerNorm[layer_norm]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[3]/T5LayerFF[2]/T5DenseReluDense[DenseReluDense]/Linear[wi]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[3]/T5LayerFF[2]/T5DenseReluDense[DenseReluDense]/Dropout[dropout]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[3]/T5LayerFF[2]/T5DenseReluDense[DenseReluDense]/Linear[wo]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[3]/T5LayerFF[2]/Dropout[dropout]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[4]/T5LayerSelfAttention[0]/T5LayerNorm[layer_norm]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[4]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Linear[q]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[4]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Linear[k]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[4]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Linear[v]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[4]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Dropout[dropout]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[4]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Linear[o]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[4]/T5LayerSelfAttention[0]/Dropout[dropout]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[4]/T5LayerCrossAttention[1]/T5LayerNorm[layer_norm]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[4]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Linear[q]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[4]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Dropout[dropout]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[4]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Linear[o]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[4]/T5LayerCrossAttention[1]/Dropout[dropout]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[4]/T5LayerFF[2]/T5LayerNorm[layer_norm]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[4]/T5LayerFF[2]/T5DenseReluDense[DenseReluDense]/Linear[wi]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[4]/T5LayerFF[2]/T5DenseReluDense[DenseReluDense]/Dropout[dropout]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[4]/T5LayerFF[2]/T5DenseReluDense[DenseReluDense]/Linear[wo]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[4]/T5LayerFF[2]/Dropout[dropout]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[5]/T5LayerSelfAttention[0]/T5LayerNorm[layer_norm]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[5]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Linear[q]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[5]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Linear[k]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[5]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Linear[v]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[5]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Dropout[dropout]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[5]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Linear[o]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[5]/T5LayerSelfAttention[0]/Dropout[dropout]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[5]/T5LayerCrossAttention[1]/T5LayerNorm[layer_norm]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[5]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Linear[q]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[5]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Dropout[dropout]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[5]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Linear[o]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[5]/T5LayerCrossAttention[1]/Dropout[dropout]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[5]/T5LayerFF[2]/T5LayerNorm[layer_norm]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[5]/T5LayerFF[2]/T5DenseReluDense[DenseReluDense]/Linear[wi]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[5]/T5LayerFF[2]/T5DenseReluDense[DenseReluDense]/Dropout[dropout]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[5]/T5LayerFF[2]/T5DenseReluDense[DenseReluDense]/Linear[wo]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[5]/T5LayerFF[2]/Dropout[dropout]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[6]/T5LayerSelfAttention[0]/T5LayerNorm[layer_norm]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[6]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Linear[q]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[6]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Linear[k]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[6]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Linear[v]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[17]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Linear[v]',
        ]
    TENSORS=[
        ]
    def __init__(self, layers, tensors, device='cuda:4'):
        super().__init__()

        #initialize partition layers
        for idx,layer_scope in enumerate(self.LAYER_SCOPES):
            self.add_module(f'l_{idx}',layers[layer_scope])

        #initialize partition tensors
        b=p=0
        for tensor_scope in self.TENSORS:
            tensor=tensors[tensor_scope]
            if isinstance(tensor,nn.Parameter):
                self.register_parameter(f'p_{p}',tensor)
                p+=1
            else:
                self.register_buffer(f'b_{b}',tensor)
                b+=1

        self.device = torch.device(device)
        self.input_structure = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
        self.lookup = { 'l_0': 'decoder.0.1.EncDecAttention.k',
                        'l_1': 'decoder.0.1.EncDecAttention.relative_attention_bias',
                        'l_2': 'decoder.0.1.EncDecAttention.dropout',
                        'l_3': 'decoder.0.1.EncDecAttention.o',
                        'l_4': 'decoder.0.1.dropout',
                        'l_5': 'decoder.0.2.layer_norm',
                        'l_6': 'decoder.0.2.DenseReluDense.wi',
                        'l_7': 'decoder.0.2.DenseReluDense.dropout',
                        'l_8': 'decoder.0.2.DenseReluDense.wo',
                        'l_9': 'decoder.0.2.dropout',
                        'l_10': 'decoder.1.0.layer_norm',
                        'l_11': 'decoder.1.0.SelfAttention.q',
                        'l_12': 'decoder.1.0.SelfAttention.k',
                        'l_13': 'decoder.1.0.SelfAttention.v',
                        'l_14': 'decoder.1.0.SelfAttention.dropout',
                        'l_15': 'decoder.1.0.SelfAttention.o',
                        'l_16': 'decoder.1.0.dropout',
                        'l_17': 'decoder.1.1.layer_norm',
                        'l_18': 'decoder.1.1.EncDecAttention.q',
                        'l_19': 'decoder.1.1.EncDecAttention.dropout',
                        'l_20': 'decoder.1.1.EncDecAttention.o',
                        'l_21': 'decoder.1.1.dropout',
                        'l_22': 'decoder.1.2.layer_norm',
                        'l_23': 'decoder.1.2.DenseReluDense.wi',
                        'l_24': 'decoder.1.2.DenseReluDense.dropout',
                        'l_25': 'decoder.1.2.DenseReluDense.wo',
                        'l_26': 'decoder.1.2.dropout',
                        'l_27': 'decoder.2.0.layer_norm',
                        'l_28': 'decoder.2.0.SelfAttention.q',
                        'l_29': 'decoder.2.0.SelfAttention.k',
                        'l_30': 'decoder.2.0.SelfAttention.v',
                        'l_31': 'decoder.2.0.SelfAttention.dropout',
                        'l_32': 'decoder.2.0.SelfAttention.o',
                        'l_33': 'decoder.2.0.dropout',
                        'l_34': 'decoder.2.1.layer_norm',
                        'l_35': 'decoder.2.1.EncDecAttention.q',
                        'l_36': 'decoder.2.1.EncDecAttention.dropout',
                        'l_37': 'decoder.2.1.EncDecAttention.o',
                        'l_38': 'decoder.2.1.dropout',
                        'l_39': 'decoder.2.2.layer_norm',
                        'l_40': 'decoder.2.2.DenseReluDense.wi',
                        'l_41': 'decoder.2.2.DenseReluDense.dropout',
                        'l_42': 'decoder.2.2.DenseReluDense.wo',
                        'l_43': 'decoder.2.2.dropout',
                        'l_44': 'decoder.3.0.layer_norm',
                        'l_45': 'decoder.3.0.SelfAttention.q',
                        'l_46': 'decoder.3.0.SelfAttention.k',
                        'l_47': 'decoder.3.0.SelfAttention.v',
                        'l_48': 'decoder.3.0.SelfAttention.dropout',
                        'l_49': 'decoder.3.0.SelfAttention.o',
                        'l_50': 'decoder.3.0.dropout',
                        'l_51': 'decoder.3.1.layer_norm',
                        'l_52': 'decoder.3.1.EncDecAttention.q',
                        'l_53': 'decoder.3.1.EncDecAttention.dropout',
                        'l_54': 'decoder.3.1.EncDecAttention.o',
                        'l_55': 'decoder.3.1.dropout',
                        'l_56': 'decoder.3.2.layer_norm',
                        'l_57': 'decoder.3.2.DenseReluDense.wi',
                        'l_58': 'decoder.3.2.DenseReluDense.dropout',
                        'l_59': 'decoder.3.2.DenseReluDense.wo',
                        'l_60': 'decoder.3.2.dropout',
                        'l_61': 'decoder.4.0.layer_norm',
                        'l_62': 'decoder.4.0.SelfAttention.q',
                        'l_63': 'decoder.4.0.SelfAttention.k',
                        'l_64': 'decoder.4.0.SelfAttention.v',
                        'l_65': 'decoder.4.0.SelfAttention.dropout',
                        'l_66': 'decoder.4.0.SelfAttention.o',
                        'l_67': 'decoder.4.0.dropout',
                        'l_68': 'decoder.4.1.layer_norm',
                        'l_69': 'decoder.4.1.EncDecAttention.q',
                        'l_70': 'decoder.4.1.EncDecAttention.dropout',
                        'l_71': 'decoder.4.1.EncDecAttention.o',
                        'l_72': 'decoder.4.1.dropout',
                        'l_73': 'decoder.4.2.layer_norm',
                        'l_74': 'decoder.4.2.DenseReluDense.wi',
                        'l_75': 'decoder.4.2.DenseReluDense.dropout',
                        'l_76': 'decoder.4.2.DenseReluDense.wo',
                        'l_77': 'decoder.4.2.dropout',
                        'l_78': 'decoder.5.0.layer_norm',
                        'l_79': 'decoder.5.0.SelfAttention.q',
                        'l_80': 'decoder.5.0.SelfAttention.k',
                        'l_81': 'decoder.5.0.SelfAttention.v',
                        'l_82': 'decoder.5.0.SelfAttention.dropout',
                        'l_83': 'decoder.5.0.SelfAttention.o',
                        'l_84': 'decoder.5.0.dropout',
                        'l_85': 'decoder.5.1.layer_norm',
                        'l_86': 'decoder.5.1.EncDecAttention.q',
                        'l_87': 'decoder.5.1.EncDecAttention.dropout',
                        'l_88': 'decoder.5.1.EncDecAttention.o',
                        'l_89': 'decoder.5.1.dropout',
                        'l_90': 'decoder.5.2.layer_norm',
                        'l_91': 'decoder.5.2.DenseReluDense.wi',
                        'l_92': 'decoder.5.2.DenseReluDense.dropout',
                        'l_93': 'decoder.5.2.DenseReluDense.wo',
                        'l_94': 'decoder.5.2.dropout',
                        'l_95': 'decoder.6.0.layer_norm',
                        'l_96': 'decoder.6.0.SelfAttention.q',
                        'l_97': 'decoder.6.0.SelfAttention.k',
                        'l_98': 'decoder.6.0.SelfAttention.v',
                        'l_99': 'decoder.17.1.EncDecAttention.v'}
        self.to(self.device)

    def forward(self, *args):
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[0]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Linear[k] <=> self.l_0
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[0]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Embedding[relative_attention_bias] <=> self.l_1
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[0]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Dropout[dropout] <=> self.l_2
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[0]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Linear[o] <=> self.l_3
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[0]/T5LayerCrossAttention[1]/Dropout[dropout] <=> self.l_4
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[0]/T5LayerFF[2]/T5LayerNorm[layer_norm] <=> self.l_5
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[0]/T5LayerFF[2]/T5DenseReluDense[DenseReluDense]/Linear[wi] <=> self.l_6
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[0]/T5LayerFF[2]/T5DenseReluDense[DenseReluDense]/Dropout[dropout] <=> self.l_7
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[0]/T5LayerFF[2]/T5DenseReluDense[DenseReluDense]/Linear[wo] <=> self.l_8
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[0]/T5LayerFF[2]/Dropout[dropout] <=> self.l_9
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[1]/T5LayerSelfAttention[0]/T5LayerNorm[layer_norm] <=> self.l_10
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[1]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Linear[q] <=> self.l_11
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[1]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Linear[k] <=> self.l_12
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[1]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Linear[v] <=> self.l_13
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[1]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Dropout[dropout] <=> self.l_14
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[1]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Linear[o] <=> self.l_15
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[1]/T5LayerSelfAttention[0]/Dropout[dropout] <=> self.l_16
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[1]/T5LayerCrossAttention[1]/T5LayerNorm[layer_norm] <=> self.l_17
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[1]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Linear[q] <=> self.l_18
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[1]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Dropout[dropout] <=> self.l_19
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[1]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Linear[o] <=> self.l_20
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[1]/T5LayerCrossAttention[1]/Dropout[dropout] <=> self.l_21
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[1]/T5LayerFF[2]/T5LayerNorm[layer_norm] <=> self.l_22
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[1]/T5LayerFF[2]/T5DenseReluDense[DenseReluDense]/Linear[wi] <=> self.l_23
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[1]/T5LayerFF[2]/T5DenseReluDense[DenseReluDense]/Dropout[dropout] <=> self.l_24
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[1]/T5LayerFF[2]/T5DenseReluDense[DenseReluDense]/Linear[wo] <=> self.l_25
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[1]/T5LayerFF[2]/Dropout[dropout] <=> self.l_26
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[2]/T5LayerSelfAttention[0]/T5LayerNorm[layer_norm] <=> self.l_27
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[2]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Linear[q] <=> self.l_28
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[2]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Linear[k] <=> self.l_29
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[2]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Linear[v] <=> self.l_30
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[2]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Dropout[dropout] <=> self.l_31
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[2]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Linear[o] <=> self.l_32
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[2]/T5LayerSelfAttention[0]/Dropout[dropout] <=> self.l_33
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[2]/T5LayerCrossAttention[1]/T5LayerNorm[layer_norm] <=> self.l_34
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[2]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Linear[q] <=> self.l_35
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[2]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Dropout[dropout] <=> self.l_36
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[2]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Linear[o] <=> self.l_37
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[2]/T5LayerCrossAttention[1]/Dropout[dropout] <=> self.l_38
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[2]/T5LayerFF[2]/T5LayerNorm[layer_norm] <=> self.l_39
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[2]/T5LayerFF[2]/T5DenseReluDense[DenseReluDense]/Linear[wi] <=> self.l_40
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[2]/T5LayerFF[2]/T5DenseReluDense[DenseReluDense]/Dropout[dropout] <=> self.l_41
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[2]/T5LayerFF[2]/T5DenseReluDense[DenseReluDense]/Linear[wo] <=> self.l_42
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[2]/T5LayerFF[2]/Dropout[dropout] <=> self.l_43
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[3]/T5LayerSelfAttention[0]/T5LayerNorm[layer_norm] <=> self.l_44
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[3]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Linear[q] <=> self.l_45
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[3]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Linear[k] <=> self.l_46
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[3]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Linear[v] <=> self.l_47
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[3]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Dropout[dropout] <=> self.l_48
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[3]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Linear[o] <=> self.l_49
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[3]/T5LayerSelfAttention[0]/Dropout[dropout] <=> self.l_50
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[3]/T5LayerCrossAttention[1]/T5LayerNorm[layer_norm] <=> self.l_51
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[3]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Linear[q] <=> self.l_52
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[3]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Dropout[dropout] <=> self.l_53
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[3]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Linear[o] <=> self.l_54
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[3]/T5LayerCrossAttention[1]/Dropout[dropout] <=> self.l_55
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[3]/T5LayerFF[2]/T5LayerNorm[layer_norm] <=> self.l_56
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[3]/T5LayerFF[2]/T5DenseReluDense[DenseReluDense]/Linear[wi] <=> self.l_57
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[3]/T5LayerFF[2]/T5DenseReluDense[DenseReluDense]/Dropout[dropout] <=> self.l_58
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[3]/T5LayerFF[2]/T5DenseReluDense[DenseReluDense]/Linear[wo] <=> self.l_59
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[3]/T5LayerFF[2]/Dropout[dropout] <=> self.l_60
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[4]/T5LayerSelfAttention[0]/T5LayerNorm[layer_norm] <=> self.l_61
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[4]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Linear[q] <=> self.l_62
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[4]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Linear[k] <=> self.l_63
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[4]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Linear[v] <=> self.l_64
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[4]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Dropout[dropout] <=> self.l_65
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[4]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Linear[o] <=> self.l_66
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[4]/T5LayerSelfAttention[0]/Dropout[dropout] <=> self.l_67
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[4]/T5LayerCrossAttention[1]/T5LayerNorm[layer_norm] <=> self.l_68
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[4]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Linear[q] <=> self.l_69
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[4]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Dropout[dropout] <=> self.l_70
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[4]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Linear[o] <=> self.l_71
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[4]/T5LayerCrossAttention[1]/Dropout[dropout] <=> self.l_72
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[4]/T5LayerFF[2]/T5LayerNorm[layer_norm] <=> self.l_73
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[4]/T5LayerFF[2]/T5DenseReluDense[DenseReluDense]/Linear[wi] <=> self.l_74
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[4]/T5LayerFF[2]/T5DenseReluDense[DenseReluDense]/Dropout[dropout] <=> self.l_75
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[4]/T5LayerFF[2]/T5DenseReluDense[DenseReluDense]/Linear[wo] <=> self.l_76
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[4]/T5LayerFF[2]/Dropout[dropout] <=> self.l_77
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[5]/T5LayerSelfAttention[0]/T5LayerNorm[layer_norm] <=> self.l_78
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[5]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Linear[q] <=> self.l_79
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[5]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Linear[k] <=> self.l_80
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[5]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Linear[v] <=> self.l_81
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[5]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Dropout[dropout] <=> self.l_82
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[5]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Linear[o] <=> self.l_83
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[5]/T5LayerSelfAttention[0]/Dropout[dropout] <=> self.l_84
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[5]/T5LayerCrossAttention[1]/T5LayerNorm[layer_norm] <=> self.l_85
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[5]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Linear[q] <=> self.l_86
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[5]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Dropout[dropout] <=> self.l_87
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[5]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Linear[o] <=> self.l_88
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[5]/T5LayerCrossAttention[1]/Dropout[dropout] <=> self.l_89
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[5]/T5LayerFF[2]/T5LayerNorm[layer_norm] <=> self.l_90
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[5]/T5LayerFF[2]/T5DenseReluDense[DenseReluDense]/Linear[wi] <=> self.l_91
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[5]/T5LayerFF[2]/T5DenseReluDense[DenseReluDense]/Dropout[dropout] <=> self.l_92
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[5]/T5LayerFF[2]/T5DenseReluDense[DenseReluDense]/Linear[wo] <=> self.l_93
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[5]/T5LayerFF[2]/Dropout[dropout] <=> self.l_94
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[6]/T5LayerSelfAttention[0]/T5LayerNorm[layer_norm] <=> self.l_95
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[6]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Linear[q] <=> self.l_96
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[6]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Linear[k] <=> self.l_97
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[6]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Linear[v] <=> self.l_98
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[17]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Linear[v] <=> self.l_99
        # input4 <=> inverted_encoder_attention_mask
        # T5ForConditionalGeneration/T5Stack[encoder]/Dropout[dropout] <=> x0
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[0]/tuple::__getitem___1630 <=> x1
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[0]/tuple::__getitem___1632 <=> x2
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[0]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Size::__getitem___1636 <=> x3
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[0]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Tensor::transpose_1648 <=> x4
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[0]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Tensor::transpose_1664 <=> x5
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[0]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Tensor::__neg___1688 <=> x6
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[1]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Linear[k] <=> x7
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[1]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Linear[v] <=> x8
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[2]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Linear[k] <=> x9
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[2]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Linear[v] <=> x10
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[3]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Linear[k] <=> x11
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[3]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Linear[v] <=> x12
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[4]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Linear[k] <=> x13
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[4]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Linear[v] <=> x14
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[5]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Linear[k] <=> x15
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[5]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Linear[v] <=> x16

        # moving inputs to current device no op if already on the correct device
        inverted_encoder_attention_mask, x0, x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16 = move_tensors(unflatten(args,self.input_structure), self.device)
        t_0 = self.l_0(x0)
        t_0 = t_0.view(x3, -1, 32, 128)
        t_0 = t_0.transpose(1, 2)
        t_0 = t_0.transpose(3, 2)
        t_0 = torch.matmul(x4, t_0)
        t_1 = torch.zeros_like(x6)
        t_1 = torch.max(x6, t_1)
        t_2 = t_1 < 16
        t_3 = t_1.float()
        t_3 = t_3 / 16
        t_3 = torch.log(t_3)
        t_4 = math.log(8.0)
        t_4 = t_3 / t_4
        t_4 = t_4 * 16
        t_4 = t_4.to(torch.int64)
        t_4 = 16 + t_4
        t_3 = torch.full_like(t_4, 31)
        t_3 = torch.min(t_4, t_3)
        t_3 = torch.where(t_2, t_1, t_3)
        t_3 = 0 + t_3
        t_3 = t_3.to(self.device)
        t_3 = self.l_1(t_3)
        t_1 = [2, 0, 1]
        t_1 = t_3.permute(t_1)
        t_1 = t_1.unsqueeze(0)
        t_1 = t_1 + inverted_encoder_attention_mask
        t_0 += t_1
        t_3 = t_0.float()
        t_3 = torch.nn.functional.softmax(t_3, dim=-1, _stacklevel=3, dtype=None)
        t_0 = t_3.type_as(t_0)
        t_0 = self.l_2(t_0)
        t_0 = torch.matmul(t_0, x5)
        t_0 = t_0.transpose(1, 2)
        t_0 = t_0.contiguous()
        t_0 = t_0.view(x3, -1, 4096)
        t_0 = self.l_3(t_0)
        t_1 = (t_0, t_1)
        t_0 = t_1[0]
        t_0 = self.l_4(t_0)
        t_0 = x1 + t_0
        t_1 = t_1[1]
        t_1 = (t_0, t_1)
        t_0 = t_1[0]
        t_1 = t_1[1]
        t_3 = self.l_5(t_0)
        t_3 = self.l_6(t_3)
        t_3 = torch.nn.functional.relu(t_3, inplace=False)
        t_3 = self.l_7(t_3)
        t_3 = self.l_8(t_3)
        t_3 = self.l_9(t_3)
        t_3 = t_0 + t_3
        t_1 = (t_3, x2, t_1)
        t_3 = t_1[0]
        t_0 = t_1[1]
        t_1 = t_1[2]
        t_2 = self.l_10(t_3)
        t_4 = t_2.size()
        t_4 = t_4[0]
        t_5 = self.l_11(t_2)
        t_5 = t_5.view(t_4, -1, 32, 128)
        t_5 = t_5.transpose(1, 2)
        t_6 = self.l_12(t_2)
        t_6 = t_6.view(t_4, -1, 32, 128)
        t_6 = t_6.transpose(1, 2)
        t_2 = self.l_13(t_2)
        t_2 = t_2.view(t_4, -1, 32, 128)
        t_2 = t_2.transpose(1, 2)
        t_6 = t_6.transpose(3, 2)
        t_6 = torch.matmul(t_5, t_6)
        t_6 += t_0
        t_5 = t_6.float()
        t_5 = torch.nn.functional.softmax(t_5, dim=-1, _stacklevel=3, dtype=None)
        t_6 = t_5.type_as(t_6)
        t_6 = self.l_14(t_6)
        t_2 = torch.matmul(t_6, t_2)
        t_2 = t_2.transpose(1, 2)
        t_2 = t_2.contiguous()
        t_4 = t_2.view(t_4, -1, 4096)
        t_4 = self.l_15(t_4)
        t_4 = self.l_16(t_4)
        t_4 = t_3 + t_4
        t_3 = self.l_17(t_4)
        t_2 = t_3.size()
        t_2 = t_2[0]
        t_3 = self.l_18(t_3)
        t_3 = t_3.view(t_2, -1, 32, 128)
        t_3 = t_3.transpose(1, 2)
        t_6 = x7.view(t_2, -1, 32, 128)
        t_6 = t_6.transpose(1, 2)
        t_5 = x8.view(t_2, -1, 32, 128)
        t_5 = t_5.transpose(1, 2)
        t_6 = t_6.transpose(3, 2)
        t_6 = torch.matmul(t_3, t_6)
        t_6 += t_1
        t_3 = t_6.float()
        t_3 = torch.nn.functional.softmax(t_3, dim=-1, _stacklevel=3, dtype=None)
        t_6 = t_3.type_as(t_6)
        t_6 = self.l_19(t_6)
        t_5 = torch.matmul(t_6, t_5)
        t_5 = t_5.transpose(1, 2)
        t_5 = t_5.contiguous()
        t_2 = t_5.view(t_2, -1, 4096)
        t_2 = self.l_20(t_2)
        t_2 = self.l_21(t_2)
        t_2 = t_4 + t_2
        t_4 = self.l_22(t_2)
        t_4 = self.l_23(t_4)
        t_4 = torch.nn.functional.relu(t_4, inplace=False)
        t_4 = self.l_24(t_4)
        t_4 = self.l_25(t_4)
        t_4 = self.l_26(t_4)
        t_4 = t_2 + t_4
        t_2 = self.l_27(t_4)
        t_5 = t_2.size()
        t_5 = t_5[0]
        t_6 = self.l_28(t_2)
        t_6 = t_6.view(t_5, -1, 32, 128)
        t_6 = t_6.transpose(1, 2)
        t_3 = self.l_29(t_2)
        t_3 = t_3.view(t_5, -1, 32, 128)
        t_3 = t_3.transpose(1, 2)
        t_2 = self.l_30(t_2)
        t_2 = t_2.view(t_5, -1, 32, 128)
        t_2 = t_2.transpose(1, 2)
        t_3 = t_3.transpose(3, 2)
        t_3 = torch.matmul(t_6, t_3)
        t_3 += t_0
        t_6 = t_3.float()
        t_6 = torch.nn.functional.softmax(t_6, dim=-1, _stacklevel=3, dtype=None)
        t_3 = t_6.type_as(t_3)
        t_3 = self.l_31(t_3)
        t_2 = torch.matmul(t_3, t_2)
        t_2 = t_2.transpose(1, 2)
        t_2 = t_2.contiguous()
        t_5 = t_2.view(t_5, -1, 4096)
        t_5 = self.l_32(t_5)
        t_5 = self.l_33(t_5)
        t_5 = t_4 + t_5
        t_4 = self.l_34(t_5)
        t_2 = t_4.size()
        t_2 = t_2[0]
        t_4 = self.l_35(t_4)
        t_4 = t_4.view(t_2, -1, 32, 128)
        t_4 = t_4.transpose(1, 2)
        t_3 = x9.view(t_2, -1, 32, 128)
        t_3 = t_3.transpose(1, 2)
        t_6 = x10.view(t_2, -1, 32, 128)
        t_6 = t_6.transpose(1, 2)
        t_3 = t_3.transpose(3, 2)
        t_3 = torch.matmul(t_4, t_3)
        t_3 += t_1
        t_4 = t_3.float()
        t_4 = torch.nn.functional.softmax(t_4, dim=-1, _stacklevel=3, dtype=None)
        t_3 = t_4.type_as(t_3)
        t_3 = self.l_36(t_3)
        t_6 = torch.matmul(t_3, t_6)
        t_6 = t_6.transpose(1, 2)
        t_6 = t_6.contiguous()
        t_2 = t_6.view(t_2, -1, 4096)
        t_2 = self.l_37(t_2)
        t_2 = self.l_38(t_2)
        t_2 = t_5 + t_2
        t_5 = self.l_39(t_2)
        t_5 = self.l_40(t_5)
        t_5 = torch.nn.functional.relu(t_5, inplace=False)
        t_5 = self.l_41(t_5)
        t_5 = self.l_42(t_5)
        t_5 = self.l_43(t_5)
        t_5 = t_2 + t_5
        t_2 = self.l_44(t_5)
        t_6 = t_2.size()
        t_6 = t_6[0]
        t_3 = self.l_45(t_2)
        t_3 = t_3.view(t_6, -1, 32, 128)
        t_3 = t_3.transpose(1, 2)
        t_4 = self.l_46(t_2)
        t_4 = t_4.view(t_6, -1, 32, 128)
        t_4 = t_4.transpose(1, 2)
        t_2 = self.l_47(t_2)
        t_2 = t_2.view(t_6, -1, 32, 128)
        t_2 = t_2.transpose(1, 2)
        t_4 = t_4.transpose(3, 2)
        t_4 = torch.matmul(t_3, t_4)
        t_4 += t_0
        t_3 = t_4.float()
        t_3 = torch.nn.functional.softmax(t_3, dim=-1, _stacklevel=3, dtype=None)
        t_4 = t_3.type_as(t_4)
        t_4 = self.l_48(t_4)
        t_2 = torch.matmul(t_4, t_2)
        t_2 = t_2.transpose(1, 2)
        t_2 = t_2.contiguous()
        t_6 = t_2.view(t_6, -1, 4096)
        t_6 = self.l_49(t_6)
        t_6 = self.l_50(t_6)
        t_6 = t_5 + t_6
        t_5 = self.l_51(t_6)
        t_2 = t_5.size()
        t_2 = t_2[0]
        t_5 = self.l_52(t_5)
        t_5 = t_5.view(t_2, -1, 32, 128)
        t_5 = t_5.transpose(1, 2)
        t_4 = x11.view(t_2, -1, 32, 128)
        t_4 = t_4.transpose(1, 2)
        t_3 = x12.view(t_2, -1, 32, 128)
        t_3 = t_3.transpose(1, 2)
        t_4 = t_4.transpose(3, 2)
        t_4 = torch.matmul(t_5, t_4)
        t_4 += t_1
        t_5 = t_4.float()
        t_5 = torch.nn.functional.softmax(t_5, dim=-1, _stacklevel=3, dtype=None)
        t_4 = t_5.type_as(t_4)
        t_4 = self.l_53(t_4)
        t_3 = torch.matmul(t_4, t_3)
        t_3 = t_3.transpose(1, 2)
        t_3 = t_3.contiguous()
        t_2 = t_3.view(t_2, -1, 4096)
        t_2 = self.l_54(t_2)
        t_2 = self.l_55(t_2)
        t_2 = t_6 + t_2
        t_6 = self.l_56(t_2)
        t_6 = self.l_57(t_6)
        t_6 = torch.nn.functional.relu(t_6, inplace=False)
        t_6 = self.l_58(t_6)
        t_6 = self.l_59(t_6)
        t_6 = self.l_60(t_6)
        t_6 = t_2 + t_6
        t_2 = self.l_61(t_6)
        t_3 = t_2.size()
        t_3 = t_3[0]
        t_4 = self.l_62(t_2)
        t_4 = t_4.view(t_3, -1, 32, 128)
        t_4 = t_4.transpose(1, 2)
        t_5 = self.l_63(t_2)
        t_5 = t_5.view(t_3, -1, 32, 128)
        t_5 = t_5.transpose(1, 2)
        t_2 = self.l_64(t_2)
        t_2 = t_2.view(t_3, -1, 32, 128)
        t_2 = t_2.transpose(1, 2)
        t_5 = t_5.transpose(3, 2)
        t_5 = torch.matmul(t_4, t_5)
        t_5 += t_0
        t_4 = t_5.float()
        t_4 = torch.nn.functional.softmax(t_4, dim=-1, _stacklevel=3, dtype=None)
        t_5 = t_4.type_as(t_5)
        t_5 = self.l_65(t_5)
        t_2 = torch.matmul(t_5, t_2)
        t_2 = t_2.transpose(1, 2)
        t_2 = t_2.contiguous()
        t_3 = t_2.view(t_3, -1, 4096)
        t_3 = self.l_66(t_3)
        t_3 = self.l_67(t_3)
        t_3 = t_6 + t_3
        t_6 = self.l_68(t_3)
        t_2 = t_6.size()
        t_2 = t_2[0]
        t_6 = self.l_69(t_6)
        t_6 = t_6.view(t_2, -1, 32, 128)
        t_6 = t_6.transpose(1, 2)
        t_5 = x13.view(t_2, -1, 32, 128)
        t_5 = t_5.transpose(1, 2)
        t_4 = x14.view(t_2, -1, 32, 128)
        t_4 = t_4.transpose(1, 2)
        t_5 = t_5.transpose(3, 2)
        t_5 = torch.matmul(t_6, t_5)
        t_5 += t_1
        t_6 = t_5.float()
        t_6 = torch.nn.functional.softmax(t_6, dim=-1, _stacklevel=3, dtype=None)
        t_5 = t_6.type_as(t_5)
        t_5 = self.l_70(t_5)
        t_4 = torch.matmul(t_5, t_4)
        t_4 = t_4.transpose(1, 2)
        t_4 = t_4.contiguous()
        t_2 = t_4.view(t_2, -1, 4096)
        t_2 = self.l_71(t_2)
        t_2 = self.l_72(t_2)
        t_2 = t_3 + t_2
        t_3 = self.l_73(t_2)
        t_3 = self.l_74(t_3)
        t_3 = torch.nn.functional.relu(t_3, inplace=False)
        t_3 = self.l_75(t_3)
        t_3 = self.l_76(t_3)
        t_3 = self.l_77(t_3)
        t_3 = t_2 + t_3
        t_2 = self.l_78(t_3)
        t_4 = t_2.size()
        t_4 = t_4[0]
        t_5 = self.l_79(t_2)
        t_5 = t_5.view(t_4, -1, 32, 128)
        t_5 = t_5.transpose(1, 2)
        t_6 = self.l_80(t_2)
        t_6 = t_6.view(t_4, -1, 32, 128)
        t_6 = t_6.transpose(1, 2)
        t_2 = self.l_81(t_2)
        t_2 = t_2.view(t_4, -1, 32, 128)
        t_2 = t_2.transpose(1, 2)
        t_6 = t_6.transpose(3, 2)
        t_6 = torch.matmul(t_5, t_6)
        t_6 += t_0
        t_5 = t_6.float()
        t_5 = torch.nn.functional.softmax(t_5, dim=-1, _stacklevel=3, dtype=None)
        t_6 = t_5.type_as(t_6)
        t_6 = self.l_82(t_6)
        t_2 = torch.matmul(t_6, t_2)
        t_2 = t_2.transpose(1, 2)
        t_2 = t_2.contiguous()
        t_4 = t_2.view(t_4, -1, 4096)
        t_4 = self.l_83(t_4)
        t_4 = self.l_84(t_4)
        t_4 = t_3 + t_4
        t_3 = self.l_85(t_4)
        t_2 = t_3.size()
        t_2 = t_2[0]
        t_3 = self.l_86(t_3)
        t_3 = t_3.view(t_2, -1, 32, 128)
        t_3 = t_3.transpose(1, 2)
        t_6 = x15.view(t_2, -1, 32, 128)
        t_6 = t_6.transpose(1, 2)
        t_5 = x16.view(t_2, -1, 32, 128)
        t_5 = t_5.transpose(1, 2)
        t_6 = t_6.transpose(3, 2)
        t_6 = torch.matmul(t_3, t_6)
        t_6 += t_1
        t_3 = t_6.float()
        t_3 = torch.nn.functional.softmax(t_3, dim=-1, _stacklevel=3, dtype=None)
        t_6 = t_3.type_as(t_6)
        t_6 = self.l_87(t_6)
        t_5 = torch.matmul(t_6, t_5)
        t_5 = t_5.transpose(1, 2)
        t_5 = t_5.contiguous()
        t_2 = t_5.view(t_2, -1, 4096)
        t_2 = self.l_88(t_2)
        t_2 = self.l_89(t_2)
        t_2 = t_4 + t_2
        t_4 = self.l_90(t_2)
        t_4 = self.l_91(t_4)
        t_4 = torch.nn.functional.relu(t_4, inplace=False)
        t_4 = self.l_92(t_4)
        t_4 = self.l_93(t_4)
        t_4 = self.l_94(t_4)
        t_4 = t_2 + t_4
        t_2 = self.l_95(t_4)
        t_5 = t_2.size()
        t_5 = t_5[0]
        t_6 = self.l_96(t_2)
        t_3 = self.l_97(t_2)
        t_3 = t_3.view(t_5, -1, 32, 128)
        t_3 = t_3.transpose(1, 2)
        t_2 = self.l_98(t_2)
        t_7 = self.l_99(x0)
        # returning:
        # T5ForConditionalGeneration/T5Stack[decoder]/tuple::__getitem___1764
        # T5ForConditionalGeneration/T5Stack[decoder]/tuple::__getitem___1766
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[5]/T5LayerFF[2]/Tensor::__add___2316
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[6]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Size::__getitem___2320
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[6]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Linear[q]
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[6]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Tensor::transpose_2336
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[6]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Linear[v]
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[17]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Linear[v]
        return list(flatten((t_0, t_1, t_4, t_5, t_6, t_3, t_2, t_7)))

    def state_dict(self,*args,**kwargs):
        # we return the state dict of this part as it should be in the original model
        return state_dict(self,*args,**kwargs)

    def load_state_dict(self, state):
        return load_state_dict(self,state)

    def named_parameters(self,recurse=True):
        # we return the named parameters of this part as it should be in the original model
        return named_parameters(self,recurse=recurse)

    def named_buffers(self,recurse=True):
        # we return the named buffers of this part as it should be in the original model
        return named_buffers(self,recurse=recurse)

    def cpu(self):
        return cpu(self)

    def cuda(self,device=None):
        return cuda(self,device=device)

    def to(self, *args, **kwargs):
        return to(self,*args,**kwargs)


class Partition5(nn.Module):
    LAYER_SCOPES=[
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[6]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Dropout[dropout]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[6]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Linear[o]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[6]/T5LayerSelfAttention[0]/Dropout[dropout]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[6]/T5LayerCrossAttention[1]/T5LayerNorm[layer_norm]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[6]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Linear[q]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[6]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Dropout[dropout]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[6]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Linear[o]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[6]/T5LayerCrossAttention[1]/Dropout[dropout]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[6]/T5LayerFF[2]/T5LayerNorm[layer_norm]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[6]/T5LayerFF[2]/T5DenseReluDense[DenseReluDense]/Linear[wi]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[6]/T5LayerFF[2]/T5DenseReluDense[DenseReluDense]/Dropout[dropout]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[6]/T5LayerFF[2]/T5DenseReluDense[DenseReluDense]/Linear[wo]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[6]/T5LayerFF[2]/Dropout[dropout]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[7]/T5LayerSelfAttention[0]/T5LayerNorm[layer_norm]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[7]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Linear[q]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[7]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Linear[k]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[7]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Linear[v]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[7]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Dropout[dropout]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[7]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Linear[o]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[7]/T5LayerSelfAttention[0]/Dropout[dropout]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[7]/T5LayerCrossAttention[1]/T5LayerNorm[layer_norm]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[7]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Linear[q]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[7]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Dropout[dropout]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[7]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Linear[o]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[7]/T5LayerCrossAttention[1]/Dropout[dropout]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[7]/T5LayerFF[2]/T5LayerNorm[layer_norm]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[7]/T5LayerFF[2]/T5DenseReluDense[DenseReluDense]/Linear[wi]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[7]/T5LayerFF[2]/T5DenseReluDense[DenseReluDense]/Dropout[dropout]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[7]/T5LayerFF[2]/T5DenseReluDense[DenseReluDense]/Linear[wo]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[7]/T5LayerFF[2]/Dropout[dropout]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[8]/T5LayerSelfAttention[0]/T5LayerNorm[layer_norm]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[8]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Linear[q]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[8]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Linear[k]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[8]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Linear[v]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[8]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Dropout[dropout]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[8]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Linear[o]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[8]/T5LayerSelfAttention[0]/Dropout[dropout]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[8]/T5LayerCrossAttention[1]/T5LayerNorm[layer_norm]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[8]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Linear[q]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[8]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Dropout[dropout]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[8]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Linear[o]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[8]/T5LayerCrossAttention[1]/Dropout[dropout]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[8]/T5LayerFF[2]/T5LayerNorm[layer_norm]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[8]/T5LayerFF[2]/T5DenseReluDense[DenseReluDense]/Linear[wi]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[8]/T5LayerFF[2]/T5DenseReluDense[DenseReluDense]/Dropout[dropout]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[8]/T5LayerFF[2]/T5DenseReluDense[DenseReluDense]/Linear[wo]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[8]/T5LayerFF[2]/Dropout[dropout]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[9]/T5LayerSelfAttention[0]/T5LayerNorm[layer_norm]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[9]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Linear[q]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[9]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Linear[k]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[9]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Linear[v]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[9]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Dropout[dropout]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[9]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Linear[o]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[9]/T5LayerSelfAttention[0]/Dropout[dropout]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[9]/T5LayerCrossAttention[1]/T5LayerNorm[layer_norm]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[9]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Linear[q]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[9]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Dropout[dropout]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[9]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Linear[o]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[9]/T5LayerCrossAttention[1]/Dropout[dropout]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[9]/T5LayerFF[2]/T5LayerNorm[layer_norm]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[9]/T5LayerFF[2]/T5DenseReluDense[DenseReluDense]/Linear[wi]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[9]/T5LayerFF[2]/T5DenseReluDense[DenseReluDense]/Dropout[dropout]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[9]/T5LayerFF[2]/T5DenseReluDense[DenseReluDense]/Linear[wo]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[9]/T5LayerFF[2]/Dropout[dropout]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[10]/T5LayerSelfAttention[0]/T5LayerNorm[layer_norm]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[10]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Linear[q]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[10]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Linear[k]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[10]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Linear[v]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[10]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Dropout[dropout]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[10]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Linear[o]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[10]/T5LayerSelfAttention[0]/Dropout[dropout]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[10]/T5LayerCrossAttention[1]/T5LayerNorm[layer_norm]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[10]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Linear[q]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[10]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Dropout[dropout]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[10]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Linear[o]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[10]/T5LayerCrossAttention[1]/Dropout[dropout]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[10]/T5LayerFF[2]/T5LayerNorm[layer_norm]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[10]/T5LayerFF[2]/T5DenseReluDense[DenseReluDense]/Linear[wi]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[10]/T5LayerFF[2]/T5DenseReluDense[DenseReluDense]/Dropout[dropout]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[10]/T5LayerFF[2]/T5DenseReluDense[DenseReluDense]/Linear[wo]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[10]/T5LayerFF[2]/Dropout[dropout]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[11]/T5LayerSelfAttention[0]/T5LayerNorm[layer_norm]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[11]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Linear[q]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[11]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Linear[k]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[11]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Linear[v]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[11]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Dropout[dropout]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[11]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Linear[o]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[11]/T5LayerSelfAttention[0]/Dropout[dropout]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[11]/T5LayerCrossAttention[1]/T5LayerNorm[layer_norm]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[11]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Linear[q]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[11]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Dropout[dropout]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[11]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Linear[o]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[11]/T5LayerCrossAttention[1]/Dropout[dropout]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[11]/T5LayerFF[2]/T5LayerNorm[layer_norm]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[11]/T5LayerFF[2]/T5DenseReluDense[DenseReluDense]/Linear[wi]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[11]/T5LayerFF[2]/T5DenseReluDense[DenseReluDense]/Dropout[dropout]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[11]/T5LayerFF[2]/T5DenseReluDense[DenseReluDense]/Linear[wo]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[11]/T5LayerFF[2]/Dropout[dropout]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[12]/T5LayerSelfAttention[0]/T5LayerNorm[layer_norm]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[12]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Linear[q]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[12]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Linear[k]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[12]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Linear[v]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[12]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Dropout[dropout]',
        ]
    TENSORS=[
        ]
    def __init__(self, layers, tensors, device='cuda:5'):
        super().__init__()

        #initialize partition layers
        for idx,layer_scope in enumerate(self.LAYER_SCOPES):
            self.add_module(f'l_{idx}',layers[layer_scope])

        #initialize partition tensors
        b=p=0
        for tensor_scope in self.TENSORS:
            tensor=tensors[tensor_scope]
            if isinstance(tensor,nn.Parameter):
                self.register_parameter(f'p_{p}',tensor)
                p+=1
            else:
                self.register_buffer(f'b_{b}',tensor)
                b+=1

        self.device = torch.device(device)
        self.input_structure = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
        self.lookup = { 'l_0': 'decoder.6.0.SelfAttention.dropout',
                        'l_1': 'decoder.6.0.SelfAttention.o',
                        'l_2': 'decoder.6.0.dropout',
                        'l_3': 'decoder.6.1.layer_norm',
                        'l_4': 'decoder.6.1.EncDecAttention.q',
                        'l_5': 'decoder.6.1.EncDecAttention.dropout',
                        'l_6': 'decoder.6.1.EncDecAttention.o',
                        'l_7': 'decoder.6.1.dropout',
                        'l_8': 'decoder.6.2.layer_norm',
                        'l_9': 'decoder.6.2.DenseReluDense.wi',
                        'l_10': 'decoder.6.2.DenseReluDense.dropout',
                        'l_11': 'decoder.6.2.DenseReluDense.wo',
                        'l_12': 'decoder.6.2.dropout',
                        'l_13': 'decoder.7.0.layer_norm',
                        'l_14': 'decoder.7.0.SelfAttention.q',
                        'l_15': 'decoder.7.0.SelfAttention.k',
                        'l_16': 'decoder.7.0.SelfAttention.v',
                        'l_17': 'decoder.7.0.SelfAttention.dropout',
                        'l_18': 'decoder.7.0.SelfAttention.o',
                        'l_19': 'decoder.7.0.dropout',
                        'l_20': 'decoder.7.1.layer_norm',
                        'l_21': 'decoder.7.1.EncDecAttention.q',
                        'l_22': 'decoder.7.1.EncDecAttention.dropout',
                        'l_23': 'decoder.7.1.EncDecAttention.o',
                        'l_24': 'decoder.7.1.dropout',
                        'l_25': 'decoder.7.2.layer_norm',
                        'l_26': 'decoder.7.2.DenseReluDense.wi',
                        'l_27': 'decoder.7.2.DenseReluDense.dropout',
                        'l_28': 'decoder.7.2.DenseReluDense.wo',
                        'l_29': 'decoder.7.2.dropout',
                        'l_30': 'decoder.8.0.layer_norm',
                        'l_31': 'decoder.8.0.SelfAttention.q',
                        'l_32': 'decoder.8.0.SelfAttention.k',
                        'l_33': 'decoder.8.0.SelfAttention.v',
                        'l_34': 'decoder.8.0.SelfAttention.dropout',
                        'l_35': 'decoder.8.0.SelfAttention.o',
                        'l_36': 'decoder.8.0.dropout',
                        'l_37': 'decoder.8.1.layer_norm',
                        'l_38': 'decoder.8.1.EncDecAttention.q',
                        'l_39': 'decoder.8.1.EncDecAttention.dropout',
                        'l_40': 'decoder.8.1.EncDecAttention.o',
                        'l_41': 'decoder.8.1.dropout',
                        'l_42': 'decoder.8.2.layer_norm',
                        'l_43': 'decoder.8.2.DenseReluDense.wi',
                        'l_44': 'decoder.8.2.DenseReluDense.dropout',
                        'l_45': 'decoder.8.2.DenseReluDense.wo',
                        'l_46': 'decoder.8.2.dropout',
                        'l_47': 'decoder.9.0.layer_norm',
                        'l_48': 'decoder.9.0.SelfAttention.q',
                        'l_49': 'decoder.9.0.SelfAttention.k',
                        'l_50': 'decoder.9.0.SelfAttention.v',
                        'l_51': 'decoder.9.0.SelfAttention.dropout',
                        'l_52': 'decoder.9.0.SelfAttention.o',
                        'l_53': 'decoder.9.0.dropout',
                        'l_54': 'decoder.9.1.layer_norm',
                        'l_55': 'decoder.9.1.EncDecAttention.q',
                        'l_56': 'decoder.9.1.EncDecAttention.dropout',
                        'l_57': 'decoder.9.1.EncDecAttention.o',
                        'l_58': 'decoder.9.1.dropout',
                        'l_59': 'decoder.9.2.layer_norm',
                        'l_60': 'decoder.9.2.DenseReluDense.wi',
                        'l_61': 'decoder.9.2.DenseReluDense.dropout',
                        'l_62': 'decoder.9.2.DenseReluDense.wo',
                        'l_63': 'decoder.9.2.dropout',
                        'l_64': 'decoder.10.0.layer_norm',
                        'l_65': 'decoder.10.0.SelfAttention.q',
                        'l_66': 'decoder.10.0.SelfAttention.k',
                        'l_67': 'decoder.10.0.SelfAttention.v',
                        'l_68': 'decoder.10.0.SelfAttention.dropout',
                        'l_69': 'decoder.10.0.SelfAttention.o',
                        'l_70': 'decoder.10.0.dropout',
                        'l_71': 'decoder.10.1.layer_norm',
                        'l_72': 'decoder.10.1.EncDecAttention.q',
                        'l_73': 'decoder.10.1.EncDecAttention.dropout',
                        'l_74': 'decoder.10.1.EncDecAttention.o',
                        'l_75': 'decoder.10.1.dropout',
                        'l_76': 'decoder.10.2.layer_norm',
                        'l_77': 'decoder.10.2.DenseReluDense.wi',
                        'l_78': 'decoder.10.2.DenseReluDense.dropout',
                        'l_79': 'decoder.10.2.DenseReluDense.wo',
                        'l_80': 'decoder.10.2.dropout',
                        'l_81': 'decoder.11.0.layer_norm',
                        'l_82': 'decoder.11.0.SelfAttention.q',
                        'l_83': 'decoder.11.0.SelfAttention.k',
                        'l_84': 'decoder.11.0.SelfAttention.v',
                        'l_85': 'decoder.11.0.SelfAttention.dropout',
                        'l_86': 'decoder.11.0.SelfAttention.o',
                        'l_87': 'decoder.11.0.dropout',
                        'l_88': 'decoder.11.1.layer_norm',
                        'l_89': 'decoder.11.1.EncDecAttention.q',
                        'l_90': 'decoder.11.1.EncDecAttention.dropout',
                        'l_91': 'decoder.11.1.EncDecAttention.o',
                        'l_92': 'decoder.11.1.dropout',
                        'l_93': 'decoder.11.2.layer_norm',
                        'l_94': 'decoder.11.2.DenseReluDense.wi',
                        'l_95': 'decoder.11.2.DenseReluDense.dropout',
                        'l_96': 'decoder.11.2.DenseReluDense.wo',
                        'l_97': 'decoder.11.2.dropout',
                        'l_98': 'decoder.12.0.layer_norm',
                        'l_99': 'decoder.12.0.SelfAttention.q',
                        'l_100': 'decoder.12.0.SelfAttention.k',
                        'l_101': 'decoder.12.0.SelfAttention.v',
                        'l_102': 'decoder.12.0.SelfAttention.dropout'}
        self.to(self.device)

    def forward(self, *args):
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[6]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Dropout[dropout] <=> self.l_0
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[6]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Linear[o] <=> self.l_1
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[6]/T5LayerSelfAttention[0]/Dropout[dropout] <=> self.l_2
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[6]/T5LayerCrossAttention[1]/T5LayerNorm[layer_norm] <=> self.l_3
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[6]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Linear[q] <=> self.l_4
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[6]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Dropout[dropout] <=> self.l_5
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[6]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Linear[o] <=> self.l_6
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[6]/T5LayerCrossAttention[1]/Dropout[dropout] <=> self.l_7
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[6]/T5LayerFF[2]/T5LayerNorm[layer_norm] <=> self.l_8
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[6]/T5LayerFF[2]/T5DenseReluDense[DenseReluDense]/Linear[wi] <=> self.l_9
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[6]/T5LayerFF[2]/T5DenseReluDense[DenseReluDense]/Dropout[dropout] <=> self.l_10
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[6]/T5LayerFF[2]/T5DenseReluDense[DenseReluDense]/Linear[wo] <=> self.l_11
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[6]/T5LayerFF[2]/Dropout[dropout] <=> self.l_12
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[7]/T5LayerSelfAttention[0]/T5LayerNorm[layer_norm] <=> self.l_13
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[7]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Linear[q] <=> self.l_14
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[7]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Linear[k] <=> self.l_15
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[7]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Linear[v] <=> self.l_16
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[7]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Dropout[dropout] <=> self.l_17
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[7]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Linear[o] <=> self.l_18
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[7]/T5LayerSelfAttention[0]/Dropout[dropout] <=> self.l_19
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[7]/T5LayerCrossAttention[1]/T5LayerNorm[layer_norm] <=> self.l_20
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[7]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Linear[q] <=> self.l_21
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[7]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Dropout[dropout] <=> self.l_22
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[7]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Linear[o] <=> self.l_23
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[7]/T5LayerCrossAttention[1]/Dropout[dropout] <=> self.l_24
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[7]/T5LayerFF[2]/T5LayerNorm[layer_norm] <=> self.l_25
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[7]/T5LayerFF[2]/T5DenseReluDense[DenseReluDense]/Linear[wi] <=> self.l_26
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[7]/T5LayerFF[2]/T5DenseReluDense[DenseReluDense]/Dropout[dropout] <=> self.l_27
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[7]/T5LayerFF[2]/T5DenseReluDense[DenseReluDense]/Linear[wo] <=> self.l_28
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[7]/T5LayerFF[2]/Dropout[dropout] <=> self.l_29
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[8]/T5LayerSelfAttention[0]/T5LayerNorm[layer_norm] <=> self.l_30
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[8]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Linear[q] <=> self.l_31
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[8]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Linear[k] <=> self.l_32
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[8]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Linear[v] <=> self.l_33
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[8]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Dropout[dropout] <=> self.l_34
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[8]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Linear[o] <=> self.l_35
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[8]/T5LayerSelfAttention[0]/Dropout[dropout] <=> self.l_36
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[8]/T5LayerCrossAttention[1]/T5LayerNorm[layer_norm] <=> self.l_37
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[8]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Linear[q] <=> self.l_38
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[8]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Dropout[dropout] <=> self.l_39
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[8]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Linear[o] <=> self.l_40
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[8]/T5LayerCrossAttention[1]/Dropout[dropout] <=> self.l_41
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[8]/T5LayerFF[2]/T5LayerNorm[layer_norm] <=> self.l_42
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[8]/T5LayerFF[2]/T5DenseReluDense[DenseReluDense]/Linear[wi] <=> self.l_43
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[8]/T5LayerFF[2]/T5DenseReluDense[DenseReluDense]/Dropout[dropout] <=> self.l_44
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[8]/T5LayerFF[2]/T5DenseReluDense[DenseReluDense]/Linear[wo] <=> self.l_45
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[8]/T5LayerFF[2]/Dropout[dropout] <=> self.l_46
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[9]/T5LayerSelfAttention[0]/T5LayerNorm[layer_norm] <=> self.l_47
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[9]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Linear[q] <=> self.l_48
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[9]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Linear[k] <=> self.l_49
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[9]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Linear[v] <=> self.l_50
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[9]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Dropout[dropout] <=> self.l_51
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[9]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Linear[o] <=> self.l_52
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[9]/T5LayerSelfAttention[0]/Dropout[dropout] <=> self.l_53
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[9]/T5LayerCrossAttention[1]/T5LayerNorm[layer_norm] <=> self.l_54
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[9]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Linear[q] <=> self.l_55
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[9]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Dropout[dropout] <=> self.l_56
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[9]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Linear[o] <=> self.l_57
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[9]/T5LayerCrossAttention[1]/Dropout[dropout] <=> self.l_58
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[9]/T5LayerFF[2]/T5LayerNorm[layer_norm] <=> self.l_59
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[9]/T5LayerFF[2]/T5DenseReluDense[DenseReluDense]/Linear[wi] <=> self.l_60
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[9]/T5LayerFF[2]/T5DenseReluDense[DenseReluDense]/Dropout[dropout] <=> self.l_61
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[9]/T5LayerFF[2]/T5DenseReluDense[DenseReluDense]/Linear[wo] <=> self.l_62
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[9]/T5LayerFF[2]/Dropout[dropout] <=> self.l_63
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[10]/T5LayerSelfAttention[0]/T5LayerNorm[layer_norm] <=> self.l_64
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[10]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Linear[q] <=> self.l_65
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[10]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Linear[k] <=> self.l_66
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[10]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Linear[v] <=> self.l_67
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[10]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Dropout[dropout] <=> self.l_68
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[10]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Linear[o] <=> self.l_69
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[10]/T5LayerSelfAttention[0]/Dropout[dropout] <=> self.l_70
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[10]/T5LayerCrossAttention[1]/T5LayerNorm[layer_norm] <=> self.l_71
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[10]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Linear[q] <=> self.l_72
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[10]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Dropout[dropout] <=> self.l_73
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[10]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Linear[o] <=> self.l_74
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[10]/T5LayerCrossAttention[1]/Dropout[dropout] <=> self.l_75
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[10]/T5LayerFF[2]/T5LayerNorm[layer_norm] <=> self.l_76
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[10]/T5LayerFF[2]/T5DenseReluDense[DenseReluDense]/Linear[wi] <=> self.l_77
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[10]/T5LayerFF[2]/T5DenseReluDense[DenseReluDense]/Dropout[dropout] <=> self.l_78
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[10]/T5LayerFF[2]/T5DenseReluDense[DenseReluDense]/Linear[wo] <=> self.l_79
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[10]/T5LayerFF[2]/Dropout[dropout] <=> self.l_80
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[11]/T5LayerSelfAttention[0]/T5LayerNorm[layer_norm] <=> self.l_81
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[11]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Linear[q] <=> self.l_82
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[11]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Linear[k] <=> self.l_83
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[11]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Linear[v] <=> self.l_84
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[11]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Dropout[dropout] <=> self.l_85
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[11]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Linear[o] <=> self.l_86
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[11]/T5LayerSelfAttention[0]/Dropout[dropout] <=> self.l_87
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[11]/T5LayerCrossAttention[1]/T5LayerNorm[layer_norm] <=> self.l_88
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[11]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Linear[q] <=> self.l_89
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[11]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Dropout[dropout] <=> self.l_90
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[11]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Linear[o] <=> self.l_91
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[11]/T5LayerCrossAttention[1]/Dropout[dropout] <=> self.l_92
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[11]/T5LayerFF[2]/T5LayerNorm[layer_norm] <=> self.l_93
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[11]/T5LayerFF[2]/T5DenseReluDense[DenseReluDense]/Linear[wi] <=> self.l_94
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[11]/T5LayerFF[2]/T5DenseReluDense[DenseReluDense]/Dropout[dropout] <=> self.l_95
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[11]/T5LayerFF[2]/T5DenseReluDense[DenseReluDense]/Linear[wo] <=> self.l_96
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[11]/T5LayerFF[2]/Dropout[dropout] <=> self.l_97
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[12]/T5LayerSelfAttention[0]/T5LayerNorm[layer_norm] <=> self.l_98
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[12]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Linear[q] <=> self.l_99
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[12]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Linear[k] <=> self.l_100
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[12]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Linear[v] <=> self.l_101
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[12]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Dropout[dropout] <=> self.l_102
        # T5ForConditionalGeneration/T5Stack[decoder]/tuple::__getitem___1764 <=> x0
        # T5ForConditionalGeneration/T5Stack[decoder]/tuple::__getitem___1766 <=> x1
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[5]/T5LayerFF[2]/Tensor::__add___2316 <=> x2
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[6]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Size::__getitem___2320 <=> x3
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[6]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Linear[q] <=> x4
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[6]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Tensor::transpose_2336 <=> x5
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[6]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Linear[v] <=> x6
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[6]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Linear[k] <=> x7
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[6]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Linear[v] <=> x8
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[7]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Linear[k] <=> x9
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[7]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Linear[v] <=> x10
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[8]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Linear[k] <=> x11
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[8]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Linear[v] <=> x12
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[9]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Linear[k] <=> x13
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[9]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Linear[v] <=> x14
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[10]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Linear[k] <=> x15
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[10]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Linear[v] <=> x16
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[11]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Linear[k] <=> x17
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[11]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Linear[v] <=> x18

        # moving inputs to current device no op if already on the correct device
        x0, x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18 = move_tensors(unflatten(args,self.input_structure), self.device)
        t_0 = x4.view(x3, -1, 32, 128)
        t_0 = t_0.transpose(1, 2)
        t_1 = x6.view(x3, -1, 32, 128)
        t_1 = t_1.transpose(1, 2)
        t_2 = x5.transpose(3, 2)
        t_2 = torch.matmul(t_0, t_2)
        t_2 += x0
        t_0 = t_2.float()
        t_0 = torch.nn.functional.softmax(t_0, dim=-1, _stacklevel=3, dtype=None)
        t_2 = t_0.type_as(t_2)
        t_2 = self.l_0(t_2)
        t_1 = torch.matmul(t_2, t_1)
        t_1 = t_1.transpose(1, 2)
        t_1 = t_1.contiguous()
        t_1 = t_1.view(x3, -1, 4096)
        t_1 = self.l_1(t_1)
        t_1 = self.l_2(t_1)
        t_1 = x2 + t_1
        t_2 = self.l_3(t_1)
        t_0 = t_2.size()
        t_0 = t_0[0]
        t_2 = self.l_4(t_2)
        t_2 = t_2.view(t_0, -1, 32, 128)
        t_2 = t_2.transpose(1, 2)
        t_3 = x7.view(t_0, -1, 32, 128)
        t_3 = t_3.transpose(1, 2)
        t_4 = x8.view(t_0, -1, 32, 128)
        t_4 = t_4.transpose(1, 2)
        t_3 = t_3.transpose(3, 2)
        t_3 = torch.matmul(t_2, t_3)
        t_3 += x1
        t_2 = t_3.float()
        t_2 = torch.nn.functional.softmax(t_2, dim=-1, _stacklevel=3, dtype=None)
        t_3 = t_2.type_as(t_3)
        t_3 = self.l_5(t_3)
        t_4 = torch.matmul(t_3, t_4)
        t_4 = t_4.transpose(1, 2)
        t_4 = t_4.contiguous()
        t_0 = t_4.view(t_0, -1, 4096)
        t_0 = self.l_6(t_0)
        t_0 = self.l_7(t_0)
        t_0 = t_1 + t_0
        t_1 = self.l_8(t_0)
        t_1 = self.l_9(t_1)
        t_1 = torch.nn.functional.relu(t_1, inplace=False)
        t_1 = self.l_10(t_1)
        t_1 = self.l_11(t_1)
        t_1 = self.l_12(t_1)
        t_1 = t_0 + t_1
        t_0 = self.l_13(t_1)
        t_4 = t_0.size()
        t_4 = t_4[0]
        t_3 = self.l_14(t_0)
        t_3 = t_3.view(t_4, -1, 32, 128)
        t_3 = t_3.transpose(1, 2)
        t_2 = self.l_15(t_0)
        t_2 = t_2.view(t_4, -1, 32, 128)
        t_2 = t_2.transpose(1, 2)
        t_0 = self.l_16(t_0)
        t_0 = t_0.view(t_4, -1, 32, 128)
        t_0 = t_0.transpose(1, 2)
        t_2 = t_2.transpose(3, 2)
        t_2 = torch.matmul(t_3, t_2)
        t_2 += x0
        t_3 = t_2.float()
        t_3 = torch.nn.functional.softmax(t_3, dim=-1, _stacklevel=3, dtype=None)
        t_2 = t_3.type_as(t_2)
        t_2 = self.l_17(t_2)
        t_0 = torch.matmul(t_2, t_0)
        t_0 = t_0.transpose(1, 2)
        t_0 = t_0.contiguous()
        t_4 = t_0.view(t_4, -1, 4096)
        t_4 = self.l_18(t_4)
        t_4 = self.l_19(t_4)
        t_4 = t_1 + t_4
        t_1 = self.l_20(t_4)
        t_0 = t_1.size()
        t_0 = t_0[0]
        t_1 = self.l_21(t_1)
        t_1 = t_1.view(t_0, -1, 32, 128)
        t_1 = t_1.transpose(1, 2)
        t_2 = x9.view(t_0, -1, 32, 128)
        t_2 = t_2.transpose(1, 2)
        t_3 = x10.view(t_0, -1, 32, 128)
        t_3 = t_3.transpose(1, 2)
        t_2 = t_2.transpose(3, 2)
        t_2 = torch.matmul(t_1, t_2)
        t_2 += x1
        t_1 = t_2.float()
        t_1 = torch.nn.functional.softmax(t_1, dim=-1, _stacklevel=3, dtype=None)
        t_2 = t_1.type_as(t_2)
        t_2 = self.l_22(t_2)
        t_3 = torch.matmul(t_2, t_3)
        t_3 = t_3.transpose(1, 2)
        t_3 = t_3.contiguous()
        t_0 = t_3.view(t_0, -1, 4096)
        t_0 = self.l_23(t_0)
        t_0 = self.l_24(t_0)
        t_0 = t_4 + t_0
        t_4 = self.l_25(t_0)
        t_4 = self.l_26(t_4)
        t_4 = torch.nn.functional.relu(t_4, inplace=False)
        t_4 = self.l_27(t_4)
        t_4 = self.l_28(t_4)
        t_4 = self.l_29(t_4)
        t_4 = t_0 + t_4
        t_0 = self.l_30(t_4)
        t_3 = t_0.size()
        t_3 = t_3[0]
        t_2 = self.l_31(t_0)
        t_2 = t_2.view(t_3, -1, 32, 128)
        t_2 = t_2.transpose(1, 2)
        t_1 = self.l_32(t_0)
        t_1 = t_1.view(t_3, -1, 32, 128)
        t_1 = t_1.transpose(1, 2)
        t_0 = self.l_33(t_0)
        t_0 = t_0.view(t_3, -1, 32, 128)
        t_0 = t_0.transpose(1, 2)
        t_1 = t_1.transpose(3, 2)
        t_1 = torch.matmul(t_2, t_1)
        t_1 += x0
        t_2 = t_1.float()
        t_2 = torch.nn.functional.softmax(t_2, dim=-1, _stacklevel=3, dtype=None)
        t_1 = t_2.type_as(t_1)
        t_1 = self.l_34(t_1)
        t_0 = torch.matmul(t_1, t_0)
        t_0 = t_0.transpose(1, 2)
        t_0 = t_0.contiguous()
        t_3 = t_0.view(t_3, -1, 4096)
        t_3 = self.l_35(t_3)
        t_3 = self.l_36(t_3)
        t_3 = t_4 + t_3
        t_4 = self.l_37(t_3)
        t_0 = t_4.size()
        t_0 = t_0[0]
        t_4 = self.l_38(t_4)
        t_4 = t_4.view(t_0, -1, 32, 128)
        t_4 = t_4.transpose(1, 2)
        t_1 = x11.view(t_0, -1, 32, 128)
        t_1 = t_1.transpose(1, 2)
        t_2 = x12.view(t_0, -1, 32, 128)
        t_2 = t_2.transpose(1, 2)
        t_1 = t_1.transpose(3, 2)
        t_1 = torch.matmul(t_4, t_1)
        t_1 += x1
        t_4 = t_1.float()
        t_4 = torch.nn.functional.softmax(t_4, dim=-1, _stacklevel=3, dtype=None)
        t_1 = t_4.type_as(t_1)
        t_1 = self.l_39(t_1)
        t_2 = torch.matmul(t_1, t_2)
        t_2 = t_2.transpose(1, 2)
        t_2 = t_2.contiguous()
        t_0 = t_2.view(t_0, -1, 4096)
        t_0 = self.l_40(t_0)
        t_0 = self.l_41(t_0)
        t_0 = t_3 + t_0
        t_3 = self.l_42(t_0)
        t_3 = self.l_43(t_3)
        t_3 = torch.nn.functional.relu(t_3, inplace=False)
        t_3 = self.l_44(t_3)
        t_3 = self.l_45(t_3)
        t_3 = self.l_46(t_3)
        t_3 = t_0 + t_3
        t_0 = self.l_47(t_3)
        t_2 = t_0.size()
        t_2 = t_2[0]
        t_1 = self.l_48(t_0)
        t_1 = t_1.view(t_2, -1, 32, 128)
        t_1 = t_1.transpose(1, 2)
        t_4 = self.l_49(t_0)
        t_4 = t_4.view(t_2, -1, 32, 128)
        t_4 = t_4.transpose(1, 2)
        t_0 = self.l_50(t_0)
        t_0 = t_0.view(t_2, -1, 32, 128)
        t_0 = t_0.transpose(1, 2)
        t_4 = t_4.transpose(3, 2)
        t_4 = torch.matmul(t_1, t_4)
        t_4 += x0
        t_1 = t_4.float()
        t_1 = torch.nn.functional.softmax(t_1, dim=-1, _stacklevel=3, dtype=None)
        t_4 = t_1.type_as(t_4)
        t_4 = self.l_51(t_4)
        t_0 = torch.matmul(t_4, t_0)
        t_0 = t_0.transpose(1, 2)
        t_0 = t_0.contiguous()
        t_2 = t_0.view(t_2, -1, 4096)
        t_2 = self.l_52(t_2)
        t_2 = self.l_53(t_2)
        t_2 = t_3 + t_2
        t_3 = self.l_54(t_2)
        t_0 = t_3.size()
        t_0 = t_0[0]
        t_3 = self.l_55(t_3)
        t_3 = t_3.view(t_0, -1, 32, 128)
        t_3 = t_3.transpose(1, 2)
        t_4 = x13.view(t_0, -1, 32, 128)
        t_4 = t_4.transpose(1, 2)
        t_1 = x14.view(t_0, -1, 32, 128)
        t_1 = t_1.transpose(1, 2)
        t_4 = t_4.transpose(3, 2)
        t_4 = torch.matmul(t_3, t_4)
        t_4 += x1
        t_3 = t_4.float()
        t_3 = torch.nn.functional.softmax(t_3, dim=-1, _stacklevel=3, dtype=None)
        t_4 = t_3.type_as(t_4)
        t_4 = self.l_56(t_4)
        t_1 = torch.matmul(t_4, t_1)
        t_1 = t_1.transpose(1, 2)
        t_1 = t_1.contiguous()
        t_0 = t_1.view(t_0, -1, 4096)
        t_0 = self.l_57(t_0)
        t_0 = self.l_58(t_0)
        t_0 = t_2 + t_0
        t_2 = self.l_59(t_0)
        t_2 = self.l_60(t_2)
        t_2 = torch.nn.functional.relu(t_2, inplace=False)
        t_2 = self.l_61(t_2)
        t_2 = self.l_62(t_2)
        t_2 = self.l_63(t_2)
        t_2 = t_0 + t_2
        t_0 = self.l_64(t_2)
        t_1 = t_0.size()
        t_1 = t_1[0]
        t_4 = self.l_65(t_0)
        t_4 = t_4.view(t_1, -1, 32, 128)
        t_4 = t_4.transpose(1, 2)
        t_3 = self.l_66(t_0)
        t_3 = t_3.view(t_1, -1, 32, 128)
        t_3 = t_3.transpose(1, 2)
        t_0 = self.l_67(t_0)
        t_0 = t_0.view(t_1, -1, 32, 128)
        t_0 = t_0.transpose(1, 2)
        t_3 = t_3.transpose(3, 2)
        t_3 = torch.matmul(t_4, t_3)
        t_3 += x0
        t_4 = t_3.float()
        t_4 = torch.nn.functional.softmax(t_4, dim=-1, _stacklevel=3, dtype=None)
        t_3 = t_4.type_as(t_3)
        t_3 = self.l_68(t_3)
        t_0 = torch.matmul(t_3, t_0)
        t_0 = t_0.transpose(1, 2)
        t_0 = t_0.contiguous()
        t_1 = t_0.view(t_1, -1, 4096)
        t_1 = self.l_69(t_1)
        t_1 = self.l_70(t_1)
        t_1 = t_2 + t_1
        t_2 = self.l_71(t_1)
        t_0 = t_2.size()
        t_0 = t_0[0]
        t_2 = self.l_72(t_2)
        t_2 = t_2.view(t_0, -1, 32, 128)
        t_2 = t_2.transpose(1, 2)
        t_3 = x15.view(t_0, -1, 32, 128)
        t_3 = t_3.transpose(1, 2)
        t_4 = x16.view(t_0, -1, 32, 128)
        t_4 = t_4.transpose(1, 2)
        t_3 = t_3.transpose(3, 2)
        t_3 = torch.matmul(t_2, t_3)
        t_3 += x1
        t_2 = t_3.float()
        t_2 = torch.nn.functional.softmax(t_2, dim=-1, _stacklevel=3, dtype=None)
        t_3 = t_2.type_as(t_3)
        t_3 = self.l_73(t_3)
        t_4 = torch.matmul(t_3, t_4)
        t_4 = t_4.transpose(1, 2)
        t_4 = t_4.contiguous()
        t_0 = t_4.view(t_0, -1, 4096)
        t_0 = self.l_74(t_0)
        t_0 = self.l_75(t_0)
        t_0 = t_1 + t_0
        t_1 = self.l_76(t_0)
        t_1 = self.l_77(t_1)
        t_1 = torch.nn.functional.relu(t_1, inplace=False)
        t_1 = self.l_78(t_1)
        t_1 = self.l_79(t_1)
        t_1 = self.l_80(t_1)
        t_1 = t_0 + t_1
        t_0 = self.l_81(t_1)
        t_4 = t_0.size()
        t_4 = t_4[0]
        t_3 = self.l_82(t_0)
        t_3 = t_3.view(t_4, -1, 32, 128)
        t_3 = t_3.transpose(1, 2)
        t_2 = self.l_83(t_0)
        t_2 = t_2.view(t_4, -1, 32, 128)
        t_2 = t_2.transpose(1, 2)
        t_0 = self.l_84(t_0)
        t_0 = t_0.view(t_4, -1, 32, 128)
        t_0 = t_0.transpose(1, 2)
        t_2 = t_2.transpose(3, 2)
        t_2 = torch.matmul(t_3, t_2)
        t_2 += x0
        t_3 = t_2.float()
        t_3 = torch.nn.functional.softmax(t_3, dim=-1, _stacklevel=3, dtype=None)
        t_2 = t_3.type_as(t_2)
        t_2 = self.l_85(t_2)
        t_0 = torch.matmul(t_2, t_0)
        t_0 = t_0.transpose(1, 2)
        t_0 = t_0.contiguous()
        t_4 = t_0.view(t_4, -1, 4096)
        t_4 = self.l_86(t_4)
        t_4 = self.l_87(t_4)
        t_4 = t_1 + t_4
        t_1 = self.l_88(t_4)
        t_0 = t_1.size()
        t_0 = t_0[0]
        t_1 = self.l_89(t_1)
        t_1 = t_1.view(t_0, -1, 32, 128)
        t_1 = t_1.transpose(1, 2)
        t_2 = x17.view(t_0, -1, 32, 128)
        t_2 = t_2.transpose(1, 2)
        t_3 = x18.view(t_0, -1, 32, 128)
        t_3 = t_3.transpose(1, 2)
        t_2 = t_2.transpose(3, 2)
        t_2 = torch.matmul(t_1, t_2)
        t_2 += x1
        t_1 = t_2.float()
        t_1 = torch.nn.functional.softmax(t_1, dim=-1, _stacklevel=3, dtype=None)
        t_2 = t_1.type_as(t_2)
        t_2 = self.l_90(t_2)
        t_3 = torch.matmul(t_2, t_3)
        t_3 = t_3.transpose(1, 2)
        t_3 = t_3.contiguous()
        t_0 = t_3.view(t_0, -1, 4096)
        t_0 = self.l_91(t_0)
        t_0 = self.l_92(t_0)
        t_0 = t_4 + t_0
        t_4 = self.l_93(t_0)
        t_4 = self.l_94(t_4)
        t_4 = torch.nn.functional.relu(t_4, inplace=False)
        t_4 = self.l_95(t_4)
        t_4 = self.l_96(t_4)
        t_4 = self.l_97(t_4)
        t_4 = t_0 + t_4
        t_0 = self.l_98(t_4)
        t_3 = t_0.size()
        t_3 = t_3[0]
        t_2 = self.l_99(t_0)
        t_2 = t_2.view(t_3, -1, 32, 128)
        t_2 = t_2.transpose(1, 2)
        t_1 = self.l_100(t_0)
        t_1 = t_1.view(t_3, -1, 32, 128)
        t_1 = t_1.transpose(1, 2)
        t_0 = self.l_101(t_0)
        t_1 = t_1.transpose(3, 2)
        t_1 = torch.matmul(t_2, t_1)
        t_1 += x0
        t_2 = t_1.float()
        t_2 = torch.nn.functional.softmax(t_2, dim=-1, _stacklevel=3, dtype=None)
        t_1 = t_2.type_as(t_1)
        t_1 = self.l_102(t_1)
        # returning:
        # T5ForConditionalGeneration/T5Stack[decoder]/tuple::__getitem___1764
        # T5ForConditionalGeneration/T5Stack[decoder]/tuple::__getitem___1766
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[11]/T5LayerFF[2]/Tensor::__add___2976
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[12]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Size::__getitem___2980
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[12]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Linear[v]
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[12]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Dropout[dropout]
        return list(flatten((x0, x1, t_4, t_3, t_0, t_1)))

    def state_dict(self,*args,**kwargs):
        # we return the state dict of this part as it should be in the original model
        return state_dict(self,*args,**kwargs)

    def load_state_dict(self, state):
        return load_state_dict(self,state)

    def named_parameters(self,recurse=True):
        # we return the named parameters of this part as it should be in the original model
        return named_parameters(self,recurse=recurse)

    def named_buffers(self,recurse=True):
        # we return the named buffers of this part as it should be in the original model
        return named_buffers(self,recurse=recurse)

    def cpu(self):
        return cpu(self)

    def cuda(self,device=None):
        return cuda(self,device=device)

    def to(self, *args, **kwargs):
        return to(self,*args,**kwargs)


class Partition6(nn.Module):
    LAYER_SCOPES=[
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[12]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Linear[o]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[12]/T5LayerSelfAttention[0]/Dropout[dropout]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[12]/T5LayerCrossAttention[1]/T5LayerNorm[layer_norm]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[12]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Linear[q]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[12]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Dropout[dropout]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[12]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Linear[o]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[12]/T5LayerCrossAttention[1]/Dropout[dropout]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[12]/T5LayerFF[2]/T5LayerNorm[layer_norm]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[12]/T5LayerFF[2]/T5DenseReluDense[DenseReluDense]/Linear[wi]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[12]/T5LayerFF[2]/T5DenseReluDense[DenseReluDense]/Dropout[dropout]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[12]/T5LayerFF[2]/T5DenseReluDense[DenseReluDense]/Linear[wo]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[12]/T5LayerFF[2]/Dropout[dropout]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[13]/T5LayerSelfAttention[0]/T5LayerNorm[layer_norm]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[13]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Linear[q]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[13]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Linear[k]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[13]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Linear[v]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[13]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Dropout[dropout]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[13]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Linear[o]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[13]/T5LayerSelfAttention[0]/Dropout[dropout]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[13]/T5LayerCrossAttention[1]/T5LayerNorm[layer_norm]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[13]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Linear[q]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[13]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Dropout[dropout]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[13]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Linear[o]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[13]/T5LayerCrossAttention[1]/Dropout[dropout]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[13]/T5LayerFF[2]/T5LayerNorm[layer_norm]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[13]/T5LayerFF[2]/T5DenseReluDense[DenseReluDense]/Linear[wi]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[13]/T5LayerFF[2]/T5DenseReluDense[DenseReluDense]/Dropout[dropout]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[13]/T5LayerFF[2]/T5DenseReluDense[DenseReluDense]/Linear[wo]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[13]/T5LayerFF[2]/Dropout[dropout]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[14]/T5LayerSelfAttention[0]/T5LayerNorm[layer_norm]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[14]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Linear[q]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[14]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Linear[k]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[14]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Linear[v]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[14]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Dropout[dropout]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[14]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Linear[o]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[14]/T5LayerSelfAttention[0]/Dropout[dropout]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[14]/T5LayerCrossAttention[1]/T5LayerNorm[layer_norm]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[14]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Linear[q]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[14]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Dropout[dropout]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[14]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Linear[o]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[14]/T5LayerCrossAttention[1]/Dropout[dropout]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[14]/T5LayerFF[2]/T5LayerNorm[layer_norm]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[14]/T5LayerFF[2]/T5DenseReluDense[DenseReluDense]/Linear[wi]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[14]/T5LayerFF[2]/T5DenseReluDense[DenseReluDense]/Dropout[dropout]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[14]/T5LayerFF[2]/T5DenseReluDense[DenseReluDense]/Linear[wo]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[14]/T5LayerFF[2]/Dropout[dropout]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[15]/T5LayerSelfAttention[0]/T5LayerNorm[layer_norm]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[15]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Linear[q]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[15]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Linear[k]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[15]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Linear[v]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[15]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Dropout[dropout]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[15]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Linear[o]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[15]/T5LayerSelfAttention[0]/Dropout[dropout]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[15]/T5LayerCrossAttention[1]/T5LayerNorm[layer_norm]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[15]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Linear[q]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[15]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Dropout[dropout]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[15]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Linear[o]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[15]/T5LayerCrossAttention[1]/Dropout[dropout]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[15]/T5LayerFF[2]/T5LayerNorm[layer_norm]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[15]/T5LayerFF[2]/T5DenseReluDense[DenseReluDense]/Linear[wi]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[15]/T5LayerFF[2]/T5DenseReluDense[DenseReluDense]/Dropout[dropout]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[15]/T5LayerFF[2]/T5DenseReluDense[DenseReluDense]/Linear[wo]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[15]/T5LayerFF[2]/Dropout[dropout]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[16]/T5LayerSelfAttention[0]/T5LayerNorm[layer_norm]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[16]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Linear[q]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[16]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Linear[k]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[16]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Linear[v]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[16]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Dropout[dropout]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[16]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Linear[o]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[16]/T5LayerSelfAttention[0]/Dropout[dropout]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[16]/T5LayerCrossAttention[1]/T5LayerNorm[layer_norm]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[16]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Linear[q]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[16]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Dropout[dropout]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[16]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Linear[o]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[16]/T5LayerCrossAttention[1]/Dropout[dropout]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[16]/T5LayerFF[2]/T5LayerNorm[layer_norm]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[16]/T5LayerFF[2]/T5DenseReluDense[DenseReluDense]/Linear[wi]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[16]/T5LayerFF[2]/T5DenseReluDense[DenseReluDense]/Dropout[dropout]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[16]/T5LayerFF[2]/T5DenseReluDense[DenseReluDense]/Linear[wo]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[16]/T5LayerFF[2]/Dropout[dropout]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[17]/T5LayerSelfAttention[0]/T5LayerNorm[layer_norm]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[17]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Linear[q]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[17]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Linear[k]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[17]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Linear[v]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[17]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Dropout[dropout]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[17]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Linear[o]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[17]/T5LayerSelfAttention[0]/Dropout[dropout]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[17]/T5LayerCrossAttention[1]/T5LayerNorm[layer_norm]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[17]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Linear[q]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[17]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Dropout[dropout]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[17]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Linear[o]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[17]/T5LayerCrossAttention[1]/Dropout[dropout]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[17]/T5LayerFF[2]/T5LayerNorm[layer_norm]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[17]/T5LayerFF[2]/T5DenseReluDense[DenseReluDense]/Linear[wi]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[17]/T5LayerFF[2]/T5DenseReluDense[DenseReluDense]/Dropout[dropout]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[17]/T5LayerFF[2]/T5DenseReluDense[DenseReluDense]/Linear[wo]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[17]/T5LayerFF[2]/Dropout[dropout]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[18]/T5LayerSelfAttention[0]/T5LayerNorm[layer_norm]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[18]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Linear[q]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[18]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Linear[k]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[18]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Linear[v]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[18]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Dropout[dropout]',
        ]
    TENSORS=[
        ]
    def __init__(self, layers, tensors, device='cuda:6'):
        super().__init__()

        #initialize partition layers
        for idx,layer_scope in enumerate(self.LAYER_SCOPES):
            self.add_module(f'l_{idx}',layers[layer_scope])

        #initialize partition tensors
        b=p=0
        for tensor_scope in self.TENSORS:
            tensor=tensors[tensor_scope]
            if isinstance(tensor,nn.Parameter):
                self.register_parameter(f'p_{p}',tensor)
                p+=1
            else:
                self.register_buffer(f'b_{b}',tensor)
                b+=1

        self.device = torch.device(device)
        self.input_structure = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
        self.lookup = { 'l_0': 'decoder.12.0.SelfAttention.o',
                        'l_1': 'decoder.12.0.dropout',
                        'l_2': 'decoder.12.1.layer_norm',
                        'l_3': 'decoder.12.1.EncDecAttention.q',
                        'l_4': 'decoder.12.1.EncDecAttention.dropout',
                        'l_5': 'decoder.12.1.EncDecAttention.o',
                        'l_6': 'decoder.12.1.dropout',
                        'l_7': 'decoder.12.2.layer_norm',
                        'l_8': 'decoder.12.2.DenseReluDense.wi',
                        'l_9': 'decoder.12.2.DenseReluDense.dropout',
                        'l_10': 'decoder.12.2.DenseReluDense.wo',
                        'l_11': 'decoder.12.2.dropout',
                        'l_12': 'decoder.13.0.layer_norm',
                        'l_13': 'decoder.13.0.SelfAttention.q',
                        'l_14': 'decoder.13.0.SelfAttention.k',
                        'l_15': 'decoder.13.0.SelfAttention.v',
                        'l_16': 'decoder.13.0.SelfAttention.dropout',
                        'l_17': 'decoder.13.0.SelfAttention.o',
                        'l_18': 'decoder.13.0.dropout',
                        'l_19': 'decoder.13.1.layer_norm',
                        'l_20': 'decoder.13.1.EncDecAttention.q',
                        'l_21': 'decoder.13.1.EncDecAttention.dropout',
                        'l_22': 'decoder.13.1.EncDecAttention.o',
                        'l_23': 'decoder.13.1.dropout',
                        'l_24': 'decoder.13.2.layer_norm',
                        'l_25': 'decoder.13.2.DenseReluDense.wi',
                        'l_26': 'decoder.13.2.DenseReluDense.dropout',
                        'l_27': 'decoder.13.2.DenseReluDense.wo',
                        'l_28': 'decoder.13.2.dropout',
                        'l_29': 'decoder.14.0.layer_norm',
                        'l_30': 'decoder.14.0.SelfAttention.q',
                        'l_31': 'decoder.14.0.SelfAttention.k',
                        'l_32': 'decoder.14.0.SelfAttention.v',
                        'l_33': 'decoder.14.0.SelfAttention.dropout',
                        'l_34': 'decoder.14.0.SelfAttention.o',
                        'l_35': 'decoder.14.0.dropout',
                        'l_36': 'decoder.14.1.layer_norm',
                        'l_37': 'decoder.14.1.EncDecAttention.q',
                        'l_38': 'decoder.14.1.EncDecAttention.dropout',
                        'l_39': 'decoder.14.1.EncDecAttention.o',
                        'l_40': 'decoder.14.1.dropout',
                        'l_41': 'decoder.14.2.layer_norm',
                        'l_42': 'decoder.14.2.DenseReluDense.wi',
                        'l_43': 'decoder.14.2.DenseReluDense.dropout',
                        'l_44': 'decoder.14.2.DenseReluDense.wo',
                        'l_45': 'decoder.14.2.dropout',
                        'l_46': 'decoder.15.0.layer_norm',
                        'l_47': 'decoder.15.0.SelfAttention.q',
                        'l_48': 'decoder.15.0.SelfAttention.k',
                        'l_49': 'decoder.15.0.SelfAttention.v',
                        'l_50': 'decoder.15.0.SelfAttention.dropout',
                        'l_51': 'decoder.15.0.SelfAttention.o',
                        'l_52': 'decoder.15.0.dropout',
                        'l_53': 'decoder.15.1.layer_norm',
                        'l_54': 'decoder.15.1.EncDecAttention.q',
                        'l_55': 'decoder.15.1.EncDecAttention.dropout',
                        'l_56': 'decoder.15.1.EncDecAttention.o',
                        'l_57': 'decoder.15.1.dropout',
                        'l_58': 'decoder.15.2.layer_norm',
                        'l_59': 'decoder.15.2.DenseReluDense.wi',
                        'l_60': 'decoder.15.2.DenseReluDense.dropout',
                        'l_61': 'decoder.15.2.DenseReluDense.wo',
                        'l_62': 'decoder.15.2.dropout',
                        'l_63': 'decoder.16.0.layer_norm',
                        'l_64': 'decoder.16.0.SelfAttention.q',
                        'l_65': 'decoder.16.0.SelfAttention.k',
                        'l_66': 'decoder.16.0.SelfAttention.v',
                        'l_67': 'decoder.16.0.SelfAttention.dropout',
                        'l_68': 'decoder.16.0.SelfAttention.o',
                        'l_69': 'decoder.16.0.dropout',
                        'l_70': 'decoder.16.1.layer_norm',
                        'l_71': 'decoder.16.1.EncDecAttention.q',
                        'l_72': 'decoder.16.1.EncDecAttention.dropout',
                        'l_73': 'decoder.16.1.EncDecAttention.o',
                        'l_74': 'decoder.16.1.dropout',
                        'l_75': 'decoder.16.2.layer_norm',
                        'l_76': 'decoder.16.2.DenseReluDense.wi',
                        'l_77': 'decoder.16.2.DenseReluDense.dropout',
                        'l_78': 'decoder.16.2.DenseReluDense.wo',
                        'l_79': 'decoder.16.2.dropout',
                        'l_80': 'decoder.17.0.layer_norm',
                        'l_81': 'decoder.17.0.SelfAttention.q',
                        'l_82': 'decoder.17.0.SelfAttention.k',
                        'l_83': 'decoder.17.0.SelfAttention.v',
                        'l_84': 'decoder.17.0.SelfAttention.dropout',
                        'l_85': 'decoder.17.0.SelfAttention.o',
                        'l_86': 'decoder.17.0.dropout',
                        'l_87': 'decoder.17.1.layer_norm',
                        'l_88': 'decoder.17.1.EncDecAttention.q',
                        'l_89': 'decoder.17.1.EncDecAttention.dropout',
                        'l_90': 'decoder.17.1.EncDecAttention.o',
                        'l_91': 'decoder.17.1.dropout',
                        'l_92': 'decoder.17.2.layer_norm',
                        'l_93': 'decoder.17.2.DenseReluDense.wi',
                        'l_94': 'decoder.17.2.DenseReluDense.dropout',
                        'l_95': 'decoder.17.2.DenseReluDense.wo',
                        'l_96': 'decoder.17.2.dropout',
                        'l_97': 'decoder.18.0.layer_norm',
                        'l_98': 'decoder.18.0.SelfAttention.q',
                        'l_99': 'decoder.18.0.SelfAttention.k',
                        'l_100': 'decoder.18.0.SelfAttention.v',
                        'l_101': 'decoder.18.0.SelfAttention.dropout'}
        self.to(self.device)

    def forward(self, *args):
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[12]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Linear[o] <=> self.l_0
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[12]/T5LayerSelfAttention[0]/Dropout[dropout] <=> self.l_1
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[12]/T5LayerCrossAttention[1]/T5LayerNorm[layer_norm] <=> self.l_2
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[12]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Linear[q] <=> self.l_3
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[12]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Dropout[dropout] <=> self.l_4
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[12]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Linear[o] <=> self.l_5
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[12]/T5LayerCrossAttention[1]/Dropout[dropout] <=> self.l_6
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[12]/T5LayerFF[2]/T5LayerNorm[layer_norm] <=> self.l_7
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[12]/T5LayerFF[2]/T5DenseReluDense[DenseReluDense]/Linear[wi] <=> self.l_8
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[12]/T5LayerFF[2]/T5DenseReluDense[DenseReluDense]/Dropout[dropout] <=> self.l_9
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[12]/T5LayerFF[2]/T5DenseReluDense[DenseReluDense]/Linear[wo] <=> self.l_10
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[12]/T5LayerFF[2]/Dropout[dropout] <=> self.l_11
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[13]/T5LayerSelfAttention[0]/T5LayerNorm[layer_norm] <=> self.l_12
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[13]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Linear[q] <=> self.l_13
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[13]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Linear[k] <=> self.l_14
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[13]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Linear[v] <=> self.l_15
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[13]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Dropout[dropout] <=> self.l_16
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[13]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Linear[o] <=> self.l_17
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[13]/T5LayerSelfAttention[0]/Dropout[dropout] <=> self.l_18
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[13]/T5LayerCrossAttention[1]/T5LayerNorm[layer_norm] <=> self.l_19
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[13]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Linear[q] <=> self.l_20
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[13]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Dropout[dropout] <=> self.l_21
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[13]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Linear[o] <=> self.l_22
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[13]/T5LayerCrossAttention[1]/Dropout[dropout] <=> self.l_23
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[13]/T5LayerFF[2]/T5LayerNorm[layer_norm] <=> self.l_24
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[13]/T5LayerFF[2]/T5DenseReluDense[DenseReluDense]/Linear[wi] <=> self.l_25
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[13]/T5LayerFF[2]/T5DenseReluDense[DenseReluDense]/Dropout[dropout] <=> self.l_26
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[13]/T5LayerFF[2]/T5DenseReluDense[DenseReluDense]/Linear[wo] <=> self.l_27
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[13]/T5LayerFF[2]/Dropout[dropout] <=> self.l_28
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[14]/T5LayerSelfAttention[0]/T5LayerNorm[layer_norm] <=> self.l_29
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[14]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Linear[q] <=> self.l_30
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[14]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Linear[k] <=> self.l_31
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[14]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Linear[v] <=> self.l_32
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[14]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Dropout[dropout] <=> self.l_33
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[14]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Linear[o] <=> self.l_34
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[14]/T5LayerSelfAttention[0]/Dropout[dropout] <=> self.l_35
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[14]/T5LayerCrossAttention[1]/T5LayerNorm[layer_norm] <=> self.l_36
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[14]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Linear[q] <=> self.l_37
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[14]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Dropout[dropout] <=> self.l_38
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[14]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Linear[o] <=> self.l_39
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[14]/T5LayerCrossAttention[1]/Dropout[dropout] <=> self.l_40
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[14]/T5LayerFF[2]/T5LayerNorm[layer_norm] <=> self.l_41
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[14]/T5LayerFF[2]/T5DenseReluDense[DenseReluDense]/Linear[wi] <=> self.l_42
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[14]/T5LayerFF[2]/T5DenseReluDense[DenseReluDense]/Dropout[dropout] <=> self.l_43
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[14]/T5LayerFF[2]/T5DenseReluDense[DenseReluDense]/Linear[wo] <=> self.l_44
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[14]/T5LayerFF[2]/Dropout[dropout] <=> self.l_45
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[15]/T5LayerSelfAttention[0]/T5LayerNorm[layer_norm] <=> self.l_46
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[15]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Linear[q] <=> self.l_47
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[15]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Linear[k] <=> self.l_48
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[15]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Linear[v] <=> self.l_49
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[15]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Dropout[dropout] <=> self.l_50
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[15]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Linear[o] <=> self.l_51
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[15]/T5LayerSelfAttention[0]/Dropout[dropout] <=> self.l_52
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[15]/T5LayerCrossAttention[1]/T5LayerNorm[layer_norm] <=> self.l_53
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[15]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Linear[q] <=> self.l_54
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[15]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Dropout[dropout] <=> self.l_55
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[15]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Linear[o] <=> self.l_56
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[15]/T5LayerCrossAttention[1]/Dropout[dropout] <=> self.l_57
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[15]/T5LayerFF[2]/T5LayerNorm[layer_norm] <=> self.l_58
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[15]/T5LayerFF[2]/T5DenseReluDense[DenseReluDense]/Linear[wi] <=> self.l_59
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[15]/T5LayerFF[2]/T5DenseReluDense[DenseReluDense]/Dropout[dropout] <=> self.l_60
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[15]/T5LayerFF[2]/T5DenseReluDense[DenseReluDense]/Linear[wo] <=> self.l_61
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[15]/T5LayerFF[2]/Dropout[dropout] <=> self.l_62
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[16]/T5LayerSelfAttention[0]/T5LayerNorm[layer_norm] <=> self.l_63
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[16]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Linear[q] <=> self.l_64
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[16]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Linear[k] <=> self.l_65
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[16]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Linear[v] <=> self.l_66
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[16]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Dropout[dropout] <=> self.l_67
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[16]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Linear[o] <=> self.l_68
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[16]/T5LayerSelfAttention[0]/Dropout[dropout] <=> self.l_69
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[16]/T5LayerCrossAttention[1]/T5LayerNorm[layer_norm] <=> self.l_70
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[16]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Linear[q] <=> self.l_71
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[16]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Dropout[dropout] <=> self.l_72
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[16]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Linear[o] <=> self.l_73
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[16]/T5LayerCrossAttention[1]/Dropout[dropout] <=> self.l_74
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[16]/T5LayerFF[2]/T5LayerNorm[layer_norm] <=> self.l_75
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[16]/T5LayerFF[2]/T5DenseReluDense[DenseReluDense]/Linear[wi] <=> self.l_76
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[16]/T5LayerFF[2]/T5DenseReluDense[DenseReluDense]/Dropout[dropout] <=> self.l_77
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[16]/T5LayerFF[2]/T5DenseReluDense[DenseReluDense]/Linear[wo] <=> self.l_78
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[16]/T5LayerFF[2]/Dropout[dropout] <=> self.l_79
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[17]/T5LayerSelfAttention[0]/T5LayerNorm[layer_norm] <=> self.l_80
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[17]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Linear[q] <=> self.l_81
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[17]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Linear[k] <=> self.l_82
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[17]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Linear[v] <=> self.l_83
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[17]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Dropout[dropout] <=> self.l_84
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[17]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Linear[o] <=> self.l_85
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[17]/T5LayerSelfAttention[0]/Dropout[dropout] <=> self.l_86
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[17]/T5LayerCrossAttention[1]/T5LayerNorm[layer_norm] <=> self.l_87
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[17]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Linear[q] <=> self.l_88
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[17]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Dropout[dropout] <=> self.l_89
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[17]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Linear[o] <=> self.l_90
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[17]/T5LayerCrossAttention[1]/Dropout[dropout] <=> self.l_91
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[17]/T5LayerFF[2]/T5LayerNorm[layer_norm] <=> self.l_92
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[17]/T5LayerFF[2]/T5DenseReluDense[DenseReluDense]/Linear[wi] <=> self.l_93
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[17]/T5LayerFF[2]/T5DenseReluDense[DenseReluDense]/Dropout[dropout] <=> self.l_94
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[17]/T5LayerFF[2]/T5DenseReluDense[DenseReluDense]/Linear[wo] <=> self.l_95
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[17]/T5LayerFF[2]/Dropout[dropout] <=> self.l_96
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[18]/T5LayerSelfAttention[0]/T5LayerNorm[layer_norm] <=> self.l_97
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[18]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Linear[q] <=> self.l_98
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[18]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Linear[k] <=> self.l_99
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[18]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Linear[v] <=> self.l_100
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[18]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Dropout[dropout] <=> self.l_101
        # T5ForConditionalGeneration/T5Stack[decoder]/tuple::__getitem___1764 <=> x0
        # T5ForConditionalGeneration/T5Stack[decoder]/tuple::__getitem___1766 <=> x1
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[11]/T5LayerFF[2]/Tensor::__add___2976 <=> x2
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[12]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Size::__getitem___2980 <=> x3
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[12]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Linear[v] <=> x4
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[12]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Dropout[dropout] <=> x5
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[12]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Linear[k] <=> x6
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[12]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Linear[v] <=> x7
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[13]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Linear[k] <=> x8
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[13]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Linear[v] <=> x9
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[14]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Linear[k] <=> x10
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[14]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Linear[v] <=> x11
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[15]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Linear[k] <=> x12
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[15]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Linear[v] <=> x13
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[16]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Linear[k] <=> x14
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[16]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Linear[v] <=> x15
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[17]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Linear[k] <=> x16
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[17]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Linear[v] <=> x17

        # moving inputs to current device no op if already on the correct device
        x0, x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17 = move_tensors(unflatten(args,self.input_structure), self.device)
        t_0 = x4.view(x3, -1, 32, 128)
        t_0 = t_0.transpose(1, 2)
        t_0 = torch.matmul(x5, t_0)
        t_0 = t_0.transpose(1, 2)
        t_0 = t_0.contiguous()
        t_0 = t_0.view(x3, -1, 4096)
        t_0 = self.l_0(t_0)
        t_0 = self.l_1(t_0)
        t_0 = x2 + t_0
        t_1 = self.l_2(t_0)
        t_2 = t_1.size()
        t_2 = t_2[0]
        t_1 = self.l_3(t_1)
        t_1 = t_1.view(t_2, -1, 32, 128)
        t_1 = t_1.transpose(1, 2)
        t_3 = x6.view(t_2, -1, 32, 128)
        t_3 = t_3.transpose(1, 2)
        t_4 = x7.view(t_2, -1, 32, 128)
        t_4 = t_4.transpose(1, 2)
        t_3 = t_3.transpose(3, 2)
        t_3 = torch.matmul(t_1, t_3)
        t_3 += x1
        t_1 = t_3.float()
        t_1 = torch.nn.functional.softmax(t_1, dim=-1, _stacklevel=3, dtype=None)
        t_3 = t_1.type_as(t_3)
        t_3 = self.l_4(t_3)
        t_4 = torch.matmul(t_3, t_4)
        t_4 = t_4.transpose(1, 2)
        t_4 = t_4.contiguous()
        t_2 = t_4.view(t_2, -1, 4096)
        t_2 = self.l_5(t_2)
        t_2 = self.l_6(t_2)
        t_2 = t_0 + t_2
        t_0 = self.l_7(t_2)
        t_0 = self.l_8(t_0)
        t_0 = torch.nn.functional.relu(t_0, inplace=False)
        t_0 = self.l_9(t_0)
        t_0 = self.l_10(t_0)
        t_0 = self.l_11(t_0)
        t_0 = t_2 + t_0
        t_2 = self.l_12(t_0)
        t_4 = t_2.size()
        t_4 = t_4[0]
        t_3 = self.l_13(t_2)
        t_3 = t_3.view(t_4, -1, 32, 128)
        t_3 = t_3.transpose(1, 2)
        t_1 = self.l_14(t_2)
        t_1 = t_1.view(t_4, -1, 32, 128)
        t_1 = t_1.transpose(1, 2)
        t_2 = self.l_15(t_2)
        t_2 = t_2.view(t_4, -1, 32, 128)
        t_2 = t_2.transpose(1, 2)
        t_1 = t_1.transpose(3, 2)
        t_1 = torch.matmul(t_3, t_1)
        t_1 += x0
        t_3 = t_1.float()
        t_3 = torch.nn.functional.softmax(t_3, dim=-1, _stacklevel=3, dtype=None)
        t_1 = t_3.type_as(t_1)
        t_1 = self.l_16(t_1)
        t_2 = torch.matmul(t_1, t_2)
        t_2 = t_2.transpose(1, 2)
        t_2 = t_2.contiguous()
        t_4 = t_2.view(t_4, -1, 4096)
        t_4 = self.l_17(t_4)
        t_4 = self.l_18(t_4)
        t_4 = t_0 + t_4
        t_0 = self.l_19(t_4)
        t_2 = t_0.size()
        t_2 = t_2[0]
        t_0 = self.l_20(t_0)
        t_0 = t_0.view(t_2, -1, 32, 128)
        t_0 = t_0.transpose(1, 2)
        t_1 = x8.view(t_2, -1, 32, 128)
        t_1 = t_1.transpose(1, 2)
        t_3 = x9.view(t_2, -1, 32, 128)
        t_3 = t_3.transpose(1, 2)
        t_1 = t_1.transpose(3, 2)
        t_1 = torch.matmul(t_0, t_1)
        t_1 += x1
        t_0 = t_1.float()
        t_0 = torch.nn.functional.softmax(t_0, dim=-1, _stacklevel=3, dtype=None)
        t_1 = t_0.type_as(t_1)
        t_1 = self.l_21(t_1)
        t_3 = torch.matmul(t_1, t_3)
        t_3 = t_3.transpose(1, 2)
        t_3 = t_3.contiguous()
        t_2 = t_3.view(t_2, -1, 4096)
        t_2 = self.l_22(t_2)
        t_2 = self.l_23(t_2)
        t_2 = t_4 + t_2
        t_4 = self.l_24(t_2)
        t_4 = self.l_25(t_4)
        t_4 = torch.nn.functional.relu(t_4, inplace=False)
        t_4 = self.l_26(t_4)
        t_4 = self.l_27(t_4)
        t_4 = self.l_28(t_4)
        t_4 = t_2 + t_4
        t_2 = self.l_29(t_4)
        t_3 = t_2.size()
        t_3 = t_3[0]
        t_1 = self.l_30(t_2)
        t_1 = t_1.view(t_3, -1, 32, 128)
        t_1 = t_1.transpose(1, 2)
        t_0 = self.l_31(t_2)
        t_0 = t_0.view(t_3, -1, 32, 128)
        t_0 = t_0.transpose(1, 2)
        t_2 = self.l_32(t_2)
        t_2 = t_2.view(t_3, -1, 32, 128)
        t_2 = t_2.transpose(1, 2)
        t_0 = t_0.transpose(3, 2)
        t_0 = torch.matmul(t_1, t_0)
        t_0 += x0
        t_1 = t_0.float()
        t_1 = torch.nn.functional.softmax(t_1, dim=-1, _stacklevel=3, dtype=None)
        t_0 = t_1.type_as(t_0)
        t_0 = self.l_33(t_0)
        t_2 = torch.matmul(t_0, t_2)
        t_2 = t_2.transpose(1, 2)
        t_2 = t_2.contiguous()
        t_3 = t_2.view(t_3, -1, 4096)
        t_3 = self.l_34(t_3)
        t_3 = self.l_35(t_3)
        t_3 = t_4 + t_3
        t_4 = self.l_36(t_3)
        t_2 = t_4.size()
        t_2 = t_2[0]
        t_4 = self.l_37(t_4)
        t_4 = t_4.view(t_2, -1, 32, 128)
        t_4 = t_4.transpose(1, 2)
        t_0 = x10.view(t_2, -1, 32, 128)
        t_0 = t_0.transpose(1, 2)
        t_1 = x11.view(t_2, -1, 32, 128)
        t_1 = t_1.transpose(1, 2)
        t_0 = t_0.transpose(3, 2)
        t_0 = torch.matmul(t_4, t_0)
        t_0 += x1
        t_4 = t_0.float()
        t_4 = torch.nn.functional.softmax(t_4, dim=-1, _stacklevel=3, dtype=None)
        t_0 = t_4.type_as(t_0)
        t_0 = self.l_38(t_0)
        t_1 = torch.matmul(t_0, t_1)
        t_1 = t_1.transpose(1, 2)
        t_1 = t_1.contiguous()
        t_2 = t_1.view(t_2, -1, 4096)
        t_2 = self.l_39(t_2)
        t_2 = self.l_40(t_2)
        t_2 = t_3 + t_2
        t_3 = self.l_41(t_2)
        t_3 = self.l_42(t_3)
        t_3 = torch.nn.functional.relu(t_3, inplace=False)
        t_3 = self.l_43(t_3)
        t_3 = self.l_44(t_3)
        t_3 = self.l_45(t_3)
        t_3 = t_2 + t_3
        t_2 = self.l_46(t_3)
        t_1 = t_2.size()
        t_1 = t_1[0]
        t_0 = self.l_47(t_2)
        t_0 = t_0.view(t_1, -1, 32, 128)
        t_0 = t_0.transpose(1, 2)
        t_4 = self.l_48(t_2)
        t_4 = t_4.view(t_1, -1, 32, 128)
        t_4 = t_4.transpose(1, 2)
        t_2 = self.l_49(t_2)
        t_2 = t_2.view(t_1, -1, 32, 128)
        t_2 = t_2.transpose(1, 2)
        t_4 = t_4.transpose(3, 2)
        t_4 = torch.matmul(t_0, t_4)
        t_4 += x0
        t_0 = t_4.float()
        t_0 = torch.nn.functional.softmax(t_0, dim=-1, _stacklevel=3, dtype=None)
        t_4 = t_0.type_as(t_4)
        t_4 = self.l_50(t_4)
        t_2 = torch.matmul(t_4, t_2)
        t_2 = t_2.transpose(1, 2)
        t_2 = t_2.contiguous()
        t_1 = t_2.view(t_1, -1, 4096)
        t_1 = self.l_51(t_1)
        t_1 = self.l_52(t_1)
        t_1 = t_3 + t_1
        t_3 = self.l_53(t_1)
        t_2 = t_3.size()
        t_2 = t_2[0]
        t_3 = self.l_54(t_3)
        t_3 = t_3.view(t_2, -1, 32, 128)
        t_3 = t_3.transpose(1, 2)
        t_4 = x12.view(t_2, -1, 32, 128)
        t_4 = t_4.transpose(1, 2)
        t_0 = x13.view(t_2, -1, 32, 128)
        t_0 = t_0.transpose(1, 2)
        t_4 = t_4.transpose(3, 2)
        t_4 = torch.matmul(t_3, t_4)
        t_4 += x1
        t_3 = t_4.float()
        t_3 = torch.nn.functional.softmax(t_3, dim=-1, _stacklevel=3, dtype=None)
        t_4 = t_3.type_as(t_4)
        t_4 = self.l_55(t_4)
        t_0 = torch.matmul(t_4, t_0)
        t_0 = t_0.transpose(1, 2)
        t_0 = t_0.contiguous()
        t_2 = t_0.view(t_2, -1, 4096)
        t_2 = self.l_56(t_2)
        t_2 = self.l_57(t_2)
        t_2 = t_1 + t_2
        t_1 = self.l_58(t_2)
        t_1 = self.l_59(t_1)
        t_1 = torch.nn.functional.relu(t_1, inplace=False)
        t_1 = self.l_60(t_1)
        t_1 = self.l_61(t_1)
        t_1 = self.l_62(t_1)
        t_1 = t_2 + t_1
        t_2 = self.l_63(t_1)
        t_0 = t_2.size()
        t_0 = t_0[0]
        t_4 = self.l_64(t_2)
        t_4 = t_4.view(t_0, -1, 32, 128)
        t_4 = t_4.transpose(1, 2)
        t_3 = self.l_65(t_2)
        t_3 = t_3.view(t_0, -1, 32, 128)
        t_3 = t_3.transpose(1, 2)
        t_2 = self.l_66(t_2)
        t_2 = t_2.view(t_0, -1, 32, 128)
        t_2 = t_2.transpose(1, 2)
        t_3 = t_3.transpose(3, 2)
        t_3 = torch.matmul(t_4, t_3)
        t_3 += x0
        t_4 = t_3.float()
        t_4 = torch.nn.functional.softmax(t_4, dim=-1, _stacklevel=3, dtype=None)
        t_3 = t_4.type_as(t_3)
        t_3 = self.l_67(t_3)
        t_2 = torch.matmul(t_3, t_2)
        t_2 = t_2.transpose(1, 2)
        t_2 = t_2.contiguous()
        t_0 = t_2.view(t_0, -1, 4096)
        t_0 = self.l_68(t_0)
        t_0 = self.l_69(t_0)
        t_0 = t_1 + t_0
        t_1 = self.l_70(t_0)
        t_2 = t_1.size()
        t_2 = t_2[0]
        t_1 = self.l_71(t_1)
        t_1 = t_1.view(t_2, -1, 32, 128)
        t_1 = t_1.transpose(1, 2)
        t_3 = x14.view(t_2, -1, 32, 128)
        t_3 = t_3.transpose(1, 2)
        t_4 = x15.view(t_2, -1, 32, 128)
        t_4 = t_4.transpose(1, 2)
        t_3 = t_3.transpose(3, 2)
        t_3 = torch.matmul(t_1, t_3)
        t_3 += x1
        t_1 = t_3.float()
        t_1 = torch.nn.functional.softmax(t_1, dim=-1, _stacklevel=3, dtype=None)
        t_3 = t_1.type_as(t_3)
        t_3 = self.l_72(t_3)
        t_4 = torch.matmul(t_3, t_4)
        t_4 = t_4.transpose(1, 2)
        t_4 = t_4.contiguous()
        t_2 = t_4.view(t_2, -1, 4096)
        t_2 = self.l_73(t_2)
        t_2 = self.l_74(t_2)
        t_2 = t_0 + t_2
        t_0 = self.l_75(t_2)
        t_0 = self.l_76(t_0)
        t_0 = torch.nn.functional.relu(t_0, inplace=False)
        t_0 = self.l_77(t_0)
        t_0 = self.l_78(t_0)
        t_0 = self.l_79(t_0)
        t_0 = t_2 + t_0
        t_2 = self.l_80(t_0)
        t_4 = t_2.size()
        t_4 = t_4[0]
        t_3 = self.l_81(t_2)
        t_3 = t_3.view(t_4, -1, 32, 128)
        t_3 = t_3.transpose(1, 2)
        t_1 = self.l_82(t_2)
        t_1 = t_1.view(t_4, -1, 32, 128)
        t_1 = t_1.transpose(1, 2)
        t_2 = self.l_83(t_2)
        t_2 = t_2.view(t_4, -1, 32, 128)
        t_2 = t_2.transpose(1, 2)
        t_1 = t_1.transpose(3, 2)
        t_1 = torch.matmul(t_3, t_1)
        t_1 += x0
        t_3 = t_1.float()
        t_3 = torch.nn.functional.softmax(t_3, dim=-1, _stacklevel=3, dtype=None)
        t_1 = t_3.type_as(t_1)
        t_1 = self.l_84(t_1)
        t_2 = torch.matmul(t_1, t_2)
        t_2 = t_2.transpose(1, 2)
        t_2 = t_2.contiguous()
        t_4 = t_2.view(t_4, -1, 4096)
        t_4 = self.l_85(t_4)
        t_4 = self.l_86(t_4)
        t_4 = t_0 + t_4
        t_0 = self.l_87(t_4)
        t_2 = t_0.size()
        t_2 = t_2[0]
        t_0 = self.l_88(t_0)
        t_0 = t_0.view(t_2, -1, 32, 128)
        t_0 = t_0.transpose(1, 2)
        t_1 = x16.view(t_2, -1, 32, 128)
        t_1 = t_1.transpose(1, 2)
        t_3 = x17.view(t_2, -1, 32, 128)
        t_3 = t_3.transpose(1, 2)
        t_1 = t_1.transpose(3, 2)
        t_1 = torch.matmul(t_0, t_1)
        t_1 += x1
        t_0 = t_1.float()
        t_0 = torch.nn.functional.softmax(t_0, dim=-1, _stacklevel=3, dtype=None)
        t_1 = t_0.type_as(t_1)
        t_1 = self.l_89(t_1)
        t_3 = torch.matmul(t_1, t_3)
        t_3 = t_3.transpose(1, 2)
        t_3 = t_3.contiguous()
        t_2 = t_3.view(t_2, -1, 4096)
        t_2 = self.l_90(t_2)
        t_2 = self.l_91(t_2)
        t_2 = t_4 + t_2
        t_4 = self.l_92(t_2)
        t_4 = self.l_93(t_4)
        t_4 = torch.nn.functional.relu(t_4, inplace=False)
        t_4 = self.l_94(t_4)
        t_4 = self.l_95(t_4)
        t_4 = self.l_96(t_4)
        t_4 = t_2 + t_4
        t_2 = self.l_97(t_4)
        t_3 = t_2.size()
        t_3 = t_3[0]
        t_1 = self.l_98(t_2)
        t_1 = t_1.view(t_3, -1, 32, 128)
        t_1 = t_1.transpose(1, 2)
        t_0 = self.l_99(t_2)
        t_0 = t_0.view(t_3, -1, 32, 128)
        t_0 = t_0.transpose(1, 2)
        t_2 = self.l_100(t_2)
        t_2 = t_2.view(t_3, -1, 32, 128)
        t_0 = t_0.transpose(3, 2)
        t_0 = torch.matmul(t_1, t_0)
        t_0 += x0
        t_1 = t_0.float()
        t_1 = torch.nn.functional.softmax(t_1, dim=-1, _stacklevel=3, dtype=None)
        t_0 = t_1.type_as(t_0)
        t_0 = self.l_101(t_0)
        # returning:
        # T5ForConditionalGeneration/T5Stack[decoder]/tuple::__getitem___1764
        # T5ForConditionalGeneration/T5Stack[decoder]/tuple::__getitem___1766
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[17]/T5LayerFF[2]/Tensor::__add___3636
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[18]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Size::__getitem___3640
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[18]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Tensor::view_3661
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[18]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Dropout[dropout]
        return list(flatten((x0, x1, t_4, t_3, t_2, t_0)))

    def state_dict(self,*args,**kwargs):
        # we return the state dict of this part as it should be in the original model
        return state_dict(self,*args,**kwargs)

    def load_state_dict(self, state):
        return load_state_dict(self,state)

    def named_parameters(self,recurse=True):
        # we return the named parameters of this part as it should be in the original model
        return named_parameters(self,recurse=recurse)

    def named_buffers(self,recurse=True):
        # we return the named buffers of this part as it should be in the original model
        return named_buffers(self,recurse=recurse)

    def cpu(self):
        return cpu(self)

    def cuda(self,device=None):
        return cuda(self,device=device)

    def to(self, *args, **kwargs):
        return to(self,*args,**kwargs)


class Partition7(nn.Module):
    LAYER_SCOPES=[
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[18]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Linear[o]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[18]/T5LayerSelfAttention[0]/Dropout[dropout]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[18]/T5LayerCrossAttention[1]/T5LayerNorm[layer_norm]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[18]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Linear[q]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[18]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Dropout[dropout]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[18]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Linear[o]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[18]/T5LayerCrossAttention[1]/Dropout[dropout]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[18]/T5LayerFF[2]/T5LayerNorm[layer_norm]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[18]/T5LayerFF[2]/T5DenseReluDense[DenseReluDense]/Linear[wi]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[18]/T5LayerFF[2]/T5DenseReluDense[DenseReluDense]/Dropout[dropout]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[18]/T5LayerFF[2]/T5DenseReluDense[DenseReluDense]/Linear[wo]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[18]/T5LayerFF[2]/Dropout[dropout]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[19]/T5LayerSelfAttention[0]/T5LayerNorm[layer_norm]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[19]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Linear[q]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[19]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Linear[k]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[19]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Linear[v]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[19]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Dropout[dropout]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[19]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Linear[o]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[19]/T5LayerSelfAttention[0]/Dropout[dropout]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[19]/T5LayerCrossAttention[1]/T5LayerNorm[layer_norm]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[19]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Linear[q]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[19]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Dropout[dropout]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[19]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Linear[o]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[19]/T5LayerCrossAttention[1]/Dropout[dropout]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[19]/T5LayerFF[2]/T5LayerNorm[layer_norm]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[19]/T5LayerFF[2]/T5DenseReluDense[DenseReluDense]/Linear[wi]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[19]/T5LayerFF[2]/T5DenseReluDense[DenseReluDense]/Dropout[dropout]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[19]/T5LayerFF[2]/T5DenseReluDense[DenseReluDense]/Linear[wo]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[19]/T5LayerFF[2]/Dropout[dropout]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[20]/T5LayerSelfAttention[0]/T5LayerNorm[layer_norm]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[20]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Linear[q]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[20]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Linear[k]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[20]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Linear[v]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[20]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Dropout[dropout]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[20]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Linear[o]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[20]/T5LayerSelfAttention[0]/Dropout[dropout]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[20]/T5LayerCrossAttention[1]/T5LayerNorm[layer_norm]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[20]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Linear[q]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[20]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Dropout[dropout]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[20]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Linear[o]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[20]/T5LayerCrossAttention[1]/Dropout[dropout]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[20]/T5LayerFF[2]/T5LayerNorm[layer_norm]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[20]/T5LayerFF[2]/T5DenseReluDense[DenseReluDense]/Linear[wi]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[20]/T5LayerFF[2]/T5DenseReluDense[DenseReluDense]/Dropout[dropout]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[20]/T5LayerFF[2]/T5DenseReluDense[DenseReluDense]/Linear[wo]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[20]/T5LayerFF[2]/Dropout[dropout]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[21]/T5LayerSelfAttention[0]/T5LayerNorm[layer_norm]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[21]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Linear[q]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[21]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Linear[k]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[21]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Linear[v]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[21]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Dropout[dropout]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[21]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Linear[o]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[21]/T5LayerSelfAttention[0]/Dropout[dropout]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[21]/T5LayerCrossAttention[1]/T5LayerNorm[layer_norm]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[21]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Linear[q]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[21]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Dropout[dropout]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[21]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Linear[o]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[21]/T5LayerCrossAttention[1]/Dropout[dropout]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[21]/T5LayerFF[2]/T5LayerNorm[layer_norm]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[21]/T5LayerFF[2]/T5DenseReluDense[DenseReluDense]/Linear[wi]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[21]/T5LayerFF[2]/T5DenseReluDense[DenseReluDense]/Dropout[dropout]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[21]/T5LayerFF[2]/T5DenseReluDense[DenseReluDense]/Linear[wo]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[21]/T5LayerFF[2]/Dropout[dropout]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[22]/T5LayerSelfAttention[0]/T5LayerNorm[layer_norm]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[22]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Linear[q]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[22]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Linear[k]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[22]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Linear[v]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[22]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Dropout[dropout]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[22]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Linear[o]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[22]/T5LayerSelfAttention[0]/Dropout[dropout]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[22]/T5LayerCrossAttention[1]/T5LayerNorm[layer_norm]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[22]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Linear[q]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[22]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Dropout[dropout]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[22]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Linear[o]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[22]/T5LayerCrossAttention[1]/Dropout[dropout]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[22]/T5LayerFF[2]/T5LayerNorm[layer_norm]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[22]/T5LayerFF[2]/T5DenseReluDense[DenseReluDense]/Linear[wi]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[22]/T5LayerFF[2]/T5DenseReluDense[DenseReluDense]/Dropout[dropout]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[22]/T5LayerFF[2]/T5DenseReluDense[DenseReluDense]/Linear[wo]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[22]/T5LayerFF[2]/Dropout[dropout]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[23]/T5LayerSelfAttention[0]/T5LayerNorm[layer_norm]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[23]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Linear[q]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[23]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Linear[k]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[23]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Linear[v]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[23]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Dropout[dropout]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[23]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Linear[o]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[23]/T5LayerSelfAttention[0]/Dropout[dropout]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[23]/T5LayerCrossAttention[1]/T5LayerNorm[layer_norm]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[23]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Linear[q]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[23]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Dropout[dropout]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[23]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Linear[o]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[23]/T5LayerCrossAttention[1]/Dropout[dropout]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[23]/T5LayerFF[2]/T5LayerNorm[layer_norm]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[23]/T5LayerFF[2]/T5DenseReluDense[DenseReluDense]/Linear[wi]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[23]/T5LayerFF[2]/T5DenseReluDense[DenseReluDense]/Dropout[dropout]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[23]/T5LayerFF[2]/T5DenseReluDense[DenseReluDense]/Linear[wo]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[23]/T5LayerFF[2]/Dropout[dropout]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5LayerNorm[final_layer_norm]',
            'T5ForConditionalGeneration/T5Stack[decoder]/Dropout[dropout]',
            'T5ForConditionalGeneration/Linear[lm_head]',
            'T5ForConditionalGeneration/CrossEntropyLoss[lm_loss]',
        ]
    TENSORS=[
        ]
    def __init__(self, layers, tensors, device='cuda:7'):
        super().__init__()

        #initialize partition layers
        for idx,layer_scope in enumerate(self.LAYER_SCOPES):
            self.add_module(f'l_{idx}',layers[layer_scope])

        #initialize partition tensors
        b=p=0
        for tensor_scope in self.TENSORS:
            tensor=tensors[tensor_scope]
            if isinstance(tensor,nn.Parameter):
                self.register_parameter(f'p_{p}',tensor)
                p+=1
            else:
                self.register_buffer(f'b_{b}',tensor)
                b+=1

        self.device = torch.device(device)
        self.input_structure = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
        self.lookup = { 'l_0': 'decoder.18.0.SelfAttention.o',
                        'l_1': 'decoder.18.0.dropout',
                        'l_2': 'decoder.18.1.layer_norm',
                        'l_3': 'decoder.18.1.EncDecAttention.q',
                        'l_4': 'decoder.18.1.EncDecAttention.dropout',
                        'l_5': 'decoder.18.1.EncDecAttention.o',
                        'l_6': 'decoder.18.1.dropout',
                        'l_7': 'decoder.18.2.layer_norm',
                        'l_8': 'decoder.18.2.DenseReluDense.wi',
                        'l_9': 'decoder.18.2.DenseReluDense.dropout',
                        'l_10': 'decoder.18.2.DenseReluDense.wo',
                        'l_11': 'decoder.18.2.dropout',
                        'l_12': 'decoder.19.0.layer_norm',
                        'l_13': 'decoder.19.0.SelfAttention.q',
                        'l_14': 'decoder.19.0.SelfAttention.k',
                        'l_15': 'decoder.19.0.SelfAttention.v',
                        'l_16': 'decoder.19.0.SelfAttention.dropout',
                        'l_17': 'decoder.19.0.SelfAttention.o',
                        'l_18': 'decoder.19.0.dropout',
                        'l_19': 'decoder.19.1.layer_norm',
                        'l_20': 'decoder.19.1.EncDecAttention.q',
                        'l_21': 'decoder.19.1.EncDecAttention.dropout',
                        'l_22': 'decoder.19.1.EncDecAttention.o',
                        'l_23': 'decoder.19.1.dropout',
                        'l_24': 'decoder.19.2.layer_norm',
                        'l_25': 'decoder.19.2.DenseReluDense.wi',
                        'l_26': 'decoder.19.2.DenseReluDense.dropout',
                        'l_27': 'decoder.19.2.DenseReluDense.wo',
                        'l_28': 'decoder.19.2.dropout',
                        'l_29': 'decoder.20.0.layer_norm',
                        'l_30': 'decoder.20.0.SelfAttention.q',
                        'l_31': 'decoder.20.0.SelfAttention.k',
                        'l_32': 'decoder.20.0.SelfAttention.v',
                        'l_33': 'decoder.20.0.SelfAttention.dropout',
                        'l_34': 'decoder.20.0.SelfAttention.o',
                        'l_35': 'decoder.20.0.dropout',
                        'l_36': 'decoder.20.1.layer_norm',
                        'l_37': 'decoder.20.1.EncDecAttention.q',
                        'l_38': 'decoder.20.1.EncDecAttention.dropout',
                        'l_39': 'decoder.20.1.EncDecAttention.o',
                        'l_40': 'decoder.20.1.dropout',
                        'l_41': 'decoder.20.2.layer_norm',
                        'l_42': 'decoder.20.2.DenseReluDense.wi',
                        'l_43': 'decoder.20.2.DenseReluDense.dropout',
                        'l_44': 'decoder.20.2.DenseReluDense.wo',
                        'l_45': 'decoder.20.2.dropout',
                        'l_46': 'decoder.21.0.layer_norm',
                        'l_47': 'decoder.21.0.SelfAttention.q',
                        'l_48': 'decoder.21.0.SelfAttention.k',
                        'l_49': 'decoder.21.0.SelfAttention.v',
                        'l_50': 'decoder.21.0.SelfAttention.dropout',
                        'l_51': 'decoder.21.0.SelfAttention.o',
                        'l_52': 'decoder.21.0.dropout',
                        'l_53': 'decoder.21.1.layer_norm',
                        'l_54': 'decoder.21.1.EncDecAttention.q',
                        'l_55': 'decoder.21.1.EncDecAttention.dropout',
                        'l_56': 'decoder.21.1.EncDecAttention.o',
                        'l_57': 'decoder.21.1.dropout',
                        'l_58': 'decoder.21.2.layer_norm',
                        'l_59': 'decoder.21.2.DenseReluDense.wi',
                        'l_60': 'decoder.21.2.DenseReluDense.dropout',
                        'l_61': 'decoder.21.2.DenseReluDense.wo',
                        'l_62': 'decoder.21.2.dropout',
                        'l_63': 'decoder.22.0.layer_norm',
                        'l_64': 'decoder.22.0.SelfAttention.q',
                        'l_65': 'decoder.22.0.SelfAttention.k',
                        'l_66': 'decoder.22.0.SelfAttention.v',
                        'l_67': 'decoder.22.0.SelfAttention.dropout',
                        'l_68': 'decoder.22.0.SelfAttention.o',
                        'l_69': 'decoder.22.0.dropout',
                        'l_70': 'decoder.22.1.layer_norm',
                        'l_71': 'decoder.22.1.EncDecAttention.q',
                        'l_72': 'decoder.22.1.EncDecAttention.dropout',
                        'l_73': 'decoder.22.1.EncDecAttention.o',
                        'l_74': 'decoder.22.1.dropout',
                        'l_75': 'decoder.22.2.layer_norm',
                        'l_76': 'decoder.22.2.DenseReluDense.wi',
                        'l_77': 'decoder.22.2.DenseReluDense.dropout',
                        'l_78': 'decoder.22.2.DenseReluDense.wo',
                        'l_79': 'decoder.22.2.dropout',
                        'l_80': 'decoder.23.0.layer_norm',
                        'l_81': 'decoder.23.0.SelfAttention.q',
                        'l_82': 'decoder.23.0.SelfAttention.k',
                        'l_83': 'decoder.23.0.SelfAttention.v',
                        'l_84': 'decoder.23.0.SelfAttention.dropout',
                        'l_85': 'decoder.23.0.SelfAttention.o',
                        'l_86': 'decoder.23.0.dropout',
                        'l_87': 'decoder.23.1.layer_norm',
                        'l_88': 'decoder.23.1.EncDecAttention.q',
                        'l_89': 'decoder.23.1.EncDecAttention.dropout',
                        'l_90': 'decoder.23.1.EncDecAttention.o',
                        'l_91': 'decoder.23.1.dropout',
                        'l_92': 'decoder.23.2.layer_norm',
                        'l_93': 'decoder.23.2.DenseReluDense.wi',
                        'l_94': 'decoder.23.2.DenseReluDense.dropout',
                        'l_95': 'decoder.23.2.DenseReluDense.wo',
                        'l_96': 'decoder.23.2.dropout',
                        'l_97': 'decoder.final_layer_norm',
                        'l_98': 'decoder.dropout',
                        'l_99': 'lm_head',
                        'l_100': 'lm_loss'}
        self.to(self.device)

    def forward(self, *args):
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[18]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Linear[o] <=> self.l_0
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[18]/T5LayerSelfAttention[0]/Dropout[dropout] <=> self.l_1
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[18]/T5LayerCrossAttention[1]/T5LayerNorm[layer_norm] <=> self.l_2
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[18]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Linear[q] <=> self.l_3
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[18]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Dropout[dropout] <=> self.l_4
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[18]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Linear[o] <=> self.l_5
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[18]/T5LayerCrossAttention[1]/Dropout[dropout] <=> self.l_6
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[18]/T5LayerFF[2]/T5LayerNorm[layer_norm] <=> self.l_7
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[18]/T5LayerFF[2]/T5DenseReluDense[DenseReluDense]/Linear[wi] <=> self.l_8
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[18]/T5LayerFF[2]/T5DenseReluDense[DenseReluDense]/Dropout[dropout] <=> self.l_9
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[18]/T5LayerFF[2]/T5DenseReluDense[DenseReluDense]/Linear[wo] <=> self.l_10
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[18]/T5LayerFF[2]/Dropout[dropout] <=> self.l_11
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[19]/T5LayerSelfAttention[0]/T5LayerNorm[layer_norm] <=> self.l_12
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[19]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Linear[q] <=> self.l_13
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[19]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Linear[k] <=> self.l_14
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[19]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Linear[v] <=> self.l_15
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[19]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Dropout[dropout] <=> self.l_16
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[19]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Linear[o] <=> self.l_17
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[19]/T5LayerSelfAttention[0]/Dropout[dropout] <=> self.l_18
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[19]/T5LayerCrossAttention[1]/T5LayerNorm[layer_norm] <=> self.l_19
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[19]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Linear[q] <=> self.l_20
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[19]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Dropout[dropout] <=> self.l_21
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[19]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Linear[o] <=> self.l_22
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[19]/T5LayerCrossAttention[1]/Dropout[dropout] <=> self.l_23
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[19]/T5LayerFF[2]/T5LayerNorm[layer_norm] <=> self.l_24
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[19]/T5LayerFF[2]/T5DenseReluDense[DenseReluDense]/Linear[wi] <=> self.l_25
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[19]/T5LayerFF[2]/T5DenseReluDense[DenseReluDense]/Dropout[dropout] <=> self.l_26
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[19]/T5LayerFF[2]/T5DenseReluDense[DenseReluDense]/Linear[wo] <=> self.l_27
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[19]/T5LayerFF[2]/Dropout[dropout] <=> self.l_28
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[20]/T5LayerSelfAttention[0]/T5LayerNorm[layer_norm] <=> self.l_29
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[20]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Linear[q] <=> self.l_30
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[20]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Linear[k] <=> self.l_31
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[20]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Linear[v] <=> self.l_32
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[20]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Dropout[dropout] <=> self.l_33
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[20]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Linear[o] <=> self.l_34
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[20]/T5LayerSelfAttention[0]/Dropout[dropout] <=> self.l_35
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[20]/T5LayerCrossAttention[1]/T5LayerNorm[layer_norm] <=> self.l_36
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[20]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Linear[q] <=> self.l_37
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[20]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Dropout[dropout] <=> self.l_38
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[20]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Linear[o] <=> self.l_39
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[20]/T5LayerCrossAttention[1]/Dropout[dropout] <=> self.l_40
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[20]/T5LayerFF[2]/T5LayerNorm[layer_norm] <=> self.l_41
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[20]/T5LayerFF[2]/T5DenseReluDense[DenseReluDense]/Linear[wi] <=> self.l_42
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[20]/T5LayerFF[2]/T5DenseReluDense[DenseReluDense]/Dropout[dropout] <=> self.l_43
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[20]/T5LayerFF[2]/T5DenseReluDense[DenseReluDense]/Linear[wo] <=> self.l_44
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[20]/T5LayerFF[2]/Dropout[dropout] <=> self.l_45
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[21]/T5LayerSelfAttention[0]/T5LayerNorm[layer_norm] <=> self.l_46
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[21]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Linear[q] <=> self.l_47
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[21]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Linear[k] <=> self.l_48
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[21]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Linear[v] <=> self.l_49
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[21]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Dropout[dropout] <=> self.l_50
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[21]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Linear[o] <=> self.l_51
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[21]/T5LayerSelfAttention[0]/Dropout[dropout] <=> self.l_52
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[21]/T5LayerCrossAttention[1]/T5LayerNorm[layer_norm] <=> self.l_53
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[21]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Linear[q] <=> self.l_54
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[21]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Dropout[dropout] <=> self.l_55
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[21]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Linear[o] <=> self.l_56
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[21]/T5LayerCrossAttention[1]/Dropout[dropout] <=> self.l_57
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[21]/T5LayerFF[2]/T5LayerNorm[layer_norm] <=> self.l_58
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[21]/T5LayerFF[2]/T5DenseReluDense[DenseReluDense]/Linear[wi] <=> self.l_59
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[21]/T5LayerFF[2]/T5DenseReluDense[DenseReluDense]/Dropout[dropout] <=> self.l_60
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[21]/T5LayerFF[2]/T5DenseReluDense[DenseReluDense]/Linear[wo] <=> self.l_61
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[21]/T5LayerFF[2]/Dropout[dropout] <=> self.l_62
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[22]/T5LayerSelfAttention[0]/T5LayerNorm[layer_norm] <=> self.l_63
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[22]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Linear[q] <=> self.l_64
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[22]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Linear[k] <=> self.l_65
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[22]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Linear[v] <=> self.l_66
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[22]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Dropout[dropout] <=> self.l_67
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[22]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Linear[o] <=> self.l_68
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[22]/T5LayerSelfAttention[0]/Dropout[dropout] <=> self.l_69
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[22]/T5LayerCrossAttention[1]/T5LayerNorm[layer_norm] <=> self.l_70
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[22]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Linear[q] <=> self.l_71
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[22]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Dropout[dropout] <=> self.l_72
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[22]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Linear[o] <=> self.l_73
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[22]/T5LayerCrossAttention[1]/Dropout[dropout] <=> self.l_74
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[22]/T5LayerFF[2]/T5LayerNorm[layer_norm] <=> self.l_75
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[22]/T5LayerFF[2]/T5DenseReluDense[DenseReluDense]/Linear[wi] <=> self.l_76
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[22]/T5LayerFF[2]/T5DenseReluDense[DenseReluDense]/Dropout[dropout] <=> self.l_77
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[22]/T5LayerFF[2]/T5DenseReluDense[DenseReluDense]/Linear[wo] <=> self.l_78
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[22]/T5LayerFF[2]/Dropout[dropout] <=> self.l_79
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[23]/T5LayerSelfAttention[0]/T5LayerNorm[layer_norm] <=> self.l_80
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[23]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Linear[q] <=> self.l_81
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[23]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Linear[k] <=> self.l_82
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[23]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Linear[v] <=> self.l_83
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[23]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Dropout[dropout] <=> self.l_84
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[23]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Linear[o] <=> self.l_85
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[23]/T5LayerSelfAttention[0]/Dropout[dropout] <=> self.l_86
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[23]/T5LayerCrossAttention[1]/T5LayerNorm[layer_norm] <=> self.l_87
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[23]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Linear[q] <=> self.l_88
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[23]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Dropout[dropout] <=> self.l_89
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[23]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Linear[o] <=> self.l_90
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[23]/T5LayerCrossAttention[1]/Dropout[dropout] <=> self.l_91
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[23]/T5LayerFF[2]/T5LayerNorm[layer_norm] <=> self.l_92
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[23]/T5LayerFF[2]/T5DenseReluDense[DenseReluDense]/Linear[wi] <=> self.l_93
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[23]/T5LayerFF[2]/T5DenseReluDense[DenseReluDense]/Dropout[dropout] <=> self.l_94
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[23]/T5LayerFF[2]/T5DenseReluDense[DenseReluDense]/Linear[wo] <=> self.l_95
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[23]/T5LayerFF[2]/Dropout[dropout] <=> self.l_96
        # T5ForConditionalGeneration/T5Stack[decoder]/T5LayerNorm[final_layer_norm] <=> self.l_97
        # T5ForConditionalGeneration/T5Stack[decoder]/Dropout[dropout] <=> self.l_98
        # T5ForConditionalGeneration/Linear[lm_head] <=> self.l_99
        # T5ForConditionalGeneration/CrossEntropyLoss[lm_loss] <=> self.l_100
        # input5 <=> lm_labels
        # T5ForConditionalGeneration/T5Stack[decoder]/tuple::__getitem___1764 <=> x0
        # T5ForConditionalGeneration/T5Stack[decoder]/tuple::__getitem___1766 <=> x1
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[17]/T5LayerFF[2]/Tensor::__add___3636 <=> x2
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[18]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Size::__getitem___3640 <=> x3
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[18]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Tensor::view_3661 <=> x4
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[18]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Dropout[dropout] <=> x5
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[18]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Linear[k] <=> x6
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[18]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Linear[v] <=> x7
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[19]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Linear[k] <=> x8
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[19]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Linear[v] <=> x9
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[20]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Linear[k] <=> x10
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[20]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Linear[v] <=> x11
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[21]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Linear[k] <=> x12
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[21]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Linear[v] <=> x13
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[22]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Linear[k] <=> x14
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[22]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Linear[v] <=> x15
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[23]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Linear[k] <=> x16
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[23]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Linear[v] <=> x17

        # moving inputs to current device no op if already on the correct device
        lm_labels, x0, x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17 = move_tensors(unflatten(args,self.input_structure), self.device)
        t_0 = x4.transpose(1, 2)
        t_0 = torch.matmul(x5, t_0)
        t_0 = t_0.transpose(1, 2)
        t_0 = t_0.contiguous()
        t_0 = t_0.view(x3, -1, 4096)
        t_0 = self.l_0(t_0)
        t_0 = self.l_1(t_0)
        t_0 = x2 + t_0
        t_1 = self.l_2(t_0)
        t_2 = t_1.size()
        t_2 = t_2[0]
        t_1 = self.l_3(t_1)
        t_1 = t_1.view(t_2, -1, 32, 128)
        t_1 = t_1.transpose(1, 2)
        t_3 = x6.view(t_2, -1, 32, 128)
        t_3 = t_3.transpose(1, 2)
        t_4 = x7.view(t_2, -1, 32, 128)
        t_4 = t_4.transpose(1, 2)
        t_3 = t_3.transpose(3, 2)
        t_3 = torch.matmul(t_1, t_3)
        t_3 += x1
        t_1 = t_3.float()
        t_1 = torch.nn.functional.softmax(t_1, dim=-1, _stacklevel=3, dtype=None)
        t_3 = t_1.type_as(t_3)
        t_3 = self.l_4(t_3)
        t_4 = torch.matmul(t_3, t_4)
        t_4 = t_4.transpose(1, 2)
        t_4 = t_4.contiguous()
        t_2 = t_4.view(t_2, -1, 4096)
        t_2 = self.l_5(t_2)
        t_2 = self.l_6(t_2)
        t_2 = t_0 + t_2
        t_0 = self.l_7(t_2)
        t_0 = self.l_8(t_0)
        t_0 = torch.nn.functional.relu(t_0, inplace=False)
        t_0 = self.l_9(t_0)
        t_0 = self.l_10(t_0)
        t_0 = self.l_11(t_0)
        t_0 = t_2 + t_0
        t_2 = self.l_12(t_0)
        t_4 = t_2.size()
        t_4 = t_4[0]
        t_3 = self.l_13(t_2)
        t_3 = t_3.view(t_4, -1, 32, 128)
        t_3 = t_3.transpose(1, 2)
        t_1 = self.l_14(t_2)
        t_1 = t_1.view(t_4, -1, 32, 128)
        t_1 = t_1.transpose(1, 2)
        t_2 = self.l_15(t_2)
        t_2 = t_2.view(t_4, -1, 32, 128)
        t_2 = t_2.transpose(1, 2)
        t_1 = t_1.transpose(3, 2)
        t_1 = torch.matmul(t_3, t_1)
        t_1 += x0
        t_3 = t_1.float()
        t_3 = torch.nn.functional.softmax(t_3, dim=-1, _stacklevel=3, dtype=None)
        t_1 = t_3.type_as(t_1)
        t_1 = self.l_16(t_1)
        t_2 = torch.matmul(t_1, t_2)
        t_2 = t_2.transpose(1, 2)
        t_2 = t_2.contiguous()
        t_4 = t_2.view(t_4, -1, 4096)
        t_4 = self.l_17(t_4)
        t_4 = self.l_18(t_4)
        t_4 = t_0 + t_4
        t_0 = self.l_19(t_4)
        t_2 = t_0.size()
        t_2 = t_2[0]
        t_0 = self.l_20(t_0)
        t_0 = t_0.view(t_2, -1, 32, 128)
        t_0 = t_0.transpose(1, 2)
        t_1 = x8.view(t_2, -1, 32, 128)
        t_1 = t_1.transpose(1, 2)
        t_3 = x9.view(t_2, -1, 32, 128)
        t_3 = t_3.transpose(1, 2)
        t_1 = t_1.transpose(3, 2)
        t_1 = torch.matmul(t_0, t_1)
        t_1 += x1
        t_0 = t_1.float()
        t_0 = torch.nn.functional.softmax(t_0, dim=-1, _stacklevel=3, dtype=None)
        t_1 = t_0.type_as(t_1)
        t_1 = self.l_21(t_1)
        t_3 = torch.matmul(t_1, t_3)
        t_3 = t_3.transpose(1, 2)
        t_3 = t_3.contiguous()
        t_2 = t_3.view(t_2, -1, 4096)
        t_2 = self.l_22(t_2)
        t_2 = self.l_23(t_2)
        t_2 = t_4 + t_2
        t_4 = self.l_24(t_2)
        t_4 = self.l_25(t_4)
        t_4 = torch.nn.functional.relu(t_4, inplace=False)
        t_4 = self.l_26(t_4)
        t_4 = self.l_27(t_4)
        t_4 = self.l_28(t_4)
        t_4 = t_2 + t_4
        t_2 = self.l_29(t_4)
        t_3 = t_2.size()
        t_3 = t_3[0]
        t_1 = self.l_30(t_2)
        t_1 = t_1.view(t_3, -1, 32, 128)
        t_1 = t_1.transpose(1, 2)
        t_0 = self.l_31(t_2)
        t_0 = t_0.view(t_3, -1, 32, 128)
        t_0 = t_0.transpose(1, 2)
        t_2 = self.l_32(t_2)
        t_2 = t_2.view(t_3, -1, 32, 128)
        t_2 = t_2.transpose(1, 2)
        t_0 = t_0.transpose(3, 2)
        t_0 = torch.matmul(t_1, t_0)
        t_0 += x0
        t_1 = t_0.float()
        t_1 = torch.nn.functional.softmax(t_1, dim=-1, _stacklevel=3, dtype=None)
        t_0 = t_1.type_as(t_0)
        t_0 = self.l_33(t_0)
        t_2 = torch.matmul(t_0, t_2)
        t_2 = t_2.transpose(1, 2)
        t_2 = t_2.contiguous()
        t_3 = t_2.view(t_3, -1, 4096)
        t_3 = self.l_34(t_3)
        t_3 = self.l_35(t_3)
        t_3 = t_4 + t_3
        t_4 = self.l_36(t_3)
        t_2 = t_4.size()
        t_2 = t_2[0]
        t_4 = self.l_37(t_4)
        t_4 = t_4.view(t_2, -1, 32, 128)
        t_4 = t_4.transpose(1, 2)
        t_0 = x10.view(t_2, -1, 32, 128)
        t_0 = t_0.transpose(1, 2)
        t_1 = x11.view(t_2, -1, 32, 128)
        t_1 = t_1.transpose(1, 2)
        t_0 = t_0.transpose(3, 2)
        t_0 = torch.matmul(t_4, t_0)
        t_0 += x1
        t_4 = t_0.float()
        t_4 = torch.nn.functional.softmax(t_4, dim=-1, _stacklevel=3, dtype=None)
        t_0 = t_4.type_as(t_0)
        t_0 = self.l_38(t_0)
        t_1 = torch.matmul(t_0, t_1)
        t_1 = t_1.transpose(1, 2)
        t_1 = t_1.contiguous()
        t_2 = t_1.view(t_2, -1, 4096)
        t_2 = self.l_39(t_2)
        t_2 = self.l_40(t_2)
        t_2 = t_3 + t_2
        t_3 = self.l_41(t_2)
        t_3 = self.l_42(t_3)
        t_3 = torch.nn.functional.relu(t_3, inplace=False)
        t_3 = self.l_43(t_3)
        t_3 = self.l_44(t_3)
        t_3 = self.l_45(t_3)
        t_3 = t_2 + t_3
        t_2 = self.l_46(t_3)
        t_1 = t_2.size()
        t_1 = t_1[0]
        t_0 = self.l_47(t_2)
        t_0 = t_0.view(t_1, -1, 32, 128)
        t_0 = t_0.transpose(1, 2)
        t_4 = self.l_48(t_2)
        t_4 = t_4.view(t_1, -1, 32, 128)
        t_4 = t_4.transpose(1, 2)
        t_2 = self.l_49(t_2)
        t_2 = t_2.view(t_1, -1, 32, 128)
        t_2 = t_2.transpose(1, 2)
        t_4 = t_4.transpose(3, 2)
        t_4 = torch.matmul(t_0, t_4)
        t_4 += x0
        t_0 = t_4.float()
        t_0 = torch.nn.functional.softmax(t_0, dim=-1, _stacklevel=3, dtype=None)
        t_4 = t_0.type_as(t_4)
        t_4 = self.l_50(t_4)
        t_2 = torch.matmul(t_4, t_2)
        t_2 = t_2.transpose(1, 2)
        t_2 = t_2.contiguous()
        t_1 = t_2.view(t_1, -1, 4096)
        t_1 = self.l_51(t_1)
        t_1 = self.l_52(t_1)
        t_1 = t_3 + t_1
        t_3 = self.l_53(t_1)
        t_2 = t_3.size()
        t_2 = t_2[0]
        t_3 = self.l_54(t_3)
        t_3 = t_3.view(t_2, -1, 32, 128)
        t_3 = t_3.transpose(1, 2)
        t_4 = x12.view(t_2, -1, 32, 128)
        t_4 = t_4.transpose(1, 2)
        t_0 = x13.view(t_2, -1, 32, 128)
        t_0 = t_0.transpose(1, 2)
        t_4 = t_4.transpose(3, 2)
        t_4 = torch.matmul(t_3, t_4)
        t_4 += x1
        t_3 = t_4.float()
        t_3 = torch.nn.functional.softmax(t_3, dim=-1, _stacklevel=3, dtype=None)
        t_4 = t_3.type_as(t_4)
        t_4 = self.l_55(t_4)
        t_0 = torch.matmul(t_4, t_0)
        t_0 = t_0.transpose(1, 2)
        t_0 = t_0.contiguous()
        t_2 = t_0.view(t_2, -1, 4096)
        t_2 = self.l_56(t_2)
        t_2 = self.l_57(t_2)
        t_2 = t_1 + t_2
        t_1 = self.l_58(t_2)
        t_1 = self.l_59(t_1)
        t_1 = torch.nn.functional.relu(t_1, inplace=False)
        t_1 = self.l_60(t_1)
        t_1 = self.l_61(t_1)
        t_1 = self.l_62(t_1)
        t_1 = t_2 + t_1
        t_2 = self.l_63(t_1)
        t_0 = t_2.size()
        t_0 = t_0[0]
        t_4 = self.l_64(t_2)
        t_4 = t_4.view(t_0, -1, 32, 128)
        t_4 = t_4.transpose(1, 2)
        t_3 = self.l_65(t_2)
        t_3 = t_3.view(t_0, -1, 32, 128)
        t_3 = t_3.transpose(1, 2)
        t_2 = self.l_66(t_2)
        t_2 = t_2.view(t_0, -1, 32, 128)
        t_2 = t_2.transpose(1, 2)
        t_3 = t_3.transpose(3, 2)
        t_3 = torch.matmul(t_4, t_3)
        t_3 += x0
        t_4 = t_3.float()
        t_4 = torch.nn.functional.softmax(t_4, dim=-1, _stacklevel=3, dtype=None)
        t_3 = t_4.type_as(t_3)
        t_3 = self.l_67(t_3)
        t_2 = torch.matmul(t_3, t_2)
        t_2 = t_2.transpose(1, 2)
        t_2 = t_2.contiguous()
        t_0 = t_2.view(t_0, -1, 4096)
        t_0 = self.l_68(t_0)
        t_0 = self.l_69(t_0)
        t_0 = t_1 + t_0
        t_1 = self.l_70(t_0)
        t_2 = t_1.size()
        t_2 = t_2[0]
        t_1 = self.l_71(t_1)
        t_1 = t_1.view(t_2, -1, 32, 128)
        t_1 = t_1.transpose(1, 2)
        t_3 = x14.view(t_2, -1, 32, 128)
        t_3 = t_3.transpose(1, 2)
        t_4 = x15.view(t_2, -1, 32, 128)
        t_4 = t_4.transpose(1, 2)
        t_3 = t_3.transpose(3, 2)
        t_3 = torch.matmul(t_1, t_3)
        t_3 += x1
        t_1 = t_3.float()
        t_1 = torch.nn.functional.softmax(t_1, dim=-1, _stacklevel=3, dtype=None)
        t_3 = t_1.type_as(t_3)
        t_3 = self.l_72(t_3)
        t_4 = torch.matmul(t_3, t_4)
        t_4 = t_4.transpose(1, 2)
        t_4 = t_4.contiguous()
        t_2 = t_4.view(t_2, -1, 4096)
        t_2 = self.l_73(t_2)
        t_2 = self.l_74(t_2)
        t_2 = t_0 + t_2
        t_0 = self.l_75(t_2)
        t_0 = self.l_76(t_0)
        t_0 = torch.nn.functional.relu(t_0, inplace=False)
        t_0 = self.l_77(t_0)
        t_0 = self.l_78(t_0)
        t_0 = self.l_79(t_0)
        t_0 = t_2 + t_0
        t_2 = self.l_80(t_0)
        t_4 = t_2.size()
        t_4 = t_4[0]
        t_3 = self.l_81(t_2)
        t_3 = t_3.view(t_4, -1, 32, 128)
        t_3 = t_3.transpose(1, 2)
        t_1 = self.l_82(t_2)
        t_1 = t_1.view(t_4, -1, 32, 128)
        t_1 = t_1.transpose(1, 2)
        t_2 = self.l_83(t_2)
        t_2 = t_2.view(t_4, -1, 32, 128)
        t_2 = t_2.transpose(1, 2)
        t_1 = t_1.transpose(3, 2)
        t_1 = torch.matmul(t_3, t_1)
        t_1 += x0
        t_3 = t_1.float()
        t_3 = torch.nn.functional.softmax(t_3, dim=-1, _stacklevel=3, dtype=None)
        t_1 = t_3.type_as(t_1)
        t_1 = self.l_84(t_1)
        t_2 = torch.matmul(t_1, t_2)
        t_2 = t_2.transpose(1, 2)
        t_2 = t_2.contiguous()
        t_4 = t_2.view(t_4, -1, 4096)
        t_4 = self.l_85(t_4)
        t_4 = self.l_86(t_4)
        t_4 = t_0 + t_4
        t_0 = self.l_87(t_4)
        t_2 = t_0.size()
        t_2 = t_2[0]
        t_0 = self.l_88(t_0)
        t_0 = t_0.view(t_2, -1, 32, 128)
        t_0 = t_0.transpose(1, 2)
        t_1 = x16.view(t_2, -1, 32, 128)
        t_1 = t_1.transpose(1, 2)
        t_3 = x17.view(t_2, -1, 32, 128)
        t_3 = t_3.transpose(1, 2)
        t_1 = t_1.transpose(3, 2)
        t_1 = torch.matmul(t_0, t_1)
        t_1 += x1
        t_0 = t_1.float()
        t_0 = torch.nn.functional.softmax(t_0, dim=-1, _stacklevel=3, dtype=None)
        t_1 = t_0.type_as(t_1)
        t_1 = self.l_89(t_1)
        t_3 = torch.matmul(t_1, t_3)
        t_3 = t_3.transpose(1, 2)
        t_3 = t_3.contiguous()
        t_2 = t_3.view(t_2, -1, 4096)
        t_2 = self.l_90(t_2)
        t_2 = self.l_91(t_2)
        t_2 = t_4 + t_2
        t_4 = self.l_92(t_2)
        t_4 = self.l_93(t_4)
        t_4 = torch.nn.functional.relu(t_4, inplace=False)
        t_4 = self.l_94(t_4)
        t_4 = self.l_95(t_4)
        t_4 = self.l_96(t_4)
        t_4 = t_2 + t_4
        t_4 = self.l_97(t_4)
        t_4 = self.l_98(t_4)
        t_4 = t_4 * 0.03125
        t_4 = self.l_99(t_4)
        t_2 = t_4.size(-1)
        t_2 = t_4.view(-1, t_2)
        t_4 = lm_labels.view(-1)
        t_4 = self.l_100(t_2, t_4)
        # returning:
        # T5ForConditionalGeneration/CrossEntropyLoss[lm_loss]
        return (t_4,)

    def state_dict(self,*args,**kwargs):
        # we return the state dict of this part as it should be in the original model
        return state_dict(self,*args,**kwargs)

    def load_state_dict(self, state):
        return load_state_dict(self,state)

    def named_parameters(self,recurse=True):
        # we return the named parameters of this part as it should be in the original model
        return named_parameters(self,recurse=recurse)

    def named_buffers(self,recurse=True):
        # we return the named buffers of this part as it should be in the original model
        return named_buffers(self,recurse=recurse)

    def cpu(self):
        return cpu(self)

    def cuda(self,device=None):
        return cuda(self,device=device)

    def to(self, *args, **kwargs):
        return to(self,*args,**kwargs)


def traverse_model(module: nn.Module, depth: int, prefix: Optional[str] = None,
                   basic_blocks: Tuple[nn.Module] = (), full: bool = False) -> Iterator[Tuple[nn.Module, str, nn.Module]]:
    '''
    iterate over model layers yielding the layer,layer_scope,encasing_module
    Parameters:
    -----------
    model:
        the model to iterate over
    depth:
        how far down in the model tree to go
    basic_blocks:
        a list of modules that if encountered will not be broken down
    full:
        whether to yield only layers specified by the depth and basick_block options or to yield all layers
    '''
    if prefix is None:
        prefix = type(module).__name__

    for name, sub_module in module.named_children():
        scope = prefix + "/" + type(sub_module).__name__ + f"[{name}]"
        if len(list(sub_module.children())) == 0 or isinstance(sub_module, tuple(basic_blocks)) or depth == 0:
            if full:
                yield sub_module, scope, module, True
            else:
                yield sub_module, scope, module
        else:
            if full:
                yield sub_module, scope, module, False
            yield from traverse_model(sub_module, depth - 1, scope, basic_blocks, full)


def layerDict(model: nn.Module, depth=1000, basic_blocks=()) -> Dict[str, nn.Module]:
    return {s: l for l, s, _ in traverse_model(model, depth, basic_blocks=basic_blocks)}


def traverse_params_buffs(module: nn.Module, prefix: Optional[str] = None) -> Iterator[Tuple[torch.tensor, str]]:
    '''
    iterate over model's buffers and parameters yielding obj,obj_scope

    Parameters:
    -----------
    model:
        the model to iterate over
    '''
    if prefix is None:
        prefix = type(module).__name__

    # params
    for param_name, param in module.named_parameters(recurse=False):
        param_scope = f"{prefix}/{type(param).__name__}[{param_name}]"
        yield param, param_scope

    # buffs
    for buffer_name, buffer in module.named_buffers(recurse=False):
        buffer_scope = f"{prefix}/{type(buffer).__name__}[{buffer_name}]"
        yield buffer, buffer_scope

    # recurse
    for name, sub_module in module.named_children():
        yield from traverse_params_buffs(sub_module, prefix + "/" + type(sub_module).__name__ + f"[{name}]")


def tensorDict(model: nn.Module) -> OrderedDict[str, Tensor]:
    return collections.OrderedDict((s, t)for t, s in traverse_params_buffs(model))


def move_tensors(ts, device):
    def move(t):
        if isinstance(t, (nn.Module, Tensor)):
            return t.to(device)
        return t

    return nested_map(move, ts)


def nested_map(func, ts,full=False):
    if isinstance(ts, torch.Size):
        # size is inheriting from tuple which is stupid
        return func(ts)
    elif isinstance(ts, (list, tuple, set)):
        return type(ts)(nested_map(func, t,full=full) for t in ts)
    elif isinstance(ts, dict):
        return {k: nested_map(func, v,full=full) for k, v in ts.items()}
    elif isinstance(ts, slice) and full:
        start = nested_map(func, ts.start,full=full)
        stop = nested_map(func, ts.stop,full=full)
        step = nested_map(func, ts.step,full=full)
        return slice(start, stop, step)
    return func(ts)


def flatten(ts):
    if isinstance(ts,torch.Size):
        # size is inheriting from tuple which is stupid
        yield ts
    elif isinstance(ts, (list, tuple, set)):
        yield from chain(*[flatten(t) for t in ts])
    elif isinstance(ts, dict):
        yield from chain(*[flatten(t) for k,t in sorted(ts.items(),key=lambda t:t[0])])
    else:
        yield ts


def unflatten(xs,structure):
    return _unflatten(xs,structure)[0]


def _unflatten(xs,structure):
    if isinstance(structure,torch.Size):
        #torch.Size is subclass of tuple which is stupid
        return xs[0],1

    if not isinstance(structure,(list,tuple,set,dict)):
        return xs[0],1
    
    if isinstance(structure,(list,tuple,set)):
        offset=0
        elements = []
        for s in structure:
            e,n = _unflatten(xs[offset:],s)
            elements.append(e)
            offset += n
        
        return type(structure)(elements),offset
    
    assert isinstance(structure,dict)
    offset = 0
    elements = dict()
    for k,v in sorted(structure.items(),key=lambda t: t[0]):
        e,n = _unflatten(xs[offset:],v)
        elements[k] = e
        offset += n
    
    return elements,offset


def state_dict(partition, *args,**kwargs):
    # we return the state dict of this part as it should be in the original model
    state = nn.Module.state_dict(partition,*args,**kwargs)
    lookup = partition.lookup
    result = dict()
    for k, v in state.items():
        if k in lookup:
            result[lookup[k]] = v
        else:
            assert '.' in k
            split_idx = k.find('.')
            new_k = lookup[k[:split_idx]] + k[split_idx:]
            result[new_k] = v
    return result


def load_state_dict(partition, state):
    reverse_lookup = {v: k for k, v in partition.lookup.items()}
    device = partition.device
    keys = list(partition.state_dict(None).keys())
    new_state = dict()
    for k in keys:
        if k in reverse_lookup:
            new_state[reverse_lookup[k]] = state[k].to(device)
            continue
        idx = k.rfind(".")
        to_replace = k[:idx]
        if to_replace in reverse_lookup:
            key = reverse_lookup[to_replace] + k[idx:]
            new_state[key] = state[k].to(device)
    nn.Module.load_state_dict(partition, new_state, strict=True)


def named_buffers(partition, recurse=True):
    # we return the named buffers of this part as it should be in the original model
    params = nn.Module.named_buffers(partition, recurse=recurse)
    lookup = partition.lookup
    for k, v in params:
        if k in lookup:
            yield (lookup[k], v)
        else:
            assert '.' in k
            split_idx = k.find('.')
            new_k = lookup[k[:split_idx]] + k[split_idx:]
            yield (new_k, v)


def named_parameters(partition, recurse=True):
    # we return the named parameters of this part as it should be in the original model
    params = nn.Module.named_parameters(partition, recurse=recurse)
    lookup = partition.lookup
    for k, v in params:
        if k in lookup:
            yield (lookup[k], v)
        else:
            assert '.' in k
            split_idx = k.find('.')
            new_k = lookup[k[:split_idx]] + k[split_idx:]
            yield (new_k, v)


def cpu(partition):
    partition.device = torch.device('cpu')
    return nn.Module.cpu(partition)


def cuda(partition, device=None):
    if device is None:
        device = torch.cuda.current_device()
    partition.device = torch.device(device)
    return nn.Module.cuda(partition, partition.device)


def to(partition, *args, **kwargs):
    device = None
    if 'device' in kwargs:
        device = kwargs['device']
    elif 'tensor' in kwargs:
        device = kwargs['tensor'].device
    if args:
        if isinstance(args[0], (torch.device, int, str)):
            device = args[0]
        if torch.is_tensor(args[0]):
            device = args[0].device
    if not (device is None):
        partition.device = torch.device(device)
    return nn.Module.to(partition, *args, **kwargs)

model_args = {'model_name_or_path': 't5-3b', 'max_seq_length': 128, 'answer_max_seq_length': 16, 'stateless_tied': True, 'lmhead': True, 'precompute_masks': True}
"""analysis summary
-I- Printing Report
warnings:
Partition0 output:T5ForConditionalGeneration/T5Stack[encoder]/tuple::__getitem___149_1 is not contiguous!
Partition0 output:T5ForConditionalGeneration/T5Stack[decoder]/T5Block[0]/T5LayerSelfAttention[0]/prim::TupleConstruct_1628_1 is not contiguous!
Partition1 output:T5ForConditionalGeneration/T5Stack[encoder]/tuple::__getitem___149_2 is not contiguous!
Partition2 output:T5ForConditionalGeneration/T5Stack[encoder]/tuple::__getitem___149_3 is not contiguous!
Partition2 output:T5ForConditionalGeneration/T5Stack[decoder]/T5Block[0]/tuple::__getitem___1632 is not contiguous!
Partition2 output:T5ForConditionalGeneration/T5Stack[decoder]/T5Block[0]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Tensor::transpose_1648 is not contiguous!
Partition3 output:T5ForConditionalGeneration/T5Stack[decoder]/T5Block[0]/T5LayerCrossAttention[1]/T5Attention[EncDecAttention]/Tensor::transpose_1664 is not contiguous!
Partition4 output:T5ForConditionalGeneration/T5Stack[decoder]/tuple::__getitem___1764_5 is not contiguous!
Partition4 output:T5ForConditionalGeneration/T5Stack[decoder]/tuple::__getitem___1766_5 is not contiguous!
Partition4 output:T5ForConditionalGeneration/T5Stack[decoder]/T5Block[6]/T5LayerSelfAttention[0]/T5Attention[SelfAttention]/Tensor::transpose_2336 is not contiguous!
Partition5 output:T5ForConditionalGeneration/T5Stack[decoder]/tuple::__getitem___1764_6 is not contiguous!
Partition5 output:T5ForConditionalGeneration/T5Stack[decoder]/tuple::__getitem___1766_6 is not contiguous!
Partition6 output:T5ForConditionalGeneration/T5Stack[decoder]/tuple::__getitem___1764_7 is not contiguous!
Partition6 output:T5ForConditionalGeneration/T5Stack[decoder]/tuple::__getitem___1766_7 is not contiguous!
Number of stages: 8
cutting edges are edges between partitions
number of cutting edges: 87

backward times include recomputation

Stage parameter count:
 {0: 368460800,
 1: 356530176,
 2: 352335872,
 3: 377495552,
 4: 352339968,
 5: 352339968,
 6: 352339968,
 7: 372656128,
 'total': 2884498432}

real times are based on real measurements of execution time (with communication) of generated partitions ms
forward {0: 12.61, 1: 11.76, 2: 11.43, 3: 19.2, 4: 7.48, 5: 7.44, 6: 6.48, 7: 7.16}
backward {0: 30.39, 1: 27.35, 2: 27.61, 3: 26.44, 4: 29.94, 5: 28.62, 6: 30.67, 7: 28.35}

Assuming bandwidth of 12 GBps between GPUs

communication volumes size of activations of each partition
0: input size:'0.00 MB', recieve_time:'0.00 ms', out:'5.14 MB', send time:'0.43 ms'
1: input size:'4.72 MB', recieve_time:'0.39 ms', out:'3.15 MB', send time:'0.26 ms'
2: input size:'3.51 MB', recieve_time:'0.29 ms', out:'3.44 MB', send time:'0.29 ms'
3: input size:'3.15 MB', recieve_time:'0.26 ms', out:'97.01 MB', send time:'8.08 ms'
4: input size:'23.97 MB', recieve_time:'2.00 ms', out:'3.24 MB', send time:'0.27 ms'
5: input size:'26.31 MB', recieve_time:'2.19 ms', out:'0.66 MB', send time:'0.05 ms'
6: input size:'25.82 MB', recieve_time:'2.15 ms', out:'0.66 MB', send time:'0.05 ms'
7: input size:'25.82 MB', recieve_time:'2.15 ms', out:'0.00 MB', send time:'0.00 ms'

Compuatation Communication ratio (comp/(comp+comm)):
forward {0: 0.97, 1: 0.98, 2: 0.97, 3: 0.58, 4: 0.96, 5: 0.99, 6: 0.99, 7: 1.0} 
backward {0: 1.0, 1: 0.99, 2: 0.99, 3: 0.99, 4: 0.93, 5: 0.92, 6: 0.93, 7: 0.92}

Analysis for T = fwd + bwd:
 {'expected_compute_utilization': {0: 1.0,
                                  1: 0.9,
                                  2: 0.9,
                                  3: 0.88,
                                  4: 0.83,
                                  5: 0.79,
                                  6: 0.82,
                                  7: 0.78},
 'pipeline_no_comm': {0: 42.57,
                      1: 38.46,
                      2: 38.46,
                      3: 37.29,
                      4: 35.16,
                      5: 33.81,
                      6: 34.94,
                      7: 33.36,
                      'worstcase': 42.57},
 'pipeline_vs_seq_no_comm': 5.61,
 'pipeline_with_non_parallel_comm': {0: 43.0,
                                     1: 39.11,
                                     2: 39.04,
                                     3: 45.63,
                                     4: 37.43,
                                     5: 36.06,
                                     6: 37.14,
                                     7: 35.51,
                                     'worstcase': 45.63},
 'seq_no_comm_no_recomp': {0: 32.59,
                           1: 33.52,
                           2: 31.09,
                           3: 30.49,
                           4: 28.15,
                           5: 28.54,
                           6: 27.76,
                           7: 26.67}}

Analysis for T = (1-R)fwd + R*bwd:

Pipeline Slowdown: (compared to sequential executation with no communication, and same recompute policy)
forward 2.072
backward 1.116

Expected utilization by partition
forward {0: 0.64, 1: 0.6, 2: 0.58, 3: 0.58, 4: 0.38, 5: 0.39, 6: 0.34, 7: 0.37}
backward {0: 0.99, 1: 0.88, 2: 0.89, 3: 0.85, 4: 0.91, 5: 0.86, 6: 0.93, 7: 0.85}

worstcase: bwd: 30.667 fwd: 19.198
expected_speedup_compared_to_seq_no_recomp_no_comm: 4.789
Expected speedup for 8 partitions is: 5.391
max cuda memory used 3.23GB
"""